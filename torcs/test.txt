./tags:ABS	src/drivers/human/human.h	/^	tdble	ABS;$/;"	m	struct:HumanContext
./tags:AGain	src/drivers/inferno2/inferno2.cpp	/^static tdble AGain[10]     = {0.008f};$/;"	v	file:
./tags:AddObject	src/tools/trackgen/objects.cpp	/^AddObject(unsigned int clr, tdble x, tdble y)$/;"	f	file:
./tags:AddSide	src/modules/track/track1.cpp	/^AddSide(tTrackSeg *curSeg, tdble width, char *material, int side, int type, void *TrackHandle)$/;"	f	file:
./tags:AdvStep	src/drivers/inferno2/inferno2.cpp	/^static tdble AdvStep[10]   = {1.0f};$/;"	v	file:
./tags:Advance	src/drivers/inferno2/inferno2.cpp	/^static tdble Advance[10]   = {3.5f};$/;"	v	file:
./tags:Advance2	src/drivers/inferno2/inferno2.cpp	/^static tdble Advance2[10]  = {10.0f};$/;"	v	file:
./tags:AntiSlip	src/drivers/human/human.h	/^	tdble	AntiSlip;$/;"	m	struct:HumanContext
./tags:BorderFriction	src/modules/simu/simuv2/collide.cpp	/^const tdble BorderFriction = 0.00;$/;"	v
./tags:C1	src/modules/simu/simuv2/susp.h	/^    tdble C1, b1, v1; \/* coefs for slow *\/$/;"	m	struct:__anon15
./tags:C2	src/modules/simu/simuv2/susp.h	/^    tdble C2, b2;     \/* coefs for fast *\/$/;"	m	struct:__anon15
./tags:Cd	src/modules/simu/simuv2/aero.h	/^    tdble	Cd;		\/* for aspiration *\/$/;"	m	struct:__anon13
./tags:Clift	src/modules/simu/simuv2/aero.h	/^    tdble	Clift[2];	\/* front & rear lift due to body not wings *\/$/;"	m	struct:__anon13
./tags:CollDet	src/drivers/inferno2/common.cpp	/^CollDet(tCarElt* car, int idx, tSituation *s, tdble Curtime, tdble dny)$/;"	f
./tags:ConsFactor	src/drivers/inferno2/inferno2.cpp	/^tdble ConsFactor[10]     = {0.0007f};$/;"	v
./tags:Cosz	src/modules/simu/simuv2/carstruct.h	/^    tdble	Cosz;$/;"	m	struct:__anon18
./tags:CreateSegRing	src/modules/track/track2.cpp	/^CreateSegRing(void *TrackHandle, char *section, tTrackSeg **pRoot, tdble *pLength, int *pNseg, tTrackSeg *start, tTrackSeg *end, int ext)$/;"	f	file:
./tags:DEGPRAD	src/modules/track/track.cpp	/^const tdble DEGPRAD = 180.0 \/ PI;   \/* degrees per radian *\/$/;"	v
./tags:DelayRepeat	src/libs/tgfclient/gui.cpp	/^static tdble DelayRepeat;$/;"	v	file:
./tags:DoVfactor	export/include/track.h	/^    tdble DoVfactor;            \/* the factor to use in calculating DoV for this Seg *\/$/;"	m	struct:trackSeg
./tags:DoVfactor	src/interfaces/track.h	/^    tdble DoVfactor;            \/* the factor to use in calculating DoV for this Seg *\/$/;"	m	struct:trackSeg
./tags:DoVfactor	src/modules/track/track4.cpp	/^static tdble DoVfactor=1.0;$/;"	v	file:
./tags:DynOffset	src/drivers/inferno2/inferno2.cpp	/^tdble DynOffset[10] = {0.0};$/;"	v
./tags:ExtHeight	src/tools/trackgen/easymesh.cpp	/^static tdble 	ExtHeight;$/;"	v	file:
./tags:F0	src/modules/simu/simuv2/susp.h	/^    tdble F0;         \/* initial force *\/$/;"	m	struct:__anon17
./tags:FrontLevelGroup1	src/modules/graphic/ssggraph/grscene.h	/^  tdble FrontLevelGroup1;      \/* the distance for the end of the front scene for group type 1*\/$/;"	m	struct:DoV
./tags:FrontLevelGroup2	src/modules/graphic/ssggraph/grscene.h	/^  tdble FrontLevelGroup2;      \/* the distance for the end of the front scene for group type 2*\/$/;"	m	struct:DoV
./tags:FrontLevelGroup3	src/modules/graphic/ssggraph/grscene.h	/^  tdble FrontLevelGroup3;      \/* the distance for the end of the front scene for group type 3*\/$/;"	m	struct:DoV
./tags:FrontLevelGroupGlobal	src/modules/graphic/ssggraph/grscene.h	/^  tdble FrontLevelGroupGlobal; \/* the distance for the end of the front scene *\/$/;"	m	struct:DoV
./tags:FrontLevelMap1	src/modules/graphic/ssggraph/grscene.h	/^  tdble FrontLevelMap1;      \/* the distance for the end of the front scene with only one mapping*\/$/;"	m	struct:DoV
./tags:FrontLevelMap2	src/modules/graphic/ssggraph/grscene.h	/^  tdble FrontLevelMap2;      \/* the distance for the end of the front scene with two mapping*\/$/;"	m	struct:DoV
./tags:FrontLevelMap3	src/modules/graphic/ssggraph/grscene.h	/^  tdble FrontLevelMap3;      \/* the distance for the end of the front scene with three mapping*\/$/;"	m	struct:DoV
./tags:Fx	export/include/car.h	/^	tdble Fx;$/;"	m	struct:__anon200
./tags:Fx	src/interfaces/car.h	/^	tdble Fx;$/;"	m	struct:__anon160
./tags:Fy	export/include/car.h	/^	tdble Fy;$/;"	m	struct:__anon200
./tags:Fy	src/interfaces/car.h	/^	tdble Fy;$/;"	m	struct:__anon160
./tags:Fz	export/include/car.h	/^	tdble Fz;$/;"	m	struct:__anon200
./tags:Fz	src/interfaces/car.h	/^	tdble Fz;$/;"	m	struct:__anon160
./tags:G	export/include/tgf.h	/^const tdble G = 9.80665f; \/**< m\/s\/s *\/$/;"	v
./tags:G	src/libs/tgf/tgf.h	/^const tdble G = 9.80665f; \/**< m\/s\/s *\/$/;"	v
./tags:Gear	src/drivers/human/human.h	/^	tdble	Gear;$/;"	m	struct:HumanContext
./tags:Gear	src/drivers/inferno2/inferno2.cpp	/^static tdble	Gear;$/;"	v	file:
./tags:GetElevation	src/tools/trackgen/elevation.cpp	/^tdble GetElevation(tdble x, tdble y, tdble z)$/;"	f
./tags:GfParmGetCurNum	src/libs/tgf/params.cpp	/^GfParmGetCurNum (void *handle, char *path, char *key, char *unit, tdble deflt)$/;"	f
./tags:GfParmGetNum	src/libs/tgf/params.cpp	/^GfParmGetNum (void *handle, const char *path, const char *key, const char *unit, tdble deflt)$/;"	f
./tags:GfParmGetNumBoundaries	src/libs/tgf/params.cpp	/^GfParmGetNumBoundaries(void *handle, char *path, char *key, tdble *min, tdble *max)$/;"	f
./tags:GfParmSI2Unit	src/libs/tgf/params.cpp	/^GfParmSI2Unit (const char *unit, tdble val)$/;"	f
./tags:GfParmSetCurNum	src/libs/tgf/params.cpp	/^GfParmSetCurNum(void *handle, char *path, char *key, char *unit, tdble val)$/;"	f
./tags:GfParmSetNum	src/libs/tgf/params.cpp	/^GfParmSetNum(void *handle, const char *path, const char *key, const char *unit, tdble val)$/;"	f
./tags:GfParmSetNumEx	src/libs/tgf/params.cpp	/^GfParmSetNumEx(void *handle, char *path, char *key, char *unit, tdble val, tdble min, tdble max)$/;"	f
./tags:GfParmUnit2SI	src/libs/tgf/params.cpp	/^GfParmUnit2SI (const char *unit, tdble val)$/;"	f
./tags:GfTime2Str	src/libs/tgf/tgf.cpp	/^char * GfTime2Str(tdble sec, int sgn)$/;"	f
./tags:GlobalStepLen	src/modules/track/track3.cpp	/^static tdble	GlobalStepLen = 0;$/;"	v	file:
./tags:GlobalStepLen	src/modules/track/track4.cpp	/^static tdble	GlobalStepLen = 0;$/;"	v	file:
./tags:Gmax	src/drivers/inferno2/inferno2.cpp	/^tdble Gmax;$/;"	v
./tags:GridStep	src/tools/trackgen/easymesh.cpp	/^static tdble 	GridStep;$/;"	v	file:
./tags:GridStep	src/tools/trackgen/relief.cpp	/^static tdble	GridStep;$/;"	v	file:
./tags:I	src/modules/simu/simuv2/axle.h	/^    tdble	I;	\/* including differential inertia but not wheels *\/$/;"	m	struct:__anon22
./tags:I	src/modules/simu/simuv2/brake.h	/^    tdble	I;$/;"	m	struct:__anon23
./tags:I	src/modules/simu/simuv2/differential.h	/^    tdble	I;$/;"	m	struct:__anon19
./tags:I	src/modules/simu/simuv2/differential.h	/^    tdble	I;$/;"	m	struct:__anon20
./tags:I	src/modules/simu/simuv2/engine.h	/^    tdble		I;$/;"	m	struct:__anon12
./tags:I	src/modules/simu/simuv2/wheel.h	/^    tdble  	I;       	\/* I = inertial moment of the wheel *\/$/;"	m	struct:__anon21
./tags:InvBrkCmd	src/drivers/inferno2/inferno2.cpp	/^static tdble	InvBrkCmd;$/;"	v	file:
./tags:K	src/modules/simu/simuv2/susp.h	/^    tdble K;          \/* spring coef *\/$/;"	m	struct:__anon17
./tags:Kx	src/modules/simu/simuv2/aero.h	/^    tdble	Kx;$/;"	m	struct:__anon14
./tags:Kyl	export/include/track.h	/^    tdble	Kyl;		\/* find y along x *\/$/;"	m	struct:trackSeg
./tags:Kyl	src/interfaces/track.h	/^    tdble	Kyl;		\/* find y along x *\/$/;"	m	struct:trackSeg
./tags:Kz	src/modules/simu/simuv2/aero.h	/^    tdble	Kz;$/;"	m	struct:__anon14
./tags:Kzl	export/include/track.h	/^    tdble Kzl;		\/* long constant *\/$/;"	m	struct:trackSeg
./tags:Kzl	src/interfaces/track.h	/^    tdble Kzl;		\/* long constant *\/$/;"	m	struct:trackSeg
./tags:Kzw	export/include/track.h	/^    tdble Kzw;		\/* width constant *\/$/;"	m	struct:trackSeg
./tags:Kzw	src/interfaces/track.h	/^    tdble Kzw;		\/* width constant *\/$/;"	m	struct:trackSeg
./tags:LgfsFinal	src/drivers/inferno2/inferno2.cpp	/^tdble LgfsFinal[10];$/;"	v
./tags:LodFactorValue	src/libs/confscreens/graphconfig.cpp	/^static tdble	LodFactorValue = 1.0;$/;"	v	file:
./tags:Margin	src/tools/trackgen/easymesh.cpp	/^static tdble 	Margin;$/;"	v	file:
./tags:Margin	src/tools/trackgen/elevation.cpp	/^static tdble 	Margin;$/;"	v	file:
./tags:MaxSpeed	src/drivers/inferno2/inferno2.cpp	/^tdble	MaxSpeed[10];$/;"	v
./tags:Minv	src/modules/simu/simuv2/carstruct.h	/^    tdble	Minv;		\/* 1 \/ mass with pilot (without fuel) *\/$/;"	m	struct:__anon18
./tags:O1	src/drivers/inferno2/inferno2.cpp	/^tdble O1[10] = {60.0};$/;"	v
./tags:O2	src/drivers/inferno2/inferno2.cpp	/^tdble O2[10] = {60.0};$/;"	v
./tags:O3	src/drivers/inferno2/inferno2.cpp	/^tdble O3[10] = {0.0};$/;"	v
./tags:O4	src/drivers/inferno2/inferno2.cpp	/^tdble O4[10] = {0.0};$/;"	v
./tags:O5	src/drivers/inferno2/inferno2.cpp	/^tdble O5[10] = {20.0};$/;"	v
./tags:OA	src/drivers/inferno2/inferno2.cpp	/^tdble OA[10] = {0.0};$/;"	v
./tags:OP	src/drivers/inferno2/inferno2.cpp	/^tdble OP[10] = {15.0};$/;"	v
./tags:OW	src/drivers/inferno2/inferno2.cpp	/^tdble OW[10] = {2.0};$/;"	v
./tags:Offset	src/drivers/inferno2/inferno2.cpp	/^static tdble Offset[10]    = {0.0f};$/;"	v	file:
./tags:OffsetApproach	src/drivers/inferno2/inferno2.cpp	/^tdble OffsetApproach[10] = {0.0};$/;"	v
./tags:OffsetExit	src/drivers/inferno2/inferno2.cpp	/^tdble OffsetExit[10]     = {0.0};$/;"	v
./tags:OffsetFinal	src/drivers/inferno2/inferno2.cpp	/^tdble OffsetFinal[10]    = {0.0};$/;"	v
./tags:PGain	src/drivers/inferno2/inferno2.cpp	/^static tdble PGain[10]     = {0.015f};$/;"	v	file:
./tags:PnGain	src/drivers/inferno2/inferno2.cpp	/^static tdble PnGain[10]    = {0.02f};$/;"	v	file:
./tags:PreA	src/modules/graphic/ssggraph/grcam.cpp	/^    tdble PreA;$/;"	m	class:cGrCarCamBehind	file:
./tags:PreA	src/modules/graphic/ssggraph/grcam.cpp	/^    tdble PreA;$/;"	m	class:cGrCarCamBehind2	file:
./tags:RearLevelGroup1	src/modules/graphic/ssggraph/grscene.h	/^  tdble RearLevelGroup1;$/;"	m	struct:DoV
./tags:RearLevelGroup2	src/modules/graphic/ssggraph/grscene.h	/^  tdble RearLevelGroup2;$/;"	m	struct:DoV
./tags:RearLevelGroup3	src/modules/graphic/ssggraph/grscene.h	/^  tdble RearLevelGroup3;$/;"	m	struct:DoV
./tags:RearLevelGroupGlobal	src/modules/graphic/ssggraph/grscene.h	/^  tdble RearLevelGroupGlobal; \/* the distance for the end of the front scene *\/$/;"	m	struct:DoV
./tags:RearLevelMap1	src/modules/graphic/ssggraph/grscene.h	/^  tdble RearLevelMap1;$/;"	m	struct:DoV
./tags:RearLevelMap2	src/modules/graphic/ssggraph/grscene.h	/^  tdble RearLevelMap2;$/;"	m	struct:DoV
./tags:RearLevelMap3	src/modules/graphic/ssggraph/grscene.h	/^  tdble RearLevelMap3;$/;"	m	struct:DoV
./tags:RtDistToPit	src/libs/robottools/rttrack.cpp	/^RtDistToPit(struct CarElt *car, tTrack *track, tdble *dL, tdble *dW)$/;"	f
./tags:RtTelemInit	src/libs/robottools/rttelem.cpp	/^void RtTelemInit(tdble ymin, tdble ymax)$/;"	f
./tags:RtTelemNewChannel	src/libs/robottools/rttelem.cpp	/^void RtTelemNewChannel(const char * name, tdble * var, tdble min, tdble max)$/;"	f
./tags:RtTrackGetWidth	src/libs/robottools/rttrack.cpp	/^RtTrackGetWidth(tTrackSeg *seg, tdble toStart)$/;"	f
./tags:RtTrackGlobal2Local	src/libs/robottools/rttrack.cpp	/^RtTrackGlobal2Local(tTrackSeg *segment, tdble X, tdble Y, tTrkLocPos *p, int type)$/;"	f
./tags:RtTrackHeightG	src/libs/robottools/rttrack.cpp	/^RtTrackHeightG(tTrackSeg *seg, tdble X, tdble Y)$/;"	f
./tags:RtTrackLocal2Global	src/libs/robottools/rttrack.cpp	/^RtTrackLocal2Global(tTrkLocPos *p, tdble *X, tdble *Y, int flag)$/;"	f
./tags:RtTrackSideNormalG	src/libs/robottools/rttrack.cpp	/^RtTrackSideNormalG(tTrackSeg *seg, tdble X, tdble Y, int side, t3Dd *norm)$/;"	f
./tags:SCx2	src/modules/simu/simuv2/aero.h	/^    tdble	SCx2;$/;"	m	struct:__anon13
./tags:SimDeltaTime	src/modules/simu/simuv2/simu.cpp	/^tdble SimDeltaTime;$/;"	v
./tags:SimEngineUpdateRpm	src/modules/simu/simuv2/engine.cpp	/^SimEngineUpdateRpm(tCar *car, tdble axleRpm)$/;"	f
./tags:SimSuspConfig	src/modules/simu/simuv2/susp.cpp	/^void SimSuspConfig(void *hdle, char *section, tSuspension *susp, tdble F0, tdble X0)$/;"	f
./tags:Sinz	src/modules/simu/simuv2/carstruct.h	/^    tdble	Sinz;$/;"	m	struct:__anon18
./tags:SpeedStrategy	src/drivers/inferno2/common.cpp	/^SpeedStrategy(tCarElt* car, int idx, tdble Vtarget, tSituation *s, tdble aspect)$/;"	f
./tags:Spline	src/drivers/inferno2/common.cpp	/^Spline(tdble p0, tdble p1, tdble pos, tdble start, tdble end)$/;"	f	file:
./tags:TargetSpeed	src/drivers/inferno2/inferno2.cpp	/^static tdble	TargetSpeed;$/;"	v	file:
./tags:TexRand	src/tools/trackgen/easymesh.cpp	/^static tdble	TexRand;$/;"	v	file:
./tags:TexSize	src/tools/trackgen/easymesh.cpp	/^static tdble	TexSize;$/;"	v	file:
./tags:TlmInit	src/modules/telemetry/telemetry.cpp	/^TlmInit(tdble ymin, tdble ymax)$/;"	f
./tags:TlmNewChannel	src/modules/telemetry/telemetry.cpp	/^TlmNewChannel(const char *name, tdble *var, tdble min, tdble max)$/;"	f
./tags:Tq	src/modules/simu/simuv2/brake.h	/^    tdble	Tq;$/;"	m	struct:__anon23
./tags:Tq	src/modules/simu/simuv2/differential.h	/^    tdble	Tq;$/;"	m	struct:__anon19
./tags:Tq	src/modules/simu/simuv2/engine.h	/^    tdble		Tq;	\/* output torque *\/$/;"	m	struct:__anon12
./tags:TqAtMaxPw	src/modules/simu/simuv2/engine.h	/^	tdble       TqAtMaxPw;$/;"	m	struct:__anon11
./tags:TrackGlobal2Local	src/modules/track/trackutil.cpp	/^TrackGlobal2Local(tTrackSeg *segment, tdble X, tdble Y, tTrkLocPos *p, int type)$/;"	f
./tags:TrackHeightG	src/modules/track/trackutil.cpp	/^TrackHeightG(tTrackSeg *seg, tdble x, tdble y)$/;"	f
./tags:TrackLocal2Global	src/modules/track/trackutil.cpp	/^TrackLocal2Global(tTrkLocPos *p, tdble *X, tdble *Y)$/;"	f
./tags:TrackSideNormal	src/modules/track/trackutil.cpp	/^TrackSideNormal(tTrackSeg *seg, tdble x, tdble y, int side, t3Dd *norm)$/;"	f
./tags:TrackSpline	src/modules/track/trackutil.cpp	/^TrackSpline(tdble p0, tdble p1, tdble t0, tdble t1, tdble t)$/;"	f
./tags:TrackStep	src/tools/trackgen/easymesh.cpp	/^static tdble	TrackStep;$/;"	v	file:
./tags:TrackStep	src/tools/trackgen/track.cpp	/^static tdble		TrackStep;$/;"	v	file:
./tags:Tright	src/drivers/inferno2/inferno2.cpp	/^tdble	Tright[10];$/;"	v
./tags:Trightprev	src/drivers/inferno2/inferno2.cpp	/^static tdble Trightprev[10];$/;"	v	file:
./tags:VGain	src/drivers/inferno2/inferno2.cpp	/^static tdble VGain[10]     = {0.0005f};$/;"	v	file:
./tags:VI	src/drivers/inferno2/common.cpp	/^static tdble VI[10];$/;"	v	file:
./tags:VM	src/drivers/inferno2/inferno2.cpp	/^tdble VM;$/;"	v
./tags:VM1	src/drivers/inferno2/inferno2.cpp	/^tdble VM1[10] = {15.0};$/;"	v
./tags:VM2	src/drivers/inferno2/inferno2.cpp	/^tdble VM2[10] = {0.0};$/;"	v
./tags:VM3	src/drivers/inferno2/inferno2.cpp	/^tdble VM3[10] = {25.0};$/;"	v
./tags:Vtarget	src/drivers/human/human.cpp	/^static tdble Vtarget;$/;"	v	file:
./tags:a	src/modules/simu/simuv2/engine.h	/^    tdble a;$/;"	m	struct:__anon10
./tags:aMax	src/modules/simu/simuv2/car.cpp	/^const tdble aMax = 0.35f; \/*  *\/$/;"	v
./tags:accelCmd	export/include/car.h	/^    tdble	accelCmd;   \/**< Accelerator command [0.0, 1.0] *\/$/;"	m	struct:__anon202
./tags:accelCmd	src/interfaces/car.h	/^    tdble	accelCmd;   \/**< Accelerator command [0.0, 1.0] *\/$/;"	m	struct:__anon162
./tags:airSpeed2	src/modules/simu/simuv2/carstruct.h	/^    tdble	airSpeed2;	\/* current air speed (squared) for aerodynamic forces *\/$/;"	m	struct:__anon18
./tags:angle	export/include/track.h	/^    tdble angle[7];		\/** Rotation angles of the track in rad anti-clockwise:$/;"	m	struct:trackSeg
./tags:angle	src/interfaces/track.h	/^    tdble angle[7];		\/** Rotation angles of the track in rad anti-clockwise:$/;"	m	struct:trackSeg
./tags:angle	src/modules/simu/simuv2/aero.h	/^	tdble	angle;$/;"	m	struct:__anon14
./tags:arc	export/include/track.h	/^    tdble arc;			\/**< Arc in rad of the curve (>0) *\/$/;"	m	struct:trackSeg
./tags:arc	src/interfaces/track.h	/^    tdble arc;			\/**< Arc in rad of the curve (>0) *\/$/;"	m	struct:trackSeg
./tags:ax	export/include/tgf.h	/^    tdble	ax;		\/**< angle along x axis *\/$/;"	m	struct:__anon191
./tags:ax	src/libs/tgf/tgf.h	/^    tdble	ax;		\/**< angle along x axis *\/$/;"	m	struct:__anon49
./tags:axleFz	src/modules/simu/simuv2/wheel.h	/^    tdble	axleFz;		\/* force from axle (anti-roll bar) *\/$/;"	m	struct:__anon21
./tags:ay	export/include/tgf.h	/^    tdble	ay;		\/**< angle along y axis *\/$/;"	m	struct:__anon191
./tags:ay	src/libs/tgf/tgf.h	/^    tdble	ay;		\/**< angle along y axis *\/$/;"	m	struct:__anon49
./tags:az	export/include/tgf.h	/^    tdble	az;		\/**< angle along z axis *\/$/;"	m	struct:__anon191
./tags:az	src/libs/tgf/tgf.h	/^    tdble	az;		\/**< angle along z axis *\/$/;"	m	struct:__anon49
./tags:b	src/modules/simu/simuv2/engine.h	/^    tdble b;$/;"	m	struct:__anon10
./tags:b1	src/modules/simu/simuv2/susp.h	/^    tdble C1, b1, v1; \/* coefs for slow *\/$/;"	m	struct:__anon15
./tags:b2	src/modules/simu/simuv2/susp.h	/^    tdble C2, b2;     \/* coefs for fast *\/$/;"	m	struct:__anon15
./tags:barrierHeight	src/modules/track/track3.cpp	/^static tdble barrierHeight[2];$/;"	v	file:
./tags:barrierHeight	src/modules/track/track4.cpp	/^static tdble barrierHeight[2];$/;"	v	file:
./tags:barrierWidth	src/modules/track/track3.cpp	/^static tdble barrierWidth[2];$/;"	v	file:
./tags:barrierWidth	src/modules/track/track4.cpp	/^static tdble barrierWidth[2];$/;"	v	file:
./tags:bellcrank	src/modules/simu/simuv2/susp.h	/^    tdble bellcrank;  \/* ratio of movement between wheel and suspension *\/$/;"	m	struct:__anon17
./tags:bias	src/modules/simu/simuv2/differential.h	/^    tdble	bias;$/;"	m	struct:__anon20
./tags:borderHeight	src/modules/track/track3.cpp	/^static tdble borderHeight[2];$/;"	v	file:
./tags:borderHeight	src/modules/track/track4.cpp	/^static tdble borderHeight[2];$/;"	v	file:
./tags:borderWidth	src/modules/track/track3.cpp	/^static tdble borderWidth[2];$/;"	v	file:
./tags:borderWidth	src/modules/track/track4.cpp	/^static tdble borderWidth[2];$/;"	v	file:
./tags:botSpd	export/include/raceman.h	/^    tdble	botSpd;$/;"	m	struct:__anon208
./tags:botSpd	src/interfaces/raceman.h	/^    tdble	botSpd;$/;"	m	struct:__anon167
./tags:brakeCmd	export/include/car.h	/^    tdble	brakeCmd;   \/**< Brake command [0.0, 1.0] *\/$/;"	m	struct:__anon202
./tags:brakeCmd	src/interfaces/car.h	/^    tdble	brakeCmd;   \/**< Brake command [0.0, 1.0] *\/$/;"	m	struct:__anon162
./tags:brakeCoeff	src/modules/simu/simuv2/engine.h	/^    tdble		brakeCoeff;$/;"	m	struct:__anon12
./tags:brakeDiskRadius	export/include/car.h	/^    tdble	brakeDiskRadius; \/**< Brake disk radius *\/$/;"	m	struct:__anon195
./tags:brakeDiskRadius	src/interfaces/car.h	/^    tdble	brakeDiskRadius; \/**< Brake disk radius *\/$/;"	m	struct:__anon155
./tags:brakeTemp	export/include/car.h	/^    tdble	brakeTemp;	\/**< brake temperature from 0 (cool) to 1.0 (hot) *\/$/;"	m	struct:__anon200
./tags:brakeTemp	src/interfaces/car.h	/^    tdble	brakeTemp;	\/**< brake temperature from 0 (cool) to 1.0 (hot) *\/$/;"	m	struct:__anon160
./tags:brkTq	src/modules/simu/simuv2/differential.h	/^    tdble	brkTq;$/;"	m	struct:__anon19
./tags:camber	src/modules/simu/simuv2/wheel.h	/^    tdble	camber;		\/* camber, negative toward exterior on both sides *\/$/;"	m	struct:__anon21
./tags:clutchCmd	export/include/car.h	/^    tdble	clutchCmd;  \/**< Clutch command [0.0, 1.0] *\/$/;"	m	struct:__anon202
./tags:clutchCmd	src/interfaces/car.h	/^    tdble	clutchCmd;  \/**< Clutch command [0.0, 1.0] *\/$/;"	m	struct:__anon162
./tags:clutchdelay	src/drivers/human/human.h	/^	tdble	clutchdelay;$/;"	m	struct:HumanContext
./tags:clutchtime	src/drivers/human/human.h	/^	tdble	clutchtime;$/;"	m	struct:HumanContext
./tags:coeff	src/modules/simu/simuv2/brake.h	/^    tdble	coeff;$/;"	m	struct:__anon23
./tags:coeff	src/modules/simu/simuv2/brake.h	/^    tdble	coeff;$/;"	m	struct:__anon24
./tags:condition	export/include/car.h	/^	tdble   condition;$/;"	m	struct:__anon200
./tags:condition	src/interfaces/car.h	/^	tdble   condition;$/;"	m	struct:__anon160
./tags:curI	src/modules/simu/simuv2/transmission.h	/^    tdble	curI;$/;"	m	struct:__anon28
./tags:curI	src/modules/simu/simuv2/wheel.h	/^    tdble  	curI;       	\/* Current inertia for the wheel (including transmission) *\/$/;"	m	struct:__anon21
./tags:curOverallRatio	src/modules/simu/simuv2/transmission.h	/^    tdble	curOverallRatio;$/;"	m	struct:__anon28
./tags:dSlipMax	src/modules/simu/simuv2/differential.h	/^    tdble	dSlipMax;$/;"	m	struct:__anon20
./tags:dTqMax	src/modules/simu/simuv2/differential.h	/^    tdble	dTqMax;$/;"	m	struct:__anon20
./tags:dTqMin	src/modules/simu/simuv2/differential.h	/^    tdble	dTqMin;$/;"	m	struct:__anon20
./tags:dX	src/tools/trackgen/elevation.cpp	/^static tdble	kX, kY, dX, dY;$/;"	v	file:
./tags:dY	src/tools/trackgen/elevation.cpp	/^static tdble	kX, kY, dX, dY;$/;"	v	file:
./tags:dZ	src/tools/trackgen/elevation.cpp	/^static tdble	kZ, dZ;$/;"	v	file:
./tags:damperForce	src/modules/simu/simuv2/susp.cpp	/^static tdble damperForce(tSuspension *susp)$/;"	f	file:
./tags:deltaHeight	src/tools/trackgen/objects.cpp	/^    tdble		deltaHeight;$/;"	m	struct:objdef	file:
./tags:deltaVert	src/tools/trackgen/objects.cpp	/^    tdble		deltaVert;$/;"	m	struct:objdef	file:
./tags:digitXCenter	src/modules/graphic/ssggraph/grcar.h	/^    tdble		digitXCenter, digitYCenter;$/;"	m	struct:__anon4
./tags:digitYCenter	src/modules/graphic/ssggraph/grcar.h	/^    tdble		digitXCenter, digitYCenter;$/;"	m	struct:__anon4
./tags:distFromStart	src/modules/graphic/ssggraph/grcar.h	/^    tdble               distFromStart;$/;"	m	struct:__anon5
./tags:distFromStartLine	export/include/car.h	/^    tdble		distFromStartLine;$/;"	m	struct:__anon198
./tags:distFromStartLine	src/interfaces/car.h	/^    tdble		distFromStartLine;$/;"	m	struct:__anon158
./tags:distRaced	export/include/car.h	/^    tdble		distRaced;$/;"	m	struct:__anon198
./tags:distRaced	src/interfaces/car.h	/^    tdble		distRaced;$/;"	m	struct:__anon158
./tags:distToStart	src/drivers/human/human.h	/^	tdble	distToStart;$/;"	m	struct:HumanContext
./tags:drag	src/modules/simu/simuv2/aero.h	/^    tdble	drag;		\/* drag force along car x axis *\/$/;"	m	struct:__anon13
./tags:driveI	src/modules/simu/simuv2/transmission.h	/^    tdble	driveI[MAX_GEARS];		\/* Inertia (including engine) *\/$/;"	m	struct:__anon28
./tags:driveTq	src/modules/simu/simuv2/wheel.h	/^    tdble  	driveTq;   	\/* engine torque *\/$/;"	m	struct:__anon21
./tags:efficiency	src/modules/simu/simuv2/differential.h	/^    tdble	efficiency;$/;"	m	struct:__anon20
./tags:endWidth	export/include/track.h	/^    tdble endWidth;		\/**< Width of the end of the segment *\/$/;"	m	struct:trackSeg
./tags:endWidth	src/interfaces/track.h	/^    tdble endWidth;		\/**< Width of the end of the segment *\/$/;"	m	struct:trackSeg
./tags:engineMaxPw	export/include/car.h	/^    tdble	engineMaxPw;$/;"	m	struct:__anon201
./tags:engineMaxPw	src/interfaces/car.h	/^    tdble	engineMaxPw;$/;"	m	struct:__anon161
./tags:engineMaxTq	export/include/car.h	/^    tdble	engineMaxTq;$/;"	m	struct:__anon201
./tags:engineMaxTq	src/interfaces/car.h	/^    tdble	engineMaxTq;$/;"	m	struct:__anon161
./tags:enginerpm	export/include/car.h	/^    tdble	enginerpm;$/;"	m	struct:__anon201
./tags:enginerpm	src/interfaces/car.h	/^    tdble	enginerpm;$/;"	m	struct:__anon161
./tags:enginerpmMax	export/include/car.h	/^    tdble	enginerpmMax;$/;"	m	struct:__anon201
./tags:enginerpmMax	src/interfaces/car.h	/^    tdble	enginerpmMax;$/;"	m	struct:__anon161
./tags:enginerpmMaxPw	export/include/car.h	/^    tdble	enginerpmMaxPw;$/;"	m	struct:__anon201
./tags:enginerpmMaxPw	src/interfaces/car.h	/^    tdble	enginerpmMaxPw;$/;"	m	struct:__anon161
./tags:enginerpmMaxTq	export/include/car.h	/^    tdble	enginerpmMaxTq;$/;"	m	struct:__anon201
./tags:enginerpmMaxTq	src/interfaces/car.h	/^    tdble	enginerpmMaxTq;$/;"	m	struct:__anon161
./tags:enginerpmRedLine	export/include/car.h	/^    tdble	enginerpmRedLine;$/;"	m	struct:__anon201
./tags:enginerpmRedLine	src/interfaces/car.h	/^    tdble	enginerpmRedLine;$/;"	m	struct:__anon161
./tags:envAngle	src/modules/graphic/ssggraph/grcar.h	/^    tdble               envAngle;$/;"	m	struct:__anon5
./tags:evalUnit	src/libs/tgf/params.cpp	/^evalUnit (char *unit, tdble *dest, int flg)$/;"	f	file:
./tags:exhaustPower	export/include/car.h	/^    tdble	exhaustPower;	\/**< Power of the flames (from 1 to 3) *\/$/;"	m	struct:__anon196
./tags:exhaustPower	src/interfaces/car.h	/^    tdble	exhaustPower;	\/**< Power of the flames (from 1 to 3) *\/$/;"	m	struct:__anon156
./tags:exhaust_pressure	src/modules/simu/simuv2/engine.h	/^	tdble       exhaust_pressure;$/;"	m	struct:__anon12
./tags:exhaust_refract	src/modules/simu/simuv2/engine.h	/^	tdble       exhaust_refract;$/;"	m	struct:__anon12
./tags:force	src/modules/simu/simuv2/axle.h	/^    tdble	force[2]; \/* right and left *\/$/;"	m	struct:__anon22
./tags:force	src/modules/simu/simuv2/susp.h	/^    tdble force;        \/* generated force *\/$/;"	m	struct:Suspension
./tags:freeI	src/modules/simu/simuv2/transmission.h	/^    tdble	freeI[MAX_GEARS];		\/* Inertia when clutch is applied (wheels side) *\/$/;"	m	struct:__anon28
./tags:fuel	export/include/car.h	/^    tdble		fuel;$/;"	m	struct:__anon203
./tags:fuel	export/include/car.h	/^    tdble	fuel;	    	\/**< remaining fuel (liters) *\/$/;"	m	struct:__anon201
./tags:fuel	export/include/raceman.h	/^    tdble	fuel;$/;"	m	struct:__anon208
./tags:fuel	src/interfaces/car.h	/^    tdble		fuel;$/;"	m	struct:__anon163
./tags:fuel	src/interfaces/car.h	/^    tdble	fuel;	    	\/**< remaining fuel (liters) *\/$/;"	m	struct:__anon161
./tags:fuel	src/interfaces/raceman.h	/^    tdble	fuel;$/;"	m	struct:__anon167
./tags:fuel	src/modules/simu/simuv2/carstruct.h	/^    tdble	fuel;		\/* current fuel load *\/$/;"	m	struct:__anon18
./tags:fuel_consumption_instant	export/include/car.h	/^	tdble   fuel_consumption_instant; \/\/ l\/100km (>100 means infinity)$/;"	m	struct:__anon201
./tags:fuel_consumption_instant	src/interfaces/car.h	/^	tdble   fuel_consumption_instant; \/\/ l\/100km (>100 means infinity)$/;"	m	struct:__anon161
./tags:fuel_consumption_total	export/include/car.h	/^	tdble   fuel_consumption_total; \/\/ l$/;"	m	struct:__anon201
./tags:fuel_consumption_total	src/interfaces/car.h	/^	tdble   fuel_consumption_total; \/\/ l$/;"	m	struct:__anon161
./tags:fuelcons	src/modules/simu/simuv2/engine.h	/^    tdble		fuelcons;$/;"	m	struct:__anon12
./tags:gearEff	src/modules/simu/simuv2/transmission.h	/^    tdble	gearEff[MAX_GEARS];		\/* Gear Efficiency *\/$/;"	m	struct:__anon28
./tags:gearRatio	export/include/car.h	/^    tdble	gearRatio[MAX_GEARS];	\/**< including final drive *\/$/;"	m	struct:__anon201
./tags:gearRatio	src/interfaces/car.h	/^    tdble	gearRatio[MAX_GEARS];	\/**< including final drive *\/$/;"	m	struct:__anon161
./tags:getAutoClutch	src/drivers/human/human.cpp	/^static tdble getAutoClutch(int idx, int gear, int newgear, tCarElt *car)$/;"	f	file:
./tags:getKalpha	src/drivers/berniw/trackdesc.h	/^		inline tdble getKalpha() { return kalpha; }$/;"	f	class:TrackSegment
./tags:getKalpha	src/drivers/berniw2/trackdesc.h	/^		inline tdble getKalpha() { return kalpha; }$/;"	f	class:TrackSegment
./tags:getKalpha	src/drivers/berniw3/trackdesc.h	/^		inline tdble getKalpha() { return kalpha; }$/;"	f	class:TrackSegment
./tags:getKalpha	src/drivers/inferno/trackdesc.h	/^		inline tdble getKalpha() const { return kalpha; }$/;"	f	class:TrackSegment
./tags:getKalpha	src/drivers/inferno/trackdesc.h	/^		inline tdble getKalpha() const { return kalpha; }$/;"	f	class:TrackSegment2D
./tags:getKalpha	src/drivers/lliaw/trackdesc.h	/^		inline tdble getKalpha() const { return kalpha; }$/;"	f	class:TrackSegment
./tags:getKalpha	src/drivers/lliaw/trackdesc.h	/^		inline tdble getKalpha() const { return kalpha; }$/;"	f	class:TrackSegment2D
./tags:getKalpha	src/drivers/tita/trackdesc.h	/^		inline tdble getKalpha() const { return kalpha; }$/;"	f	class:TrackSegment
./tags:getKalpha	src/drivers/tita/trackdesc.h	/^		inline tdble getKalpha() const { return kalpha; }$/;"	f	class:TrackSegment2D
./tags:getKbeta	src/drivers/berniw/trackdesc.h	/^		inline tdble getKbeta() { return kbeta; }$/;"	f	class:TrackSegment
./tags:getKbeta	src/drivers/berniw2/trackdesc.h	/^		inline tdble getKbeta() { return kbeta; }$/;"	f	class:TrackSegment
./tags:getKbeta	src/drivers/berniw3/trackdesc.h	/^		inline tdble getKbeta() { return kbeta; }$/;"	f	class:TrackSegment
./tags:getKbeta	src/drivers/inferno/trackdesc.h	/^		inline tdble getKbeta() const { return kbeta; }$/;"	f	class:TrackSegment
./tags:getKbeta	src/drivers/inferno/trackdesc.h	/^		inline tdble getKbeta() const { return kbeta; }$/;"	f	class:TrackSegment2D
./tags:getKbeta	src/drivers/lliaw/trackdesc.h	/^		inline tdble getKbeta() const { return kbeta; }$/;"	f	class:TrackSegment
./tags:getKbeta	src/drivers/lliaw/trackdesc.h	/^		inline tdble getKbeta() const { return kbeta; }$/;"	f	class:TrackSegment2D
./tags:getKbeta	src/drivers/tita/trackdesc.h	/^		inline tdble getKbeta() const { return kbeta; }$/;"	f	class:TrackSegment
./tags:getKbeta	src/drivers/tita/trackdesc.h	/^		inline tdble getKbeta() const { return kbeta; }$/;"	f	class:TrackSegment2D
./tags:getKfriction	src/drivers/berniw/trackdesc.h	/^		inline tdble getKfriction() { return pTrackSeg->surface->kFriction; }$/;"	f	class:TrackSegment
./tags:getKfriction	src/drivers/berniw2/trackdesc.h	/^		inline tdble getKfriction() { return pTrackSeg->surface->kFriction; }$/;"	f	class:TrackSegment
./tags:getKfriction	src/drivers/berniw3/trackdesc.h	/^		inline tdble getKfriction() { return pTrackSeg->surface->kFriction; }$/;"	f	class:TrackSegment
./tags:getKfriction	src/drivers/inferno/trackdesc.h	/^		inline tdble getKfriction() const { return pTrackSeg->surface->kFriction; }$/;"	f	class:TrackSegment
./tags:getKfriction	src/drivers/inferno/trackdesc.h	/^		inline tdble getKfriction() const { return pTrackSeg->surface->kFriction; }$/;"	f	class:TrackSegment2D
./tags:getKfriction	src/drivers/lliaw/trackdesc.h	/^		inline tdble getKfriction() const { return pTrackSeg->surface->kFriction; }$/;"	f	class:TrackSegment
./tags:getKfriction	src/drivers/lliaw/trackdesc.h	/^		inline tdble getKfriction() const { return pTrackSeg->surface->kFriction; }$/;"	f	class:TrackSegment2D
./tags:getKfriction	src/drivers/tita/trackdesc.h	/^		inline tdble getKfriction() const { return pTrackSeg->surface->kFriction; }$/;"	f	class:TrackSegment
./tags:getKfriction	src/drivers/tita/trackdesc.h	/^		inline tdble getKfriction() const { return pTrackSeg->surface->kFriction; }$/;"	f	class:TrackSegment2D
./tags:getKgamma	src/drivers/berniw/trackdesc.h	/^		inline tdble getKgamma() { return kgamma; }$/;"	f	class:TrackSegment
./tags:getKgamma	src/drivers/berniw2/trackdesc.h	/^		inline tdble getKgamma() { return kgamma; }$/;"	f	class:TrackSegment
./tags:getKgamma	src/drivers/berniw3/trackdesc.h	/^		inline tdble getKgamma() { return kgamma; }$/;"	f	class:TrackSegment
./tags:getKgamma	src/drivers/inferno/trackdesc.h	/^		inline tdble getKgamma() const { return kgamma; }$/;"	f	class:TrackSegment
./tags:getKgamma	src/drivers/inferno/trackdesc.h	/^		inline tdble getKgamma() const { return kgamma; }$/;"	f	class:TrackSegment2D
./tags:getKgamma	src/drivers/lliaw/trackdesc.h	/^		inline tdble getKgamma() const { return kgamma; }$/;"	f	class:TrackSegment
./tags:getKgamma	src/drivers/lliaw/trackdesc.h	/^		inline tdble getKgamma() const { return kgamma; }$/;"	f	class:TrackSegment2D
./tags:getKgamma	src/drivers/tita/trackdesc.h	/^		inline tdble getKgamma() const { return kgamma; }$/;"	f	class:TrackSegment
./tags:getKgamma	src/drivers/tita/trackdesc.h	/^		inline tdble getKgamma() const { return kgamma; }$/;"	f	class:TrackSegment2D
./tags:getKrollres	src/drivers/berniw/trackdesc.h	/^		inline tdble getKrollres() { return pTrackSeg->surface->kRollRes; }$/;"	f	class:TrackSegment
./tags:getKrollres	src/drivers/berniw2/trackdesc.h	/^		inline tdble getKrollres() { return pTrackSeg->surface->kRollRes; }$/;"	f	class:TrackSegment
./tags:getKrollres	src/drivers/berniw3/trackdesc.h	/^		inline tdble getKrollres() { return pTrackSeg->surface->kRollRes; }$/;"	f	class:TrackSegment
./tags:getKrollres	src/drivers/inferno/trackdesc.h	/^		inline tdble getKrollres() const { return pTrackSeg->surface->kRollRes; }$/;"	f	class:TrackSegment
./tags:getKrollres	src/drivers/inferno/trackdesc.h	/^		inline tdble getKrollres() const { return pTrackSeg->surface->kRollRes; }$/;"	f	class:TrackSegment2D
./tags:getKrollres	src/drivers/lliaw/trackdesc.h	/^		inline tdble getKrollres() const { return pTrackSeg->surface->kRollRes; }$/;"	f	class:TrackSegment
./tags:getKrollres	src/drivers/lliaw/trackdesc.h	/^		inline tdble getKrollres() const { return pTrackSeg->surface->kRollRes; }$/;"	f	class:TrackSegment2D
./tags:getKrollres	src/drivers/tita/trackdesc.h	/^		inline tdble getKrollres() const { return pTrackSeg->surface->kRollRes; }$/;"	f	class:TrackSegment
./tags:getKrollres	src/drivers/tita/trackdesc.h	/^		inline tdble getKrollres() const { return pTrackSeg->surface->kRollRes; }$/;"	f	class:TrackSegment2D
./tags:getKroughness	src/drivers/berniw/trackdesc.h	/^		inline tdble getKroughness() { return pTrackSeg->surface->kRoughness; }$/;"	f	class:TrackSegment
./tags:getKroughness	src/drivers/berniw2/trackdesc.h	/^		inline tdble getKroughness() { return pTrackSeg->surface->kRoughness; }$/;"	f	class:TrackSegment
./tags:getKroughness	src/drivers/berniw3/trackdesc.h	/^		inline tdble getKroughness() { return pTrackSeg->surface->kRoughness; }$/;"	f	class:TrackSegment
./tags:getKroughness	src/drivers/inferno/trackdesc.h	/^		inline tdble getKroughness() const { return pTrackSeg->surface->kRoughness; }$/;"	f	class:TrackSegment
./tags:getKroughness	src/drivers/inferno/trackdesc.h	/^		inline tdble getKroughness() const { return pTrackSeg->surface->kRoughness; }$/;"	f	class:TrackSegment2D
./tags:getKroughness	src/drivers/lliaw/trackdesc.h	/^		inline tdble getKroughness() const { return pTrackSeg->surface->kRoughness; }$/;"	f	class:TrackSegment
./tags:getKroughness	src/drivers/lliaw/trackdesc.h	/^		inline tdble getKroughness() const { return pTrackSeg->surface->kRoughness; }$/;"	f	class:TrackSegment2D
./tags:getKroughness	src/drivers/tita/trackdesc.h	/^		inline tdble getKroughness() const { return pTrackSeg->surface->kRoughness; }$/;"	f	class:TrackSegment
./tags:getKroughness	src/drivers/tita/trackdesc.h	/^		inline tdble getKroughness() const { return pTrackSeg->surface->kRoughness; }$/;"	f	class:TrackSegment2D
./tags:getKroughwavelen	src/drivers/berniw/trackdesc.h	/^		inline tdble getKroughwavelen() { return pTrackSeg->surface->kRoughWaveLen; }$/;"	f	class:TrackSegment
./tags:getKroughwavelen	src/drivers/berniw2/trackdesc.h	/^		inline tdble getKroughwavelen() { return pTrackSeg->surface->kRoughWaveLen; }$/;"	f	class:TrackSegment
./tags:getKroughwavelen	src/drivers/berniw3/trackdesc.h	/^		inline tdble getKroughwavelen() { return pTrackSeg->surface->kRoughWaveLen; }$/;"	f	class:TrackSegment
./tags:getKroughwavelen	src/drivers/inferno/trackdesc.h	/^		inline tdble getKroughwavelen() const { return pTrackSeg->surface->kRoughWaveLen; }$/;"	f	class:TrackSegment
./tags:getKroughwavelen	src/drivers/inferno/trackdesc.h	/^		inline tdble getKroughwavelen() const { return pTrackSeg->surface->kRoughWaveLen; }$/;"	f	class:TrackSegment2D
./tags:getKroughwavelen	src/drivers/lliaw/trackdesc.h	/^		inline tdble getKroughwavelen() const { return pTrackSeg->surface->kRoughWaveLen; }$/;"	f	class:TrackSegment
./tags:getKroughwavelen	src/drivers/lliaw/trackdesc.h	/^		inline tdble getKroughwavelen() const { return pTrackSeg->surface->kRoughWaveLen; }$/;"	f	class:TrackSegment2D
./tags:getKroughwavelen	src/drivers/tita/trackdesc.h	/^		inline tdble getKroughwavelen() const { return pTrackSeg->surface->kRoughWaveLen; }$/;"	f	class:TrackSegment
./tags:getKroughwavelen	src/drivers/tita/trackdesc.h	/^		inline tdble getKroughwavelen() const { return pTrackSeg->surface->kRoughWaveLen; }$/;"	f	class:TrackSegment2D
./tags:getLength	src/drivers/berniw/pathfinder.h	/^		inline tdble getLength() { return length; }$/;"	f	class:PathSeg
./tags:getLength	src/drivers/berniw/trackdesc.h	/^		inline tdble getLength() { return length; }$/;"	f	class:TrackSegment
./tags:getLength	src/drivers/berniw2/pathfinder.h	/^		inline tdble getLength() { return length; }$/;"	f	class:PathSeg
./tags:getLength	src/drivers/berniw2/trackdesc.h	/^		inline tdble getLength() { return length; }$/;"	f	class:TrackSegment
./tags:getLength	src/drivers/berniw3/pathfinder.h	/^		inline tdble getLength() { return length; }$/;"	f	class:PathSeg
./tags:getLength	src/drivers/berniw3/trackdesc.h	/^		inline tdble getLength() { return length; }$/;"	f	class:TrackSegment
./tags:getLength	src/drivers/inferno/pathfinder.h	/^		inline tdble getLength(int segid) { return ps[getid(segid)].length; }$/;"	f	class:PathSeg
./tags:getLength	src/drivers/inferno/trackdesc.h	/^		inline tdble getLength() const { return length; }$/;"	f	class:TrackSegment
./tags:getLength	src/drivers/lliaw/pathfinder.h	/^		inline tdble getLength(int segid) { return ps[getid(segid)].length; }$/;"	f	class:PathSeg
./tags:getLength	src/drivers/lliaw/trackdesc.h	/^		inline tdble getLength() const { return length; }$/;"	f	class:TrackSegment
./tags:getLength	src/drivers/tita/pathfinder.h	/^		inline tdble getLength(int segid) { return ps[getid(segid)].length; }$/;"	f	class:PathSeg
./tags:getLength	src/drivers/tita/trackdesc.h	/^		inline tdble getLength() const { return length; }$/;"	f	class:TrackSegment
./tags:getOffset	src/drivers/inferno2/common.cpp	/^getOffset(int idx, tCarElt* car, tdble *maxSpeed)$/;"	f	file:
./tags:getRadius	src/drivers/berniw/pathfinder.h	/^		inline tdble getRadius() { return radius; }$/;"	f	class:PathSeg
./tags:getRadius	src/drivers/berniw/trackdesc.h	/^		inline tdble getRadius() { return radius; }$/;"	f	class:TrackSegment
./tags:getRadius	src/drivers/berniw2/pathfinder.h	/^		inline tdble getRadius() { return radius; }$/;"	f	class:PathSeg
./tags:getRadius	src/drivers/berniw2/trackdesc.h	/^		inline tdble getRadius() { return radius; }$/;"	f	class:TrackSegment
./tags:getRadius	src/drivers/berniw3/pathfinder.h	/^		inline tdble getRadius() { return radius; }$/;"	f	class:PathSeg
./tags:getRadius	src/drivers/berniw3/trackdesc.h	/^		inline tdble getRadius() { return radius; }$/;"	f	class:TrackSegment
./tags:getRadius	src/drivers/inferno/pathfinder.h	/^		inline tdble getRadius(int segid) { return ps[getid(segid)].radius; }$/;"	f	class:PathSeg
./tags:getRadius	src/drivers/inferno/trackdesc.h	/^		inline tdble getRadius() const { return radius; }$/;"	f	class:TrackSegment
./tags:getRadius	src/drivers/inferno/trackdesc.h	/^		inline tdble getRadius() const { return radius; }$/;"	f	class:TrackSegment2D
./tags:getRadius	src/drivers/lliaw/pathfinder.h	/^		inline tdble getRadius(int segid) { return ps[getid(segid)].radius; }$/;"	f	class:PathSeg
./tags:getRadius	src/drivers/lliaw/trackdesc.h	/^		inline tdble getRadius() const { return radius; }$/;"	f	class:TrackSegment
./tags:getRadius	src/drivers/lliaw/trackdesc.h	/^		inline tdble getRadius() const { return radius; }$/;"	f	class:TrackSegment2D
./tags:getRadius	src/drivers/tita/pathfinder.h	/^		inline tdble getRadius(int segid) { return ps[getid(segid)].radius; }$/;"	f	class:PathSeg
./tags:getRadius	src/drivers/tita/trackdesc.h	/^		inline tdble getRadius() const { return radius; }$/;"	f	class:TrackSegment
./tags:getRadius	src/drivers/tita/trackdesc.h	/^		inline tdble getRadius() const { return radius; }$/;"	f	class:TrackSegment2D
./tags:getSpeedsqr	src/drivers/berniw/pathfinder.h	/^		inline tdble getSpeedsqr() { return speedsqr; }$/;"	f	class:PathSeg
./tags:getSpeedsqr	src/drivers/berniw2/pathfinder.h	/^		inline tdble getSpeedsqr() { return speedsqr; }$/;"	f	class:PathSeg
./tags:getSpeedsqr	src/drivers/berniw3/pathfinder.h	/^		inline tdble getSpeedsqr() { return speedsqr; }$/;"	f	class:PathSeg
./tags:getSpeedsqr	src/drivers/inferno/pathfinder.h	/^		inline tdble getSpeedsqr(int segid) { return ps[getid(segid)].speedsqr; }$/;"	f	class:PathSeg
./tags:getSpeedsqr	src/drivers/lliaw/pathfinder.h	/^		inline tdble getSpeedsqr(int segid) { return ps[getid(segid)].speedsqr; }$/;"	f	class:PathSeg
./tags:getSpeedsqr	src/drivers/tita/pathfinder.h	/^		inline tdble getSpeedsqr(int segid) { return ps[getid(segid)].speedsqr; }$/;"	f	class:PathSeg
./tags:getWeight	src/drivers/berniw/pathfinder.h	/^		inline tdble getWeight() { return weight; }$/;"	f	class:PathSeg
./tags:getWeight	src/drivers/berniw2/pathfinder.h	/^		inline tdble getWeight() { return weight; }$/;"	f	class:PathSeg
./tags:getWeight	src/drivers/berniw3/pathfinder.h	/^		inline tdble getWeight() { return weight; }$/;"	f	class:PathSeg
./tags:getWidth	src/drivers/berniw/trackdesc.h	/^		inline tdble getWidth() { return width; }$/;"	f	class:TrackSegment
./tags:getWidth	src/drivers/berniw2/trackdesc.h	/^		inline tdble getWidth() { return width; }$/;"	f	class:TrackSegment
./tags:getWidth	src/drivers/berniw3/trackdesc.h	/^		inline tdble getWidth() { return width; }$/;"	f	class:TrackSegment
./tags:getWidth	src/drivers/inferno/trackdesc.h	/^		inline tdble getWidth() const { return width; }$/;"	f	class:TrackSegment
./tags:getWidth	src/drivers/inferno/trackdesc.h	/^		inline tdble getWidth() const { return width; }$/;"	f	class:TrackSegment2D
./tags:getWidth	src/drivers/lliaw/trackdesc.h	/^		inline tdble getWidth() const { return width; }$/;"	f	class:TrackSegment
./tags:getWidth	src/drivers/lliaw/trackdesc.h	/^		inline tdble getWidth() const { return width; }$/;"	f	class:TrackSegment2D
./tags:getWidth	src/drivers/tita/trackdesc.h	/^		inline tdble getWidth() const { return width; }$/;"	f	class:TrackSegment
./tags:getWidth	src/drivers/tita/trackdesc.h	/^		inline tdble getWidth() const { return width; }$/;"	f	class:TrackSegment2D
./tags:gfMean	src/libs/tgf/tgf.cpp	/^tdble gfMean(tdble v, tMeanVal *pvt, int n, int w)$/;"	f
./tags:gfMeanReset	src/libs/tgf/tgf.cpp	/^void gfMeanReset(tdble v, tMeanVal *pvt)$/;"	f
./tags:grCamCreateSceneCameraList	src/modules/graphic/ssggraph/grcam.cpp	/^grCamCreateSceneCameraList(class cGrScreen *myscreen, tGrCamHead *cams, tdble fovFactor)$/;"	f
./tags:grDrawGauge	src/modules/graphic/ssggraph/grboard.cpp	/^cGrBoard::grDrawGauge(tdble X1, tdble Y1, tdble H, float *clr1, float *clr2, tdble val, char *title)$/;"	f	class:cGrBoard
./tags:grGetDistToStart	src/modules/graphic/ssggraph/grcar.cpp	/^tdble grGetDistToStart(tCarElt *car)$/;"	f
./tags:grLodFactorValue	src/modules/graphic/ssggraph/grmain.cpp	/^tdble grLodFactorValue = 1.0;$/;"	v
./tags:grMaxDammage	src/modules/graphic/ssggraph/grmain.cpp	/^tdble grMaxDammage = 10000.0;$/;"	v
./tags:grWriteTime	src/modules/graphic/ssggraph/grutil.cpp	/^void  grWriteTime(float *color, int font, int x, int y, tdble sec, int sgn)$/;"	f
./tags:hSpace	export/include/track.h	/^    tdble	hSpace;$/;"	m	struct:__anon184
./tags:hSpace	src/interfaces/track.h	/^    tdble	hSpace;$/;"	m	struct:__anon151
./tags:height	export/include/track.h	/^    tdble		height;	\/**< Barrier height *\/$/;"	m	struct:trackBarrier
./tags:height	export/include/track.h	/^    tdble	height;		\/**< Max height for curbs *\/$/;"	m	struct:trackSeg
./tags:height	export/include/track.h	/^    tdble	height;$/;"	m	struct:__anon184
./tags:height	src/interfaces/track.h	/^    tdble		height;	\/**< Barrier height *\/$/;"	m	struct:trackBarrier
./tags:height	src/interfaces/track.h	/^    tdble	height;		\/**< Max height for curbs *\/$/;"	m	struct:trackSeg
./tags:height	src/interfaces/track.h	/^    tdble	height;$/;"	m	struct:__anon151
./tags:hold	src/drivers/inferno2/inferno2.cpp	/^tdble	hold[10] = {0};$/;"	v
./tags:iconColor	export/include/car.h	/^    tdble	iconColor[3];		\/**< Car color in leaders board *\/$/;"	m	struct:__anon197
./tags:iconColor	src/interfaces/car.h	/^    tdble	iconColor[3];		\/**< Car color in leaders board *\/$/;"	m	struct:__anon157
./tags:isBetween	src/drivers/inferno2/common.cpp	/^isBetween(tdble lgfs, tdble start, tdble end)$/;"	f	file:
./tags:kDammage	export/include/track.h	/^    tdble kDammage;		\/**< Dammages in case of collision *\/$/;"	m	struct:trackSurface
./tags:kDammage	src/interfaces/track.h	/^    tdble kDammage;		\/**< Dammages in case of collision *\/$/;"	m	struct:trackSurface
./tags:kFriction	export/include/track.h	/^    tdble kFriction;		\/**< Coefficient of friction *\/$/;"	m	struct:trackSurface
./tags:kFriction	src/interfaces/track.h	/^    tdble kFriction;		\/**< Coefficient of friction *\/$/;"	m	struct:trackSurface
./tags:kRebound	export/include/track.h	/^    tdble kRebound;		\/**< Coefficient of energy restitution *\/$/;"	m	struct:trackSurface
./tags:kRebound	src/interfaces/track.h	/^    tdble kRebound;		\/**< Coefficient of energy restitution *\/$/;"	m	struct:trackSurface
./tags:kRollRes	export/include/track.h	/^    tdble kRollRes;		\/**< Rolling resistance *\/$/;"	m	struct:trackSurface
./tags:kRollRes	src/interfaces/track.h	/^    tdble kRollRes;		\/**< Rolling resistance *\/$/;"	m	struct:trackSurface
./tags:kRoughWaveLen	export/include/track.h	/^    tdble kRoughWaveLen;	\/**< Wave length in m of the surface *\/$/;"	m	struct:trackSurface
./tags:kRoughWaveLen	src/interfaces/track.h	/^    tdble kRoughWaveLen;	\/**< Wave length in m of the surface *\/$/;"	m	struct:trackSurface
./tags:kRoughness	export/include/track.h	/^    tdble kRoughness;		\/**< Roughtness in m of the surface (wave height) *\/$/;"	m	struct:trackSurface
./tags:kRoughness	src/interfaces/track.h	/^    tdble kRoughness;		\/**< Roughtness in m of the surface (wave height) *\/$/;"	m	struct:trackSurface
./tags:kX	src/tools/trackgen/elevation.cpp	/^static tdble	kX, kY, dX, dY;$/;"	v	file:
./tags:kY	src/tools/trackgen/elevation.cpp	/^static tdble	kX, kY, dX, dY;$/;"	v	file:
./tags:kZ	src/tools/trackgen/elevation.cpp	/^static tdble	kZ, dZ;$/;"	v	file:
./tags:kalpha	src/drivers/berniw/trackdesc.h	/^		tdble kalpha;			\/* (roll)factor for the angle (like michigan) *\/$/;"	m	class:TrackSegment
./tags:kalpha	src/drivers/berniw2/trackdesc.h	/^		tdble kalpha;			\/* (roll)factor for the angle (like michigan) *\/$/;"	m	class:TrackSegment
./tags:kalpha	src/drivers/berniw3/trackdesc.h	/^		tdble kalpha;			\/* (roll)factor for the angle (like michigan) *\/$/;"	m	class:TrackSegment
./tags:kalpha	src/drivers/inferno/trackdesc.h	/^		tdble kalpha;			\/\/ (roll) factor for the angle (like michigan).$/;"	m	class:TrackSegment
./tags:kalpha	src/drivers/inferno/trackdesc.h	/^		tdble kalpha;			\/\/ (roll) factor for the angle (like michigan).$/;"	m	class:TrackSegment2D
./tags:kalpha	src/drivers/lliaw/trackdesc.h	/^		tdble kalpha;			\/\/ (roll) factor for the angle (like michigan).$/;"	m	class:TrackSegment
./tags:kalpha	src/drivers/lliaw/trackdesc.h	/^		tdble kalpha;			\/\/ (roll) factor for the angle (like michigan).$/;"	m	class:TrackSegment2D
./tags:kalpha	src/drivers/tita/trackdesc.h	/^		tdble kalpha;			\/\/ (roll) factor for the angle (like michigan).$/;"	m	class:TrackSegment
./tags:kalpha	src/drivers/tita/trackdesc.h	/^		tdble kalpha;			\/\/ (roll) factor for the angle (like michigan).$/;"	m	class:TrackSegment2D
./tags:kbeta	src/drivers/berniw/trackdesc.h	/^		tdble kbeta;			\/* (curvature)factor for bumps (e-track-3) *\/$/;"	m	class:TrackSegment
./tags:kbeta	src/drivers/berniw2/trackdesc.h	/^		tdble kbeta;			\/* (curvature)factor for bumps (e-track-3) *\/$/;"	m	class:TrackSegment
./tags:kbeta	src/drivers/berniw3/trackdesc.h	/^		tdble kbeta;			\/* (curvature)factor for bumps (e-track-3) *\/$/;"	m	class:TrackSegment
./tags:kbeta	src/drivers/inferno/trackdesc.h	/^		tdble kbeta;			\/\/ (curvature)factor for bumps (e-track-3).$/;"	m	class:TrackSegment
./tags:kbeta	src/drivers/inferno/trackdesc.h	/^		tdble kbeta;			\/\/ (curvature)factor for bumps (e-track-3).$/;"	m	class:TrackSegment2D
./tags:kbeta	src/drivers/lliaw/trackdesc.h	/^		tdble kbeta;			\/\/ (curvature)factor for bumps (e-track-3).$/;"	m	class:TrackSegment
./tags:kbeta	src/drivers/lliaw/trackdesc.h	/^		tdble kbeta;			\/\/ (curvature)factor for bumps (e-track-3).$/;"	m	class:TrackSegment2D
./tags:kbeta	src/drivers/tita/trackdesc.h	/^		tdble kbeta;			\/\/ (curvature)factor for bumps (e-track-3).$/;"	m	class:TrackSegment
./tags:kbeta	src/drivers/tita/trackdesc.h	/^		tdble kbeta;			\/\/ (curvature)factor for bumps (e-track-3).$/;"	m	class:TrackSegment2D
./tags:kgamma	src/drivers/berniw/trackdesc.h	/^		tdble kgamma;			\/* (pitch)factor of road *\/$/;"	m	class:TrackSegment
./tags:kgamma	src/drivers/berniw2/trackdesc.h	/^		tdble kgamma;			\/* (pitch)factor of road *\/$/;"	m	class:TrackSegment
./tags:kgamma	src/drivers/berniw3/trackdesc.h	/^		tdble kgamma;			\/* (pitch)factor of road *\/$/;"	m	class:TrackSegment
./tags:kgamma	src/drivers/inferno/trackdesc.h	/^		tdble kgamma;			\/\/ (pitch) factor of road.$/;"	m	class:TrackSegment
./tags:kgamma	src/drivers/inferno/trackdesc.h	/^		tdble kgamma;			\/\/ (pitch) factor of road.$/;"	m	class:TrackSegment2D
./tags:kgamma	src/drivers/lliaw/trackdesc.h	/^		tdble kgamma;			\/\/ (pitch) factor of road.$/;"	m	class:TrackSegment
./tags:kgamma	src/drivers/lliaw/trackdesc.h	/^		tdble kgamma;			\/\/ (pitch) factor of road.$/;"	m	class:TrackSegment2D
./tags:kgamma	src/drivers/tita/trackdesc.h	/^		tdble kgamma;			\/\/ (pitch) factor of road.$/;"	m	class:TrackSegment
./tags:kgamma	src/drivers/tita/trackdesc.h	/^		tdble kgamma;			\/\/ (pitch) factor of road.$/;"	m	class:TrackSegment2D
./tags:lastAccel	src/drivers/inferno2/common.cpp	/^static tdble lastAccel[10] = {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0};$/;"	v	file:
./tags:lastBrkCmd	src/drivers/inferno2/common.cpp	/^static tdble lastBrkCmd[10] = {0};$/;"	v	file:
./tags:lastDv	src/drivers/inferno2/common.cpp	/^static tdble lastDv[10] = {0};$/;"	v	file:
./tags:lastKeyUpdate	src/drivers/human/human.cpp	/^static tdble lastKeyUpdate = -10.0;$/;"	v	file:
./tags:len	export/include/track.h	/^	tdble len;					\/**< Lenght of each pit stop *\/$/;"	m	struct:__anon183
./tags:len	src/interfaces/track.h	/^	tdble len;					\/**< Lenght of each pit stop *\/$/;"	m	struct:__anon150
./tags:length	export/include/track.h	/^    tdble	  length;	\/**< main track length *\/$/;"	m	struct:__anon186
./tags:length	export/include/track.h	/^    tdble length;		\/**< Length in meters of the middle of the track *\/$/;"	m	struct:trackSeg
./tags:length	src/drivers/berniw/pathfinder.h	/^		tdble length;	\/* dist to the next pathseg *\/$/;"	m	class:PathSeg
./tags:length	src/drivers/berniw/trackdesc.h	/^		tdble length;			\/* distance to the next segment (2-D, not 3-D!) *\/$/;"	m	class:TrackSegment
./tags:length	src/drivers/berniw2/pathfinder.h	/^		tdble length;	\/* dist to the next pathseg *\/$/;"	m	class:PathSeg
./tags:length	src/drivers/berniw2/trackdesc.h	/^		tdble length;			\/* distance to the next segment (2-D, not 3-D!) *\/$/;"	m	class:TrackSegment
./tags:length	src/drivers/berniw3/pathfinder.h	/^		tdble length;	\/* dist to the next pathseg *\/$/;"	m	class:PathSeg
./tags:length	src/drivers/berniw3/trackdesc.h	/^		tdble length;			\/* distance to the next segment (2-D, not 3-D!) *\/$/;"	m	class:TrackSegment
./tags:length	src/drivers/inferno/pathfinder.h	/^				tdble length;	\/\/ Dist to the next pathseg.$/;"	m	class:PathSeg::pseg
./tags:length	src/drivers/inferno/trackdesc.h	/^		tdble length;			\/\/ Distance to the next segment (2-D, not 3-D!).$/;"	m	class:TrackSegment
./tags:length	src/drivers/lliaw/pathfinder.h	/^				tdble length;	\/\/ Dist to the next pathseg.$/;"	m	class:PathSeg::pseg
./tags:length	src/drivers/lliaw/trackdesc.h	/^		tdble length;			\/\/ Distance to the next segment (2-D, not 3-D!).$/;"	m	class:TrackSegment
./tags:length	src/drivers/tita/pathfinder.h	/^				tdble length;	\/\/ Dist to the next pathseg.$/;"	m	class:PathSeg::pseg
./tags:length	src/drivers/tita/trackdesc.h	/^		tdble length;			\/\/ Distance to the next segment (2-D, not 3-D!).$/;"	m	class:TrackSegment
./tags:length	src/interfaces/track.h	/^    tdble	  length;	\/**< main track length *\/$/;"	m	struct:__anon153
./tags:length	src/interfaces/track.h	/^    tdble length;		\/**< Length in meters of the middle of the track *\/$/;"	m	struct:trackSeg
./tags:lfK	src/modules/simu/simuv2/wheel.h	/^    tdble	lfK;		\/* Load factor *\/$/;"	m	struct:__anon21
./tags:lfMax	src/modules/simu/simuv2/wheel.h	/^    tdble	lfMax;		\/* Load factor *\/$/;"	m	struct:__anon21
./tags:lfMin	src/modules/simu/simuv2/wheel.h	/^    tdble	lfMin;		\/* Load factor *\/$/;"	m	struct:__anon21
./tags:lgfromstart	export/include/track.h	/^    tdble lgfromstart;		\/**< Length of begining of segment from starting line *\/$/;"	m	struct:trackSeg
./tags:lgfromstart	src/interfaces/track.h	/^    tdble lgfromstart;		\/**< Length of begining of segment from starting line *\/$/;"	m	struct:trackSeg
./tags:lift	src/modules/simu/simuv2/aero.h	/^    tdble	lift[2];	\/* front & rear lift force along car z axis *\/$/;"	m	struct:__anon13
./tags:lmax	export/include/track.h	/^	tdble lmax;	\/**< Pitting area length max *\/$/;"	m	struct:TrackOwnPit
./tags:lmax	src/interfaces/track.h	/^	tdble lmax;	\/**< Pitting area length max *\/$/;"	m	struct:TrackOwnPit
./tags:lmin	export/include/track.h	/^	tdble lmin;	\/**< Pitting area length min *\/$/;"	m	struct:TrackOwnPit
./tags:lmin	src/interfaces/track.h	/^	tdble lmin;	\/**< Pitting area length min *\/$/;"	m	struct:TrackOwnPit
./tags:lockInputTq	src/modules/simu/simuv2/differential.h	/^    tdble	lockInputTq;$/;"	m	struct:__anon20
./tags:mass	src/modules/simu/simuv2/carstruct.h	/^    tdble	mass;		\/* mass with pilot (without fuel) *\/$/;"	m	struct:__anon18
./tags:mass	src/modules/simu/simuv2/wheel.h	/^    tdble	mass;		\/* total wheel mass (incl. brake) (unsprung mass) *\/$/;"	m	struct:__anon21
./tags:max	src/libs/tgf/params.cpp	/^    tdble				max;$/;"	m	struct:param	file:
./tags:maxAngle	src/modules/graphic/ssggraph/grcar.h	/^    tdble		minAngle, maxAngle;$/;"	m	struct:__anon4
./tags:maxPw	src/modules/simu/simuv2/engine.h	/^	tdble       maxPw;$/;"	m	struct:__anon11
./tags:maxSpeed	src/modules/simu/simuv2/steer.h	/^    tdble	maxSpeed;	\/* in rad\/s *\/$/;"	m	struct:__anon25
./tags:maxTq	src/modules/simu/simuv2/engine.h	/^    tdble		maxTq;$/;"	m	struct:__anon11
./tags:maxValue	src/modules/graphic/ssggraph/grcar.h	/^    tdble		minValue, maxValue;$/;"	m	struct:__anon4
./tags:mfB	src/modules/simu/simuv2/wheel.h	/^    tdble	mfB;		\/* Magic Formula B coeff *\/$/;"	m	struct:__anon21
./tags:mfC	src/modules/simu/simuv2/wheel.h	/^    tdble	mfC;		\/* Magic Formula C coeff *\/$/;"	m	struct:__anon21
./tags:mfE	src/modules/simu/simuv2/wheel.h	/^    tdble	mfE;		\/* Magic Formula E coeff *\/$/;"	m	struct:__anon21
./tags:min	src/libs/tgf/params.cpp	/^    tdble				min;$/;"	m	struct:param	file:
./tags:minAngle	src/modules/graphic/ssggraph/grcar.h	/^    tdble		minAngle, maxAngle;$/;"	m	struct:__anon4
./tags:minValue	src/modules/graphic/ssggraph/grcar.h	/^    tdble		minValue, maxValue;$/;"	m	struct:__anon4
./tags:monitored	src/modules/graphic/ssggraph/grcar.h	/^    tdble		*monitored;$/;"	m	struct:__anon4
./tags:mu	src/modules/simu/simuv2/wheel.h	/^    tdble  	mu;$/;"	m	struct:__anon21
./tags:needleXCenter	src/modules/graphic/ssggraph/grcar.h	/^    tdble		needleXCenter, needleYCenter;$/;"	m	struct:__anon4
./tags:needleYCenter	src/modules/graphic/ssggraph/grcar.h	/^    tdble		needleXCenter, needleYCenter;$/;"	m	struct:__anon4
./tags:opLoad	src/modules/simu/simuv2/wheel.h	/^    tdble	opLoad;		\/* Operating load *\/$/;"	m	struct:__anon21
./tags:overallRatio	src/modules/simu/simuv2/transmission.h	/^    tdble	overallRatio[MAX_GEARS];	\/* including final drive ratio *\/$/;"	m	struct:__anon28
./tags:paccel	src/drivers/human/human.h	/^	tdble	paccel;$/;"	m	struct:HumanContext
./tags:packers	src/modules/simu/simuv2/susp.h	/^    tdble packers;     \/* packer size (min susp. travel) *\/$/;"	m	struct:__anon17
./tags:pbrake	src/drivers/human/human.h	/^	tdble	pbrake;$/;"	m	struct:HumanContext
./tags:preDy	src/drivers/inferno2/inferno2.cpp	/^static tdble preDy[10]     = {0.0f};$/;"	v	file:
./tags:preFn	src/modules/simu/simuv2/wheel.h	/^    tdble	preFn, preFt;$/;"	m	struct:__anon21
./tags:preFt	src/modules/simu/simuv2/wheel.h	/^    tdble	preFn, preFt;$/;"	m	struct:__anon21
./tags:prespinVel	src/modules/simu/simuv2/wheel.h	/^    tdble  	prespinVel;   	\/* spin velocity *\/$/;"	m	struct:__anon21
./tags:pressure	src/modules/simu/simuv2/brake.h	/^    tdble	pressure;$/;"	m	struct:__anon23
./tags:pressure	src/modules/simu/simuv2/engine.h	/^	tdble       pressure;$/;"	m	struct:__anon12
./tags:pressure	src/modules/simu/simuv2/wheel.h	/^    tdble	pressure;	\/* tire pressure *\/$/;"	m	struct:__anon21
./tags:prevLeftSteer	src/drivers/human/human.h	/^	tdble	prevLeftSteer;$/;"	m	struct:HumanContext
./tags:prevRightSteer	src/drivers/human/human.h	/^	tdble	prevRightSteer;$/;"	m	struct:HumanContext
./tags:prevVal	src/modules/graphic/ssggraph/grcar.h	/^    tdble		prevVal;$/;"	m	struct:__anon4
./tags:proximityThld	src/modules/graphic/ssggraph/grcam.cpp	/^    tdble  proximityThld;$/;"	m	class:cGrCarCamRoadZoomTVD	file:
./tags:px	src/modules/graphic/ssggraph/grcar.h	/^    tdble               px;$/;"	m	struct:__anon5
./tags:py	src/modules/graphic/ssggraph/grcar.h	/^    tdble               py;$/;"	m	struct:__anon5
./tags:radius	export/include/track.h	/^    tdble radius;		\/**< Radius in meters of the middle of the track (>0) *\/$/;"	m	struct:trackSeg
./tags:radius	src/drivers/berniw/pathfinder.h	/^		tdble radius;	\/* radius of current segment *\/$/;"	m	class:PathSeg
./tags:radius	src/drivers/berniw/trackdesc.h	/^		tdble radius;			\/* radius *\/$/;"	m	class:TrackSegment
./tags:radius	src/drivers/berniw2/pathfinder.h	/^		tdble radius;	\/* radius of current segment *\/$/;"	m	class:PathSeg
./tags:radius	src/drivers/berniw2/trackdesc.h	/^		tdble radius;			\/* radius *\/$/;"	m	class:TrackSegment
./tags:radius	src/drivers/berniw3/pathfinder.h	/^		tdble radius;	\/* radius of current segment *\/$/;"	m	class:PathSeg
./tags:radius	src/drivers/berniw3/trackdesc.h	/^		tdble radius;			\/* radius *\/$/;"	m	class:TrackSegment
./tags:radius	src/drivers/inferno/pathfinder.h	/^				tdble radius;	\/\/ Radius of current segment.$/;"	m	class:PathSeg::pseg
./tags:radius	src/drivers/inferno/trackdesc.h	/^		tdble radius;			\/\/ Radius.$/;"	m	class:TrackSegment
./tags:radius	src/drivers/inferno/trackdesc.h	/^		tdble radius;			\/\/ Radius.$/;"	m	class:TrackSegment2D
./tags:radius	src/drivers/lliaw/pathfinder.h	/^				tdble radius;	\/\/ Radius of current segment.$/;"	m	class:PathSeg::pseg
./tags:radius	src/drivers/lliaw/trackdesc.h	/^		tdble radius;			\/\/ Radius.$/;"	m	class:TrackSegment
./tags:radius	src/drivers/lliaw/trackdesc.h	/^		tdble radius;			\/\/ Radius.$/;"	m	class:TrackSegment2D
./tags:radius	src/drivers/tita/pathfinder.h	/^				tdble radius;	\/\/ Radius of current segment.$/;"	m	class:PathSeg::pseg
./tags:radius	src/drivers/tita/trackdesc.h	/^		tdble radius;			\/\/ Radius.$/;"	m	class:TrackSegment
./tags:radius	src/drivers/tita/trackdesc.h	/^		tdble radius;			\/\/ Radius.$/;"	m	class:TrackSegment2D
./tags:radius	src/interfaces/track.h	/^    tdble radius;		\/**< Radius in meters of the middle of the track (>0) *\/$/;"	m	struct:trackSeg
./tags:radius	src/modules/simu/simuv2/brake.h	/^    tdble	radius;$/;"	m	struct:__anon23
./tags:radius	src/modules/simu/simuv2/wheel.h	/^    tdble  	radius;$/;"	m	struct:__anon21
./tags:radiusl	export/include/track.h	/^    tdble radiusl;		\/**< Radius in meters of the left side of the track (>0) *\/$/;"	m	struct:trackSeg
./tags:radiusl	src/interfaces/track.h	/^    tdble radiusl;		\/**< Radius in meters of the left side of the track (>0) *\/$/;"	m	struct:trackSeg
./tags:radiusr	export/include/track.h	/^    tdble radiusr;		\/**< Radius in meters of the right side of the track (>0) *\/$/;"	m	struct:trackSeg
./tags:radiusr	src/interfaces/track.h	/^    tdble radiusr;		\/**< Radius in meters of the right side of the track (>0) *\/$/;"	m	struct:trackSeg
./tags:rads	src/modules/simu/simuv2/engine.h	/^    tdble		rads;   \/* revs in rad\/s ... *\/$/;"	m	struct:__anon12
./tags:rads	src/modules/simu/simuv2/engine.h	/^    tdble rads;$/;"	m	struct:__anon10
./tags:ratio	src/modules/simu/simuv2/differential.h	/^    tdble	ratio;$/;"	m	struct:__anon20
./tags:rawPrev	src/modules/graphic/ssggraph/grcar.h	/^    tdble		rawPrev;$/;"	m	struct:__anon4
./tags:reaction	export/include/car.h	/^    tdble	reaction[4];    \/**< reaction on wheels *\/$/;"	m	struct:__anon201
./tags:reaction	src/interfaces/car.h	/^    tdble	reaction[4];    \/**< reaction on wheels *\/$/;"	m	struct:__anon161
./tags:rel_vel	src/modules/simu/simuv2/wheel.h	/^	tdble   rel_vel;    \/* relative velocity - used for realstic suspension movement*\/$/;"	m	struct:__anon21
./tags:releaseTime	src/modules/simu/simuv2/transmission.h	/^    tdble	releaseTime;	\/* time needed for releasing the clutch pedal *\/$/;"	m	struct:__anon27
./tags:rep	src/modules/simu/simuv2/brake.h	/^    tdble	rep;	\/* front\/rear repartition *\/ $/;"	m	struct:__anon24
./tags:revsLimiter	src/modules/simu/simuv2/engine.h	/^    tdble		revsLimiter;$/;"	m	struct:__anon12
./tags:revsMax	src/modules/simu/simuv2/engine.h	/^    tdble		revsMax;$/;"	m	struct:__anon12
./tags:rideHeight	src/modules/simu/simuv2/wheel.h	/^    tdble	rideHeight;	\/* height of the bottom of the car *\/$/;"	m	struct:__anon21
./tags:rimRadius	export/include/car.h	/^    tdble	rimRadius;	\/**< Rim radius *\/$/;"	m	struct:__anon195
./tags:rimRadius	src/interfaces/car.h	/^    tdble	rimRadius;	\/**< Rim radius *\/$/;"	m	struct:__anon155
./tags:rollCenter	src/modules/simu/simuv2/wheel.h	/^    tdble	rollCenter;$/;"	m	struct:__anon21
./tags:rollRes	export/include/car.h	/^    tdble rollRes;              \/**< rolling resistance, useful for sound *\/$/;"	m	struct:__anon200
./tags:rollRes	src/interfaces/car.h	/^    tdble rollRes;              \/**< rolling resistance, useful for sound *\/$/;"	m	struct:__anon160
./tags:rollRes	src/modules/simu/simuv2/wheel.h	/^    tdble	rollRes;	\/* Rolling Resistance (summed over the car) *\/$/;"	m	struct:__anon21
./tags:rpmMaxPw	src/modules/simu/simuv2/engine.h	/^	tdble       rpmMaxPw;$/;"	m	struct:__anon11
./tags:rpmMaxTq	src/modules/simu/simuv2/engine.h	/^	tdble       rpmMaxTq;$/;"	m	struct:__anon11
./tags:sTime	export/include/raceman.h	/^    tdble	sTime;$/;"	m	struct:__anon208
./tags:sTime	src/interfaces/raceman.h	/^    tdble	sTime;$/;"	m	struct:__anon167
./tags:sa	src/modules/simu/simuv2/wheel.h	/^    tdble	sa;		\/* slip angle *\/$/;"	m	struct:__anon21
./tags:scale	src/modules/telemetry/telemetry.cpp	/^    tdble		scale;$/;"	m	struct:Channel	file:
./tags:set	src/drivers/berniw/pathfinder.h	/^inline void PathSeg::set(tdble ispeedsqr, tdble ilength, v3d* id) {$/;"	f	class:PathSeg
./tags:set	src/drivers/berniw/pathfinder.h	/^inline void PathSeg::set(tdble ispeedsqr, tdble ilength, v3d* ip, v3d* id) {$/;"	f	class:PathSeg
./tags:set	src/drivers/berniw2/pathfinder.h	/^inline void PathSeg::set(tdble ispeedsqr, tdble ilength, v3d* id) {$/;"	f	class:PathSeg
./tags:set	src/drivers/berniw2/pathfinder.h	/^inline void PathSeg::set(tdble ispeedsqr, tdble ilength, v3d* ip, v3d* id) {$/;"	f	class:PathSeg
./tags:set	src/drivers/berniw3/pathfinder.h	/^inline void PathSeg::set(tdble ispeedsqr, tdble ilength, v3d* id) {$/;"	f	class:PathSeg
./tags:set	src/drivers/berniw3/pathfinder.h	/^inline void PathSeg::set(tdble ispeedsqr, tdble ilength, v3d* ip, v3d* id) {$/;"	f	class:PathSeg
./tags:set	src/drivers/inferno/pathfinder.h	/^inline void PathSeg::set(tdble ispeedsqr, tdble ilength, vec2d* id, int segid) {$/;"	f	class:PathSeg
./tags:set	src/drivers/inferno/pathfinder.h	/^inline void PathSeg::set(tdble ispeedsqr, tdble ilength, vec2d* ip, vec2d* id, int segid) {$/;"	f	class:PathSeg
./tags:set	src/drivers/lliaw/pathfinder.h	/^inline void PathSeg::set(tdble ispeedsqr, tdble ilength, vec2d* id, int segid) {$/;"	f	class:PathSeg
./tags:set	src/drivers/lliaw/pathfinder.h	/^inline void PathSeg::set(tdble ispeedsqr, tdble ilength, vec2d* ip, vec2d* id, int segid) {$/;"	f	class:PathSeg
./tags:set	src/drivers/tita/pathfinder.h	/^inline void PathSeg::set(tdble ispeedsqr, tdble ilength, vec2d* id, int segid) {$/;"	f	class:PathSeg
./tags:set	src/drivers/tita/pathfinder.h	/^inline void PathSeg::set(tdble ispeedsqr, tdble ilength, vec2d* ip, vec2d* id, int segid) {$/;"	f	class:PathSeg
./tags:setRadius	src/drivers/berniw/pathfinder.h	/^		inline void setRadius(tdble r) { radius = r; }$/;"	f	class:PathSeg
./tags:setRadius	src/drivers/berniw2/pathfinder.h	/^		inline void setRadius(tdble r) { radius = r; }$/;"	f	class:PathSeg
./tags:setRadius	src/drivers/berniw3/pathfinder.h	/^		inline void setRadius(tdble r) { radius = r; }$/;"	f	class:PathSeg
./tags:setRadius	src/drivers/inferno/pathfinder.h	/^		inline void setRadius(tdble r, int segid) { ps[getid(segid)].radius = r; }$/;"	f	class:PathSeg
./tags:setRadius	src/drivers/lliaw/pathfinder.h	/^		inline void setRadius(tdble r, int segid) { ps[getid(segid)].radius = r; }$/;"	f	class:PathSeg
./tags:setRadius	src/drivers/tita/pathfinder.h	/^		inline void setRadius(tdble r, int segid) { ps[getid(segid)].radius = r; }$/;"	f	class:PathSeg
./tags:setSpeedsqr	src/drivers/berniw/pathfinder.h	/^		inline void setSpeedsqr(tdble spsqr) { speedsqr = spsqr; }$/;"	f	class:PathSeg
./tags:setSpeedsqr	src/drivers/berniw2/pathfinder.h	/^		inline void setSpeedsqr(tdble spsqr) { speedsqr = spsqr; }$/;"	f	class:PathSeg
./tags:setSpeedsqr	src/drivers/berniw3/pathfinder.h	/^		inline void setSpeedsqr(tdble spsqr) { speedsqr = spsqr; }$/;"	f	class:PathSeg
./tags:setSpeedsqr	src/drivers/inferno/pathfinder.h	/^		inline void setSpeedsqr(tdble spsqr, int segid) { ps[getid(segid)].speedsqr = spsqr; }$/;"	f	class:PathSeg
./tags:setSpeedsqr	src/drivers/lliaw/pathfinder.h	/^		inline void setSpeedsqr(tdble spsqr, int segid) { ps[getid(segid)].speedsqr = spsqr; }$/;"	f	class:PathSeg
./tags:setSpeedsqr	src/drivers/tita/pathfinder.h	/^		inline void setSpeedsqr(tdble spsqr, int segid) { ps[getid(segid)].speedsqr = spsqr; }$/;"	f	class:PathSeg
./tags:setWeight	src/drivers/berniw/pathfinder.h	/^		inline void setWeight(tdble w) { weight = w; }$/;"	f	class:PathSeg
./tags:setWeight	src/drivers/berniw2/pathfinder.h	/^		inline void setWeight(tdble w) { weight = w; }$/;"	f	class:PathSeg
./tags:setWeight	src/drivers/berniw3/pathfinder.h	/^		inline void setWeight(tdble w) { weight = w; }$/;"	f	class:PathSeg
./tags:shiftThld	src/drivers/human/human.h	/^	tdble	shiftThld[MAX_GEARS+1];$/;"	m	struct:HumanContext
./tags:shiftThld	src/drivers/inferno2/inferno2.cpp	/^tdble	shiftThld[10][MAX_GEARS+1];$/;"	v
./tags:sideEndWidth	src/modules/track/track2.cpp	/^static tdble sideEndWidth[2];$/;"	v	file:
./tags:sideEndWidth	src/modules/track/track3.cpp	/^static tdble sideEndWidth[2];$/;"	v	file:
./tags:sideEndWidth	src/modules/track/track4.cpp	/^static tdble sideEndWidth[2];$/;"	v	file:
./tags:sideStartWidth	src/modules/track/track2.cpp	/^static tdble sideStartWidth[2];$/;"	v	file:
./tags:sideStartWidth	src/modules/track/track3.cpp	/^static tdble sideStartWidth[2];$/;"	v	file:
./tags:sideStartWidth	src/modules/track/track4.cpp	/^static tdble sideStartWidth[2];$/;"	v	file:
./tags:simDammageFactor	src/modules/simu/simuv2/categories.cpp	/^tdble simDammageFactor[] = {0.0f, 0.5f, 0.8f, 1.0f, 1.0f};$/;"	v
./tags:simSkidFactor	src/modules/simu/simuv2/categories.cpp	/^tdble simSkidFactor[] = {0.40f, 0.35f, 0.3f, 0.0f, 0.0f};$/;"	v
./tags:skid	export/include/car.h	/^    tdble	skid[4];		\/**< skid intensity *\/$/;"	m	struct:__anon201
./tags:skid	src/interfaces/car.h	/^    tdble	skid[4];		\/**< skid intensity *\/$/;"	m	struct:__anon161
./tags:slipAccel	export/include/car.h	/^	tdble slipAccel;$/;"	m	struct:__anon200
./tags:slipAccel	src/interfaces/car.h	/^	tdble slipAccel;$/;"	m	struct:__anon160
./tags:slipSide	export/include/car.h	/^	tdble slipSide;$/;"	m	struct:__anon200
./tags:slipSide	src/interfaces/car.h	/^	tdble slipSide;$/;"	m	struct:__anon160
./tags:spdtgt	src/drivers/inferno2/inferno2.cpp	/^static tdble spdtgt[10]    = {250.0f};$/;"	v	file:
./tags:spdtgt2	src/drivers/inferno2/inferno2.cpp	/^static tdble spdtgt2[10]   = {2.0f};$/;"	v	file:
./tags:speedLimit	export/include/track.h	/^	tdble speedLimit;			\/**< Speed limit between pitStart and pitEnd *\/$/;"	m	struct:__anon183
./tags:speedLimit	src/interfaces/track.h	/^	tdble speedLimit;			\/**< Speed limit between pitStart and pitEnd *\/$/;"	m	struct:__anon150
./tags:speedsqr	src/drivers/berniw/pathfinder.h	/^		tdble speedsqr;	\/* max possible speed sqared (speed ist therefore sqrt(speedsqr) *\/$/;"	m	class:PathSeg
./tags:speedsqr	src/drivers/berniw2/pathfinder.h	/^		tdble speedsqr;	\/* max possible speed sqared (speed ist therefore sqrt(speedsqr) *\/$/;"	m	class:PathSeg
./tags:speedsqr	src/drivers/berniw3/pathfinder.h	/^		tdble speedsqr;	\/* max possible speed sqared (speed ist therefore sqrt(speedsqr) *\/$/;"	m	class:PathSeg
./tags:speedsqr	src/drivers/inferno/pathfinder.h	/^				tdble speedsqr;	\/\/ Max possible speed sqared (speed ist therefore sqrt(speedsqr).$/;"	m	class:PathSeg::pseg
./tags:speedsqr	src/drivers/lliaw/pathfinder.h	/^				tdble speedsqr;	\/\/ Max possible speed sqared (speed ist therefore sqrt(speedsqr).$/;"	m	class:PathSeg::pseg
./tags:speedsqr	src/drivers/tita/pathfinder.h	/^				tdble speedsqr;	\/\/ Max possible speed sqared (speed ist therefore sqrt(speedsqr).$/;"	m	class:PathSeg::pseg
./tags:spinTq	src/modules/simu/simuv2/wheel.h	/^    tdble  	spinTq;		\/* spin torque feedback *\/$/;"	m	struct:__anon21
./tags:spinVel	export/include/car.h	/^    tdble	spinVel;	\/**< spin velocity rad\/s *\/$/;"	m	struct:__anon200
./tags:spinVel	src/interfaces/car.h	/^    tdble	spinVel;	\/**< spin velocity rad\/s *\/$/;"	m	struct:__anon160
./tags:spinVel	src/modules/simu/simuv2/differential.h	/^    tdble	spinVel;$/;"	m	struct:__anon19
./tags:spinVel	src/modules/simu/simuv2/wheel.h	/^    tdble  	spinVel;   	\/* spin velocity *\/$/;"	m	struct:__anon21
./tags:springForce	src/modules/simu/simuv2/susp.cpp	/^static tdble springForce(tSuspension *susp)$/;"	f	file:
./tags:startWidth	export/include/track.h	/^    tdble startWidth;		\/**< Width of the beginning of the segment *\/$/;"	m	struct:trackSeg
./tags:startWidth	src/interfaces/track.h	/^    tdble startWidth;		\/**< Width of the beginning of the segment *\/$/;"	m	struct:trackSeg
./tags:steer	export/include/car.h	/^    tdble	steer;	    \/**< Steer command [-1.0, 1.0]  *\/$/;"	m	struct:__anon202
./tags:steer	src/interfaces/car.h	/^    tdble	steer;	    \/**< Steer command [-1.0, 1.0]  *\/$/;"	m	struct:__anon162
./tags:steer	src/modules/simu/simuv2/steer.h	/^    tdble	steer;		\/* current steer value *\/$/;"	m	struct:__anon25
./tags:steer	src/modules/simu/simuv2/wheel.h	/^    tdble	steer;$/;"	m	struct:__anon21
./tags:steerLock	export/include/car.h	/^    tdble	steerLock;		\/**< Steer lock angle *\/$/;"	m	struct:__anon197
./tags:steerLock	src/interfaces/car.h	/^    tdble	steerLock;		\/**< Steer lock angle *\/$/;"	m	struct:__anon157
./tags:steerLock	src/modules/simu/simuv2/steer.h	/^    tdble	steerLock;	\/* in rad *\/$/;"	m	struct:__anon25
./tags:steerMult	src/drivers/inferno2/inferno2.cpp	/^static tdble steerMult[10] = {2.0f};$/;"	v	file:
./tags:sx	src/modules/graphic/ssggraph/grcar.h	/^    tdble               sx;$/;"	m	struct:__anon5
./tags:sx	src/modules/simu/simuv2/wheel.h	/^    tdble	sx;		\/* longitudinal slip value *\/$/;"	m	struct:__anon21
./tags:sy	src/modules/graphic/ssggraph/grcar.h	/^    tdble               sy;$/;"	m	struct:__anon5
./tags:tank	export/include/car.h	/^    tdble	tank;			\/**< Fuel tank capa *\/$/;"	m	struct:__anon197
./tags:tank	src/interfaces/car.h	/^    tdble	tank;			\/**< Fuel tank capa *\/$/;"	m	struct:__anon157
./tags:tank	src/modules/simu/simuv2/carstruct.h	/^    tdble	tank;		\/* fuel tank capa *\/$/;"	m	struct:__anon18
./tags:tdble	export/include/tgf.h	/^typedef float tdble;$/;"	t
./tags:tdble	src/libs/tgf/tgf.h	/^typedef float tdble;$/;"	t
./tags:temp	src/modules/simu/simuv2/brake.h	/^    tdble	temp;$/;"	m	struct:__anon23
./tags:temp_in	export/include/car.h	/^	tdble   temp_in, temp_mid, temp_out;$/;"	m	struct:__anon200
./tags:temp_in	src/interfaces/car.h	/^	tdble   temp_in, temp_mid, temp_out;$/;"	m	struct:__anon160
./tags:temp_mid	export/include/car.h	/^	tdble   temp_in, temp_mid, temp_out;$/;"	m	struct:__anon200
./tags:temp_mid	src/interfaces/car.h	/^	tdble   temp_in, temp_mid, temp_out;$/;"	m	struct:__anon160
./tags:temp_out	export/include/car.h	/^	tdble   temp_in, temp_mid, temp_out;$/;"	m	struct:__anon200
./tags:temp_out	src/interfaces/car.h	/^	tdble   temp_in, temp_mid, temp_out;$/;"	m	struct:__anon160
./tags:tfTrackGlobal2Local	export/include/track.h	/^typedef void(*tfTrackGlobal2Local)(tTrackSeg* \/*seg*\/, tdble \/*X*\/, tdble \/*Y*\/, tTrkLocPos* \/*pos*\/, int \/*sides*\/);$/;"	t
./tags:tfTrackGlobal2Local	src/interfaces/track.h	/^typedef void(*tfTrackGlobal2Local)(tTrackSeg* \/*seg*\/, tdble \/*X*\/, tdble \/*Y*\/, tTrkLocPos* \/*pos*\/, int \/*sides*\/);$/;"	t
./tags:tfTrackHeightG	export/include/track.h	/^typedef tdble(*tfTrackHeightG)(tTrackSeg*, tdble, tdble);$/;"	t
./tags:tfTrackHeightG	src/interfaces/track.h	/^typedef tdble(*tfTrackHeightG)(tTrackSeg*, tdble, tdble);$/;"	t
./tags:tfTrackHeightL	export/include/track.h	/^typedef tdble(*tfTrackHeightL)(tTrkLocPos*);$/;"	t
./tags:tfTrackHeightL	src/interfaces/track.h	/^typedef tdble(*tfTrackHeightL)(tTrkLocPos*);$/;"	t
./tags:tfTrackLocal2Global	export/include/track.h	/^typedef void(*tfTrackLocal2Global)(tTrkLocPos*, tdble *, tdble *);$/;"	t
./tags:tfTrackLocal2Global	src/interfaces/track.h	/^typedef void(*tfTrackLocal2Global)(tTrkLocPos*, tdble *, tdble *);$/;"	t
./tags:tfTrackSideNormal	export/include/track.h	/^typedef void(*tfTrackSideNormal)(tTrackSeg*, tdble, tdble, int, t3Dd*);$/;"	t
./tags:tfTrackSideNormal	src/interfaces/track.h	/^typedef void(*tfTrackSideNormal)(tTrackSeg*, tdble, tdble, int, t3Dd*);$/;"	t
./tags:tftlmInit	export/include/telemetry.h	/^typedef void(*tftlmInit)(tdble \/* ymin *\/, tdble \/* ymax *\/);$/;"	t
./tags:tftlmInit	src/interfaces/telemetry.h	/^typedef void(*tftlmInit)(tdble \/* ymin *\/, tdble \/* ymax *\/);$/;"	t
./tags:tftlmNewChannel	export/include/telemetry.h	/^typedef void(*tftlmNewChannel)(const char * \/* name *\/, tdble * \/* var *\/, tdble \/* min *\/, tdble \/* max *\/);$/;"	t
./tags:tftlmNewChannel	src/interfaces/telemetry.h	/^typedef void(*tftlmNewChannel)(const char * \/* name *\/, tdble * \/* var *\/, tdble \/* min *\/, tdble \/* max *\/);$/;"	t
./tags:tickover	src/modules/simu/simuv2/engine.h	/^    tdble		tickover;$/;"	m	struct:__anon12
./tags:timeToRelease	src/modules/simu/simuv2/transmission.h	/^    tdble	timeToRelease;	\/* remaining time before releasing the clutch pedal *\/$/;"	m	struct:__anon27
./tags:tireHeight	export/include/car.h	/^    tdble	tireHeight;	\/**< Tire height  *\/$/;"	m	struct:__anon195
./tags:tireHeight	src/interfaces/car.h	/^    tdble	tireHeight;	\/**< Tire height  *\/$/;"	m	struct:__anon155
./tags:tireSpringRate	src/modules/simu/simuv2/wheel.h	/^    tdble	tireSpringRate;$/;"	m	struct:__anon21
./tags:tireWidth	export/include/car.h	/^    tdble	tireWidth;	\/**< Tire width *\/$/;"	m	struct:__anon195
./tags:tireWidth	src/interfaces/car.h	/^    tdble	tireWidth;	\/**< Tire width *\/$/;"	m	struct:__anon155
./tags:toLeft	export/include/track.h	/^    tdble	toLeft;		\/**< Distance to left side of segment (+ to inside of track - to outside) *\/$/;"	m	struct:__anon182
./tags:toLeft	src/interfaces/track.h	/^    tdble	toLeft;		\/**< Distance to left side of segment (+ to inside of track - to outside) *\/$/;"	m	struct:__anon149
./tags:toMiddle	export/include/track.h	/^    tdble	toMiddle;	\/**< Distance to middle of segment (+ to left - to right) *\/$/;"	m	struct:__anon182
./tags:toMiddle	src/interfaces/track.h	/^    tdble	toMiddle;	\/**< Distance to middle of segment (+ to left - to right) *\/$/;"	m	struct:__anon149
./tags:toRight	export/include/track.h	/^    tdble	toRight;	\/**< Distance to right side of segment (+ to inside of track - to outside) *\/$/;"	m	struct:__anon182
./tags:toRight	src/interfaces/track.h	/^    tdble	toRight;	\/**< Distance to right side of segment (+ to inside of track - to outside) *\/$/;"	m	struct:__anon149
./tags:toStart	export/include/track.h	/^    tdble	toStart;	\/**< Distance to start of segment (or arc if turn) *\/$/;"	m	struct:__anon182
./tags:toStart	src/interfaces/track.h	/^    tdble	toStart;	\/**< Distance to start of segment (or arc if turn) *\/$/;"	m	struct:__anon149
./tags:topSpd	export/include/raceman.h	/^    tdble	topSpd;$/;"	m	struct:__anon208
./tags:topSpd	src/interfaces/raceman.h	/^    tdble	topSpd;$/;"	m	struct:__anon167
./tags:topSpeed	export/include/car.h	/^    tdble		topSpeed;$/;"	m	struct:__anon198
./tags:topSpeed	src/interfaces/car.h	/^    tdble		topSpeed;$/;"	m	struct:__anon158
./tags:transferValue	src/modules/simu/simuv2/transmission.h	/^    tdble	transferValue;	\/* 1.0 -> released, 0.0 -> applied *\/$/;"	m	struct:__anon27
./tags:v	src/modules/simu/simuv2/susp.h	/^    tdble v; \/* suspension travel speed *\/$/;"	m	struct:Suspension
./tags:v1	src/modules/simu/simuv2/susp.h	/^    tdble C1, b1, v1; \/* coefs for slow *\/$/;"	m	struct:__anon15
./tags:vSpace	export/include/track.h	/^    tdble	vSpace;$/;"	m	struct:__anon184
./tags:vSpace	src/interfaces/track.h	/^    tdble	vSpace;$/;"	m	struct:__anon151
./tags:val	export/include/tgf.h	/^    tdble	val[GF_MEAN_MAX_VAL+1];$/;"	m	struct:__anon194
./tags:val	src/libs/tgf/tgf.h	/^    tdble	val[GF_MEAN_MAX_VAL+1];$/;"	m	struct:__anon52
./tags:val	src/modules/telemetry/telemetry.cpp	/^    tdble		*val;	\/* monitored value *\/$/;"	m	struct:Channel	file:
./tags:valnum	src/libs/tgf/params.cpp	/^    tdble				valnum;$/;"	m	struct:param	file:
./tags:vexp	src/modules/graphic/ssggraph/grsmoke.h	/^  tdble vexp;$/;"	m	class:ssgVtxTableSmoke
./tags:viscomax	src/modules/simu/simuv2/differential.h	/^    tdble	viscomax;$/;"	m	struct:__anon20
./tags:viscosity	src/modules/simu/simuv2/differential.h	/^    tdble	viscosity;$/;"	m	struct:__anon20
./tags:vt	src/modules/simu/simuv2/wheel.h	/^    tdble	vt;$/;"	m	struct:__anon21
./tags:vvx	src/modules/graphic/ssggraph/grsmoke.h	/^  tdble vvx, vvy,vvz;$/;"	m	class:ssgVtxTableSmoke
./tags:vvy	src/modules/graphic/ssggraph/grsmoke.h	/^  tdble vvx, vvy,vvz;$/;"	m	class:ssgVtxTableSmoke
./tags:vvz	src/modules/graphic/ssggraph/grsmoke.h	/^  tdble vvx, vvy,vvz;$/;"	m	class:ssgVtxTableSmoke
./tags:waitToTurn	src/drivers/berniw/berniw.cpp	/^static const tdble waitToTurn = 1.0; \/* how long should i wait till i try to turn backwards *\/$/;"	v	file:
./tags:waitToTurn	src/drivers/berniw2/berniw2.cpp	/^static const tdble waitToTurn = 1.0; \/* how long should i wait till i try to turn backwards *\/$/;"	v	file:
./tags:waitToTurn	src/drivers/berniw3/berniw3.cpp	/^static const tdble waitToTurn = 1.0; \/* how long should i wait till i try to turn backwards *\/$/;"	v	file:
./tags:waitToTurn	src/drivers/inferno/inferno.cpp	/^static const tdble waitToTurn = 1.0; \/\/ How long should i wait till i try to turn backwards.$/;"	v	file:
./tags:waitToTurn	src/drivers/lliaw/lliaw.cpp	/^static const tdble waitToTurn = 1.0; \/\/ How long should i wait till i try to turn backwards.$/;"	v	file:
./tags:waitToTurn	src/drivers/tita/tita.cpp	/^static const tdble waitToTurn = 1.0; \/\/ How long should i wait till i try to turn backwards.$/;"	v	file:
./tags:weight	src/drivers/berniw/pathfinder.h	/^		tdble weight;	\/* weight function value for superposition *\/$/;"	m	class:PathSeg
./tags:weight	src/drivers/berniw2/pathfinder.h	/^		tdble weight;	\/* weight function value for superposition *\/$/;"	m	class:PathSeg
./tags:weight	src/drivers/berniw3/pathfinder.h	/^		tdble weight;	\/* weight function value for superposition *\/$/;"	m	class:PathSeg
./tags:weight0	src/modules/simu/simuv2/wheel.h	/^    tdble  	weight0;	\/* initial weight on this wheel *\/$/;"	m	struct:__anon21
./tags:wheelRadius	export/include/car.h	/^    tdble	wheelRadius;	\/**< Overall wheel radius *\/$/;"	m	struct:__anon195
./tags:wheelRadius	src/interfaces/car.h	/^    tdble	wheelRadius;	\/**< Overall wheel radius *\/$/;"	m	struct:__anon155
./tags:wheelbase	src/modules/simu/simuv2/carstruct.h	/^    tdble	wheelbase;$/;"	m	struct:__anon18
./tags:wheeltrack	src/modules/simu/simuv2/carstruct.h	/^    tdble	wheeltrack;$/;"	m	struct:__anon18
./tags:wheight0	src/modules/simu/simuv2/axle.h	/^    tdble	wheight0;$/;"	m	struct:__anon22
./tags:width	export/include/track.h	/^	tdble width;				\/**< Width of each pit stop *\/$/;"	m	struct:__anon183
./tags:width	export/include/track.h	/^    tdble		width;	\/**< Barrier width *\/$/;"	m	struct:trackBarrier
./tags:width	export/include/track.h	/^    tdble	  width;	\/**< main track width *\/$/;"	m	struct:__anon186
./tags:width	export/include/track.h	/^    tdble	width;$/;"	m	struct:__anon184
./tags:width	export/include/track.h	/^    tdble width;		\/**< Width of the segment (if constant width) *\/$/;"	m	struct:trackSeg
./tags:width	src/drivers/berniw/trackdesc.h	/^		tdble width;			\/* width of the track segment*\/$/;"	m	class:TrackSegment
./tags:width	src/drivers/berniw2/trackdesc.h	/^		tdble width;			\/* width of the track segment*\/$/;"	m	class:TrackSegment
./tags:width	src/drivers/berniw3/trackdesc.h	/^		tdble width;			\/* width of the track segment*\/$/;"	m	class:TrackSegment
./tags:width	src/drivers/inferno/trackdesc.h	/^		tdble width;			\/\/ Width of the track segment.$/;"	m	class:TrackSegment
./tags:width	src/drivers/inferno/trackdesc.h	/^		tdble width;			\/\/ Width of the track segment.$/;"	m	class:TrackSegment2D
./tags:width	src/drivers/lliaw/trackdesc.h	/^		tdble width;			\/\/ Width of the track segment.$/;"	m	class:TrackSegment
./tags:width	src/drivers/lliaw/trackdesc.h	/^		tdble width;			\/\/ Width of the track segment.$/;"	m	class:TrackSegment2D
./tags:width	src/drivers/tita/trackdesc.h	/^		tdble width;			\/\/ Width of the track segment.$/;"	m	class:TrackSegment
./tags:width	src/drivers/tita/trackdesc.h	/^		tdble width;			\/\/ Width of the track segment.$/;"	m	class:TrackSegment2D
./tags:width	src/interfaces/track.h	/^	tdble width;				\/**< Width of each pit stop *\/$/;"	m	struct:__anon150
./tags:width	src/interfaces/track.h	/^    tdble		width;	\/**< Barrier width *\/$/;"	m	struct:trackBarrier
./tags:width	src/interfaces/track.h	/^    tdble	  width;	\/**< main track width *\/$/;"	m	struct:__anon153
./tags:width	src/interfaces/track.h	/^    tdble	width;$/;"	m	struct:__anon151
./tags:width	src/interfaces/track.h	/^    tdble width;		\/**< Width of the segment (if constant width) *\/$/;"	m	struct:trackSeg
./tags:x	export/include/tgf.h	/^    tdble	x;		\/**< x coordinate *\/$/;"	m	struct:__anon189
./tags:x	export/include/tgf.h	/^    tdble	x;		\/**< x coordinate *\/$/;"	m	struct:__anon191
./tags:x	src/libs/tgf/tgf.h	/^    tdble	x;		\/**< x coordinate *\/$/;"	m	struct:__anon47
./tags:x	src/libs/tgf/tgf.h	/^    tdble	x;		\/**< x coordinate *\/$/;"	m	struct:__anon49
./tags:x	src/modules/simu/simuv2/susp.h	/^    tdble x; \/* suspension travel *\/$/;"	m	struct:Suspension
./tags:x0	src/modules/simu/simuv2/susp.h	/^    tdble x0;         \/* initial suspension travel *\/$/;"	m	struct:__anon17
./tags:xMax	src/modules/simu/simuv2/susp.h	/^    tdble xMax;       \/* maxi suspension travel *\/$/;"	m	struct:__anon17
./tags:xmax	src/modules/track/track1.cpp	/^static tdble	xmin, xmax, ymin, ymax, zmin, zmax;$/;"	v	file:
./tags:xmax	src/modules/track/track2.cpp	/^static tdble	xmin, xmax, ymin, ymax, zmin, zmax;$/;"	v	file:
./tags:xmax	src/modules/track/track3.cpp	/^static tdble	xmin, xmax, ymin, ymax, zmin, zmax;$/;"	v	file:
./tags:xmax	src/modules/track/track4.cpp	/^static tdble	xmin, xmax, ymin, ymax, zmin, zmax;$/;"	v	file:
./tags:xmin	src/modules/track/track1.cpp	/^static tdble	xmin, xmax, ymin, ymax, zmin, zmax;$/;"	v	file:
./tags:xmin	src/modules/track/track2.cpp	/^static tdble	xmin, xmax, ymin, ymax, zmin, zmax;$/;"	v	file:
./tags:xmin	src/modules/track/track3.cpp	/^static tdble	xmin, xmax, ymin, ymax, zmin, zmax;$/;"	v	file:
./tags:xmin	src/modules/track/track4.cpp	/^static tdble	xmin, xmax, ymin, ymax, zmin, zmax;$/;"	v	file:
./tags:xpos	src/modules/simu/simuv2/axle.h	/^    tdble xpos;$/;"	m	struct:__anon22
./tags:y	export/include/tgf.h	/^    tdble	y;		\/**< y coordinate *\/$/;"	m	struct:__anon189
./tags:y	export/include/tgf.h	/^    tdble	y;		\/**< y coordinate *\/$/;"	m	struct:__anon191
./tags:y	src/libs/tgf/tgf.h	/^    tdble	y;		\/**< y coordinate *\/$/;"	m	struct:__anon47
./tags:y	src/libs/tgf/tgf.h	/^    tdble	y;		\/**< y coordinate *\/$/;"	m	struct:__anon49
./tags:ymax	src/modules/telemetry/telemetry.cpp	/^    tdble	ymax;$/;"	m	struct:Tlm	file:
./tags:ymax	src/modules/track/track1.cpp	/^static tdble	xmin, xmax, ymin, ymax, zmin, zmax;$/;"	v	file:
./tags:ymax	src/modules/track/track2.cpp	/^static tdble	xmin, xmax, ymin, ymax, zmin, zmax;$/;"	v	file:
./tags:ymax	src/modules/track/track3.cpp	/^static tdble	xmin, xmax, ymin, ymax, zmin, zmax;$/;"	v	file:
./tags:ymax	src/modules/track/track4.cpp	/^static tdble	xmin, xmax, ymin, ymax, zmin, zmax;$/;"	v	file:
./tags:ymin	src/modules/telemetry/telemetry.cpp	/^    tdble	ymin;$/;"	m	struct:Tlm	file:
./tags:ymin	src/modules/track/track1.cpp	/^static tdble	xmin, xmax, ymin, ymax, zmin, zmax;$/;"	v	file:
./tags:ymin	src/modules/track/track2.cpp	/^static tdble	xmin, xmax, ymin, ymax, zmin, zmax;$/;"	v	file:
./tags:ymin	src/modules/track/track3.cpp	/^static tdble	xmin, xmax, ymin, ymax, zmin, zmax;$/;"	v	file:
./tags:ymin	src/modules/track/track4.cpp	/^static tdble	xmin, xmax, ymin, ymax, zmin, zmax;$/;"	v	file:
./tags:z	export/include/tgf.h	/^    tdble	z;		\/**< z coordinate *\/$/;"	m	struct:__anon189
./tags:z	export/include/tgf.h	/^    tdble	z;		\/**< z coordinate *\/$/;"	m	struct:__anon191
./tags:z	src/libs/tgf/tgf.h	/^    tdble	z;		\/**< z coordinate *\/$/;"	m	struct:__anon47
./tags:z	src/libs/tgf/tgf.h	/^    tdble	z;		\/**< z coordinate *\/$/;"	m	struct:__anon49
./tags:zRoad	src/modules/simu/simuv2/wheel.h	/^    tdble	zRoad;		\/* z of the road *\/$/;"	m	struct:__anon21
./tags:zmax	src/modules/track/track1.cpp	/^static tdble	xmin, xmax, ymin, ymax, zmin, zmax;$/;"	v	file:
./tags:zmax	src/modules/track/track2.cpp	/^static tdble	xmin, xmax, ymin, ymax, zmin, zmax;$/;"	v	file:
./tags:zmax	src/modules/track/track3.cpp	/^static tdble	xmin, xmax, ymin, ymax, zmin, zmax;$/;"	v	file:
./tags:zmax	src/modules/track/track4.cpp	/^static tdble	xmin, xmax, ymin, ymax, zmin, zmax;$/;"	v	file:
./tags:zmin	src/modules/track/track1.cpp	/^static tdble	xmin, xmax, ymin, ymax, zmin, zmax;$/;"	v	file:
./tags:zmin	src/modules/track/track2.cpp	/^static tdble	xmin, xmax, ymin, ymax, zmin, zmax;$/;"	v	file:
./tags:zmin	src/modules/track/track3.cpp	/^static tdble	xmin, xmax, ymin, ymax, zmin, zmax;$/;"	v	file:
./tags:zmin	src/modules/track/track4.cpp	/^static tdble	xmin, xmax, ymin, ymax, zmin, zmax;$/;"	v	file:
./src/modules/track/track.cpp:const tdble DEGPRAD = 180.0 / PI;   /* degrees per radian */
./src/modules/track/track3.cpp:static tdble	xmin, xmax, ymin, ymax, zmin, zmax;
./src/modules/track/track3.cpp:static tdble sideEndWidth[2];
./src/modules/track/track3.cpp:static tdble sideStartWidth[2];
./src/modules/track/track3.cpp:static tdble borderWidth[2];
./src/modules/track/track3.cpp:static tdble borderHeight[2];
./src/modules/track/track3.cpp:static tdble barrierWidth[2];
./src/modules/track/track3.cpp:static tdble barrierHeight[2];
./src/modules/track/track3.cpp:static tdble	GlobalStepLen = 0;
./src/modules/track/track3.cpp:    tdble	x, y, z;
./src/modules/track/track3.cpp:    tdble	al, alfl;
./src/modules/track/track3.cpp:    tdble	x1, x2, y1, y2;
./src/modules/track/track3.cpp:    tdble	sw, ew, bw;
./src/modules/track/track3.cpp:    tdble	minWidth;
./src/modules/track/track3.cpp:    tdble	maxWidth;
./src/modules/track/track3.cpp:    tdble	Kew;
./src/modules/track/track3.cpp:	Kew = (ew - sw) / (tdble)steps;
./src/modules/track/track3.cpp:	ew = sw + (tdble)(curStep+1) * Kew;
./src/modules/track/track3.cpp:	sw = sw + (tdble)(curStep) * Kew;
./src/modules/track/track3.cpp:	    curBorder->angle[TR_XS] = curSeg->angle[TR_XS] * (tdble)type;
./src/modules/track/track3.cpp:	    curBorder->angle[TR_XE] = curSeg->angle[TR_XE] * (tdble)type;
./src/modules/track/track3.cpp:		    curBorder->vertex[TR_SL].z = curBorder->vertex[TR_SR].z + (tdble)type * bw * tan(curSeg->angle[TR_XS]);
./src/modules/track/track3.cpp:		    z = curBorder->vertex[TR_EL].z = curBorder->vertex[TR_ER].z + (tdble)type * bw * tan(curSeg->angle[TR_XE]);
./src/modules/track/track3.cpp:		    curBorder->vertex[TR_SR].z = curBorder->vertex[TR_SL].z - (tdble)type * bw * tan(curSeg->angle[TR_XS]);
./src/modules/track/track3.cpp:		    z = curBorder->vertex[TR_ER].z = curBorder->vertex[TR_EL].z - (tdble)type * bw * tan(curSeg->angle[TR_XE]);
./src/modules/track/track3.cpp:		    curBorder->vertex[TR_SL].z = curBorder->vertex[TR_SR].z + (tdble)type * bw * tan(curSeg->angle[TR_XS]);
./src/modules/track/track3.cpp:		    curBorder->vertex[TR_EL].y = curBorder->vertex[TR_ER].y - (tdble)type * bw * sin(curBorder->angle[TR_CS] + curBorder->arc);
./src/modules/track/track3.cpp:		    curBorder->vertex[TR_SR].z = curBorder->vertex[TR_SL].z - (tdble)type * bw * tan(curSeg->angle[TR_XS]);
./src/modules/track/track3.cpp:		    z = curBorder->vertex[TR_ER].z = curBorder->vertex[TR_EL].z - (tdble)type * bw * tan(curSeg->angle[TR_XE]);
./src/modules/track/track3.cpp:		    curBorder->vertex[TR_SL].z = curBorder->vertex[TR_SR].z + (tdble)type * bw * tan(curSeg->angle[TR_XS]);
./src/modules/track/track3.cpp:		    z = curBorder->vertex[TR_EL].z = curBorder->vertex[TR_ER].z + (tdble)type * bw * tan(curSeg->angle[TR_XE]);
./src/modules/track/track3.cpp:		    curBorder->vertex[TR_SR].z = curBorder->vertex[TR_SL].z - (tdble)type * bw * tan(curSeg->angle[TR_XS]);
./src/modules/track/track3.cpp:		    z = curBorder->vertex[TR_ER].z = curBorder->vertex[TR_EL].z - (tdble)type * bw * tan(curSeg->angle[TR_XE]);
./src/modules/track/track3.cpp:	    curSide->angle[TR_XS] = curSeg->angle[TR_XS] * (tdble)type;
./src/modules/track/track3.cpp:	    curSide->angle[TR_XE] = curSeg->angle[TR_XE] * (tdble)type;
./src/modules/track/track3.cpp:		    curSide->vertex[TR_SL].z = curSide->vertex[TR_SR].z + (tdble)type * sw * tan(curSeg->angle[TR_XS]);
./src/modules/track/track3.cpp:		    z = curSide->vertex[TR_EL].z = curSide->vertex[TR_ER].z + (tdble)type * ew * tan(curSeg->angle[TR_XE]);
./src/modules/track/track3.cpp:		    curSide->vertex[TR_SR].z = curSide->vertex[TR_SL].z - (tdble)type * sw * tan(curSeg->angle[TR_XS]);
./src/modules/track/track3.cpp:		    z = curSide->vertex[TR_ER].z = curSide->vertex[TR_EL].z - (tdble)type * ew * tan(curSeg->angle[TR_XE]);
./src/modules/track/track3.cpp:		    curSide->vertex[TR_SL].z = curSide->vertex[TR_SR].z + (tdble)type * sw * tan(curSeg->angle[TR_XS]);
./src/modules/track/track3.cpp:		    z = curSide->vertex[TR_EL].z = curSide->vertex[TR_ER].z + (tdble)type * ew * tan(curSeg->angle[TR_XE]);
./src/modules/track/track3.cpp:		    curSide->vertex[TR_SR].z = curSide->vertex[TR_SL].z - (tdble)type * sw * tan(curSeg->angle[TR_XS]);
./src/modules/track/track3.cpp:		    z = curSide->vertex[TR_ER].z = curSide->vertex[TR_EL].z - (tdble)type * ew * tan(curSeg->angle[TR_XE]);
./src/modules/track/track3.cpp:		    curSide->vertex[TR_SL].z = curSide->vertex[TR_SR].z + (tdble)type * sw * tan(curSeg->angle[TR_XS]);
./src/modules/track/track3.cpp:		    z = curSide->vertex[TR_EL].z = curSide->vertex[TR_ER].z + (tdble)type * ew * tan(curSeg->angle[TR_XE]);
./src/modules/track/track3.cpp:		    curSide->vertex[TR_SR].z = curSide->vertex[TR_SL].z - (tdble)type * sw * tan(curSeg->angle[TR_XS]);
./src/modules/track/track3.cpp:		    z = curSide->vertex[TR_ER].z = curSide->vertex[TR_EL].z - (tdble)type * ew * tan(curSeg->angle[TR_XE]);
./src/modules/track/track3.cpp:    tdble	radius, radiusend = 0, dradius;
./src/modules/track/track3.cpp:    tdble	innerradius;
./src/modules/track/track3.cpp:    tdble	arc;
./src/modules/track/track3.cpp:    tdble	length;
./src/modules/track/track3.cpp:    tdble	alf;
./src/modules/track/track3.cpp:    tdble	xr, yr, newxr, newyr;
./src/modules/track/track3.cpp:    tdble	xl, yl, newxl, newyl;
./src/modules/track/track3.cpp:    tdble	cenx, ceny;
./src/modules/track/track3.cpp:    tdble	width, wi2;
./src/modules/track/track3.cpp:    tdble	x1, x2, y1, y2;
./src/modules/track/track3.cpp:    tdble	al, alfl;
./src/modules/track/track3.cpp:    tdble	zsl, zsr, zel, zer, zs, ze;
./src/modules/track/track3.cpp:    tdble	bankings, bankinge, dz, dzl, dzr;
./src/modules/track/track3.cpp:    tdble	etgt, stgt;
./src/modules/track/track3.cpp:    tdble	etgtl, stgtl;
./src/modules/track/track3.cpp:    tdble	etgtr, stgtr;
./src/modules/track/track3.cpp:    tdble	stepslg = 0;
./src/modules/track/track3.cpp:    tdble	totLength;
./src/modules/track/track3.cpp:    tdble	tl, dtl, T1l, T2l;
./src/modules/track/track3.cpp:    tdble	tr, dtr, T1r, T2r;
./src/modules/track/track3.cpp:    tdble	curzel, curzer, curArc, curLength, curzsl, curzsr;
./src/modules/track/track3.cpp:    tdble	grade;
./src/modules/track/track3.cpp:		GfParmSetCurNum(TrackHandle, path, TRK_ATT_ID, (char*)NULL, (tdble)curindex);
./src/modules/track/track3.cpp:		dtl = 1.0 / (tdble)steps;
./src/modules/track/track3.cpp:		dtr = 1.0 / (tdble)steps;
./src/modules/track/track3.cpp:		curArc = arc / (tdble)steps;
./src/modules/track/track3.cpp:		curLength = length / (tdble)steps;
./src/modules/track/track3.cpp:		dradius = (radiusend - radius) / (tdble)steps;
./src/modules/track/track3.cpp:			dradius = (radiusend - radius) / (tdble)(steps - 1);
./src/modules/track/track3.cpp:			tdble tmpAngle = 0;
./src/modules/track/track3.cpp:			tdble tmpRadius = radius;
./src/modules/track/track3.cpp:    tdble		offset = 0;
./src/modules/track/track3.cpp:    tdble		toStart;
./src/modules/track/track0.cpp:    tdble	radius;
./src/modules/track/track0.cpp:    tdble	innerradius;
./src/modules/track/track0.cpp:    tdble	arc;
./src/modules/track/track0.cpp:    tdble	length;
./src/modules/track/track0.cpp:    tdble	alf;
./src/modules/track/track0.cpp:    tdble	xr, yr, newxr, newyr;
./src/modules/track/track0.cpp:    tdble	xl, yl, newxl, newyl;
./src/modules/track/track0.cpp:    tdble	cenx, ceny;
./src/modules/track/track0.cpp:    tdble	width, wi2;
./src/modules/track/track0.cpp:    tdble	xmin, xmax, ymin, ymax, zmin, zmax;
./src/modules/track/track0.cpp:    tdble	x1, x2, y1, y2;
./src/modules/track/track0.cpp:    tdble	al, alfl;
./src/modules/track/track0.cpp:    tdble	zsl, zsr, zel, zer, zs, ze;
./src/modules/track/track0.cpp:    tdble	friction = 1.0;
./src/modules/track/track0.cpp:    tdble	rollres = 0.001;
./src/modules/track/track0.cpp:    tdble	lsw, rsw;
./src/modules/track/track0.cpp:    tdble	lssw, lsew;
./src/modules/track/track0.cpp:    tdble	rssw, rsew;
Binary file ./src/modules/track/trackutil.o matches
./src/modules/track/trackinc.h:extern tdble TrackHeightG(tTrackSeg *seg, tdble x, tdble y);
./src/modules/track/trackinc.h:extern tdble TrackHeightL(tTrkLocPos *p);
./src/modules/track/trackinc.h:extern void TrackGlobal2Local(tTrackSeg *segment, tdble X, tdble Y, tTrkLocPos *p, int sides);
./src/modules/track/trackinc.h:extern void TrackLocal2Global(tTrkLocPos *p, tdble *X, tdble *Y);
./src/modules/track/trackinc.h:extern void TrackSideNormal(tTrackSeg*, tdble, tdble, int, t3Dd*);
./src/modules/track/trackinc.h:extern tdble TrackSpline(tdble p0, tdble p1, tdble t0, tdble t1, tdble t);
Binary file ./src/modules/track/trackitf.o matches
Binary file ./src/modules/track/track.o matches
./src/modules/track/track4.cpp:static tdble	xmin, xmax, ymin, ymax, zmin, zmax;
./src/modules/track/track4.cpp:static tdble sideEndWidth[2];
./src/modules/track/track4.cpp:static tdble sideStartWidth[2];
./src/modules/track/track4.cpp:static tdble DoVfactor=1.0;
./src/modules/track/track4.cpp:static tdble borderWidth[2];
./src/modules/track/track4.cpp:static tdble borderHeight[2];
./src/modules/track/track4.cpp:static tdble barrierWidth[2];
./src/modules/track/track4.cpp:static tdble barrierHeight[2];
./src/modules/track/track4.cpp:static tdble	GlobalStepLen = 0;
./src/modules/track/track4.cpp:    tdble	x, y, z;
./src/modules/track/track4.cpp:    tdble	al, alfl;
./src/modules/track/track4.cpp:    tdble	x1, x2, y1, y2;
./src/modules/track/track4.cpp:    tdble	w, sw, ew, bw;
./src/modules/track/track4.cpp:    tdble	minWidth;
./src/modules/track/track4.cpp:    tdble	maxWidth;
./src/modules/track/track4.cpp:    tdble	Kew;
./src/modules/track/track4.cpp:	Kew = (ew - sw) / (tdble)steps;
./src/modules/track/track4.cpp:	ew = sw + (tdble)(curStep+1) * Kew;
./src/modules/track/track4.cpp:	sw = sw + (tdble)(curStep) * Kew;
./src/modules/track/track4.cpp:	    curBorder->angle[TR_XS] = curSeg->angle[TR_XS] * (tdble)type;
./src/modules/track/track4.cpp:	    curBorder->angle[TR_XE] = curSeg->angle[TR_XE] * (tdble)type;
./src/modules/track/track4.cpp:		    curBorder->vertex[TR_SL].z = curBorder->vertex[TR_SR].z + (tdble)type * bw * tan(curSeg->angle[TR_XS]);
./src/modules/track/track4.cpp:		    z = curBorder->vertex[TR_EL].z = curBorder->vertex[TR_ER].z + (tdble)type * bw * tan(curSeg->angle[TR_XE]);
./src/modules/track/track4.cpp:		    curBorder->vertex[TR_SR].z = curBorder->vertex[TR_SL].z - (tdble)type * bw * tan(curSeg->angle[TR_XS]);
./src/modules/track/track4.cpp:		    z = curBorder->vertex[TR_ER].z = curBorder->vertex[TR_EL].z - (tdble)type * bw * tan(curSeg->angle[TR_XE]);
./src/modules/track/track4.cpp:		    curBorder->vertex[TR_SL].z = curBorder->vertex[TR_SR].z + (tdble)type * bw * tan(curSeg->angle[TR_XS]);
./src/modules/track/track4.cpp:		    z = curBorder->vertex[TR_EL].z = curBorder->vertex[TR_ER].z + (tdble)type * bw * tan(curSeg->angle[TR_XE]);
./src/modules/track/track4.cpp:		    curBorder->vertex[TR_SR].z = curBorder->vertex[TR_SL].z - (tdble)type * bw * tan(curSeg->angle[TR_XS]);
./src/modules/track/track4.cpp:		    z = curBorder->vertex[TR_ER].z = curBorder->vertex[TR_EL].z - (tdble)type * bw * tan(curSeg->angle[TR_XE]);
./src/modules/track/track4.cpp:		    curBorder->vertex[TR_SL].z = curBorder->vertex[TR_SR].z + (tdble)type * bw * tan(curSeg->angle[TR_XS]);
./src/modules/track/track4.cpp:		    z = curBorder->vertex[TR_EL].z = curBorder->vertex[TR_ER].z + (tdble)type * bw * tan(curSeg->angle[TR_XE]);
./src/modules/track/track4.cpp:		    curBorder->vertex[TR_SR].z = curBorder->vertex[TR_SL].z - (tdble)type * bw * tan(curSeg->angle[TR_XS]);
./src/modules/track/track4.cpp:		    z = curBorder->vertex[TR_ER].z = curBorder->vertex[TR_EL].z - (tdble)type * bw * tan(curSeg->angle[TR_XE]);
./src/modules/track/track4.cpp:	    curSide->angle[TR_XS] = curSeg->angle[TR_XS] * (tdble)type;
./src/modules/track/track4.cpp:	    curSide->angle[TR_XE] = curSeg->angle[TR_XE] * (tdble)type;
./src/modules/track/track4.cpp:		    curSide->vertex[TR_SL].z = curSide->vertex[TR_SR].z + (tdble)type * sw * tan(curSeg->angle[TR_XS]);
./src/modules/track/track4.cpp:		    z = curSide->vertex[TR_EL].z = curSide->vertex[TR_ER].z + (tdble)type * ew * tan(curSeg->angle[TR_XE]);
./src/modules/track/track4.cpp:		    curSide->vertex[TR_SR].z = curSide->vertex[TR_SL].z - (tdble)type * sw * tan(curSeg->angle[TR_XS]);
./src/modules/track/track4.cpp:		    z = curSide->vertex[TR_ER].z = curSide->vertex[TR_EL].z - (tdble)type * ew * tan(curSeg->angle[TR_XE]);
./src/modules/track/track4.cpp:		    curSide->vertex[TR_SL].z = curSide->vertex[TR_SR].z + (tdble)type * sw * tan(curSeg->angle[TR_XS]);
./src/modules/track/track4.cpp:		    z = curSide->vertex[TR_EL].z = curSide->vertex[TR_ER].z + (tdble)type * ew * tan(curSeg->angle[TR_XE]);
./src/modules/track/track4.cpp:		    curSide->vertex[TR_SR].z = curSide->vertex[TR_SL].z - (tdble)type * sw * tan(curSeg->angle[TR_XS]);
./src/modules/track/track4.cpp:		    z = curSide->vertex[TR_ER].z = curSide->vertex[TR_EL].z - (tdble)type * ew * tan(curSeg->angle[TR_XE]);
./src/modules/track/track4.cpp:		    curSide->vertex[TR_SL].z = curSide->vertex[TR_SR].z + (tdble)type * sw * tan(curSeg->angle[TR_XS]);
./src/modules/track/track4.cpp:		    z = curSide->vertex[TR_EL].z = curSide->vertex[TR_ER].z + (tdble)type * ew * tan(curSeg->angle[TR_XE]);
./src/modules/track/track4.cpp:		    curSide->vertex[TR_SR].z = curSide->vertex[TR_SL].z - (tdble)type * sw * tan(curSeg->angle[TR_XS]);
./src/modules/track/track4.cpp:		    z = curSide->vertex[TR_ER].z = curSide->vertex[TR_EL].z - (tdble)type * ew * tan(curSeg->angle[TR_XE]);
./src/modules/track/track4.cpp:    tdble	radius, radiusend = 0, dradius;
./src/modules/track/track4.cpp:    tdble	innerradius;
./src/modules/track/track4.cpp:    tdble	arc;
./src/modules/track/track4.cpp:    tdble	length;
./src/modules/track/track4.cpp:    tdble	alf;
./src/modules/track/track4.cpp:    tdble	xr, yr, newxr, newyr;
./src/modules/track/track4.cpp:    tdble	xl, yl, newxl, newyl;
./src/modules/track/track4.cpp:    tdble	cenx, ceny;
./src/modules/track/track4.cpp:    tdble	width, wi2;
./src/modules/track/track4.cpp:    tdble	x1, x2, y1, y2;
./src/modules/track/track4.cpp:    tdble	al, alfl;
./src/modules/track/track4.cpp:    tdble	zsl, zsr, zel, zer, zs, ze;
./src/modules/track/track4.cpp:    tdble	bankings, bankinge, dz, dzl, dzr;
./src/modules/track/track4.cpp:    tdble	etgt, stgt;
./src/modules/track/track4.cpp:    tdble	etgtl, stgtl;
./src/modules/track/track4.cpp:    tdble	etgtr, stgtr;
./src/modules/track/track4.cpp:    tdble	stepslg = 0;
./src/modules/track/track4.cpp:    tdble	totLength;
./src/modules/track/track4.cpp:    tdble	tl, dtl, T1l, T2l;
./src/modules/track/track4.cpp:    tdble	tr, dtr, T1r, T2r;
./src/modules/track/track4.cpp:    tdble	curzel, curzer, curArc, curLength, curzsl, curzsr;
./src/modules/track/track4.cpp:    tdble	grade;
./src/modules/track/track4.cpp:	GfParmSetCurNum(TrackHandle, path, TRK_ATT_ID, (char*)NULL, (tdble)curindex);
./src/modules/track/track4.cpp:	dtl = 1.0 / (tdble)steps;
./src/modules/track/track4.cpp:	dtr = 1.0 / (tdble)steps;
./src/modules/track/track4.cpp:	curArc = arc / (tdble)steps;
./src/modules/track/track4.cpp:	curLength = length / (tdble)steps;
./src/modules/track/track4.cpp:	dradius = (radiusend - radius) / (tdble)steps;
./src/modules/track/track4.cpp:		dradius = (radiusend - radius) / (tdble)(steps - 1);
./src/modules/track/track4.cpp:		tdble tmpAngle = 0;
./src/modules/track/track4.cpp:		tdble tmpRadius = radius;
./src/modules/track/track4.cpp:    tdble		offset = 0;
./src/modules/track/track4.cpp:    tdble		toStart;
./src/modules/track/trackutil.cpp:TrackLocal2Global(tTrkLocPos *p, tdble *X, tdble *Y)
./src/modules/track/trackutil.cpp:TrackGlobal2Local(tTrackSeg *segment, tdble X, tdble Y, tTrkLocPos *p, int type)
./src/modules/track/trackutil.cpp:tdble
./src/modules/track/trackutil.cpp:tdble
./src/modules/track/trackutil.cpp:TrackHeightG(tTrackSeg *seg, tdble x, tdble y)
./src/modules/track/trackutil.cpp:TrackSideNormal(tTrackSeg *seg, tdble x, tdble y, int side, t3Dd *norm)
./src/modules/track/trackutil.cpp:tdble
./src/modules/track/trackutil.cpp:TrackSpline(tdble p0, tdble p1, tdble t0, tdble t1, tdble t)
./src/modules/track/trackutil.cpp:    tdble t2, t3;
./src/modules/track/trackutil.cpp:    tdble h0, h1, h2, h3;
Binary file ./src/modules/track/track3.o matches
Binary file ./src/modules/track/track.so matches
Binary file ./src/modules/track/track4.o matches
./src/modules/track/track2.cpp:static tdble	xmin, xmax, ymin, ymax, zmin, zmax;
./src/modules/track/track2.cpp:static tdble sideEndWidth[2];
./src/modules/track/track2.cpp:static tdble sideStartWidth[2];
./src/modules/track/track2.cpp:    tdble	x, y, z;
./src/modules/track/track2.cpp:    tdble	al, alfl;
./src/modules/track/track2.cpp:    tdble	x1, x2, y1, y2;
./src/modules/track/track2.cpp:    tdble	sw, ew;
./src/modules/track/track2.cpp:    tdble	minWidth;
./src/modules/track/track2.cpp:    tdble	maxWidth;
./src/modules/track/track2.cpp:    tdble	Kew;
./src/modules/track/track2.cpp:	Kew = (ew - sw) / (tdble)steps;
./src/modules/track/track2.cpp:	ew = sw + (tdble)(curStep+1) * Kew;
./src/modules/track/track2.cpp:	sw = sw + (tdble)(curStep) * Kew;
./src/modules/track/track2.cpp:	curSide->angle[TR_XS] = curSeg->angle[TR_XS] * (tdble)type;
./src/modules/track/track2.cpp:	curSide->angle[TR_XE] = curSeg->angle[TR_XE] * (tdble)type;
./src/modules/track/track2.cpp:		curSide->vertex[TR_SL].z = curSide->vertex[TR_SR].z + (tdble)type * sw * tan(curSeg->angle[TR_XS]);
./src/modules/track/track2.cpp:		z = curSide->vertex[TR_EL].z = curSide->vertex[TR_ER].z + (tdble)type * ew * tan(curSeg->angle[TR_XE]);
./src/modules/track/track2.cpp:		curSide->vertex[TR_SR].z = curSide->vertex[TR_SL].z - (tdble)type * sw * tan(curSeg->angle[TR_XS]);
./src/modules/track/track2.cpp:		z = curSide->vertex[TR_ER].z = curSide->vertex[TR_EL].z - (tdble)type * ew * tan(curSeg->angle[TR_XE]);
./src/modules/track/track2.cpp:		curSide->vertex[TR_SL].z = curSide->vertex[TR_SR].z + (tdble)type * sw * tan(curSeg->angle[TR_XS]);
./src/modules/track/track2.cpp:		z = curSide->vertex[TR_EL].z = curSide->vertex[TR_ER].z + (tdble)type * ew * tan(curSeg->angle[TR_XE]);
./src/modules/track/track2.cpp:		curSide->vertex[TR_SR].z = curSide->vertex[TR_SL].z - (tdble)type * sw * tan(curSeg->angle[TR_XS]);
./src/modules/track/track2.cpp:		z = curSide->vertex[TR_ER].z = curSide->vertex[TR_EL].z - (tdble)type * ew * tan(curSeg->angle[TR_XE]);
./src/modules/track/track2.cpp:		curSide->vertex[TR_SL].z = curSide->vertex[TR_SR].z + (tdble)type * sw * tan(curSeg->angle[TR_XS]);
./src/modules/track/track2.cpp:		z = curSide->vertex[TR_EL].z = curSide->vertex[TR_ER].z + (tdble)type * ew * tan(curSeg->angle[TR_XE]);
./src/modules/track/track2.cpp:		curSide->vertex[TR_SR].z = curSide->vertex[TR_SL].z - (tdble)type * sw * tan(curSeg->angle[TR_XS]);
./src/modules/track/track2.cpp:		z = curSide->vertex[TR_ER].z = curSide->vertex[TR_EL].z - (tdble)type * ew * tan(curSeg->angle[TR_XE]);
./src/modules/track/track2.cpp:CreateSegRing(void *TrackHandle, char *section, tTrackSeg **pRoot, tdble *pLength, int *pNseg, tTrackSeg *start, tTrackSeg *end, int ext)
./src/modules/track/track2.cpp:    tdble	radius;
./src/modules/track/track2.cpp:    tdble	innerradius;
./src/modules/track/track2.cpp:    tdble	arc;
./src/modules/track/track2.cpp:    tdble	length;
./src/modules/track/track2.cpp:    tdble	alf;
./src/modules/track/track2.cpp:    tdble	xr, yr, newxr, newyr;
./src/modules/track/track2.cpp:    tdble	xl, yl, newxl, newyl;
./src/modules/track/track2.cpp:    tdble	cenx, ceny;
./src/modules/track/track2.cpp:    tdble	width, wi2;
./src/modules/track/track2.cpp:    tdble	x1, x2, y1, y2;
./src/modules/track/track2.cpp:    tdble	al, alfl;
./src/modules/track/track2.cpp:    tdble	zsl, zsr, zel, zer, zs, ze;
./src/modules/track/track2.cpp:    tdble	bankings, bankinge, dz, dzl, dzr;
./src/modules/track/track2.cpp:    tdble	etgt, stgt;
./src/modules/track/track2.cpp:    tdble	etgtl, stgtl;
./src/modules/track/track2.cpp:    tdble	etgtr, stgtr;
./src/modules/track/track2.cpp:    tdble	kFriction, kRollRes;
./src/modules/track/track2.cpp:    tdble	kRoughness, kRoughWaveLenP, kRoughWaveLen;
./src/modules/track/track2.cpp:    tdble	totLength;
./src/modules/track/track2.cpp:    tdble	tl, dtl, T1l, T2l;
./src/modules/track/track2.cpp:    tdble	tr, dtr, T1r, T2r;
./src/modules/track/track2.cpp:    tdble	curzel, curzer, curArc, curLength, curzsl, curzsr;
./src/modules/track/track2.cpp:    tdble	grade;
./src/modules/track/track2.cpp:	GfParmSetCurNum(TrackHandle, path, TRK_ATT_ID, (char*)NULL, (tdble)curindex);
./src/modules/track/track2.cpp:	dtl = 1.0 / (tdble)steps;
./src/modules/track/track2.cpp:	dtr = 1.0 / (tdble)steps;
./src/modules/track/track2.cpp:	curArc = arc / (tdble)steps;
./src/modules/track/track2.cpp:	curLength = length / (tdble)steps;
./src/modules/track/track2.cpp:	tdble		pitLen;
./src/modules/track/track1.cpp:static tdble	xmin, xmax, ymin, ymax, zmin, zmax;
./src/modules/track/track1.cpp:AddSide(tTrackSeg *curSeg, tdble width, char *material, int side, int type, void *TrackHandle)
./src/modules/track/track1.cpp:    tdble	x, y, z;
./src/modules/track/track1.cpp:    tdble	al, alfl;
./src/modules/track/track1.cpp:    tdble	x1, x2, y1, y2;
./src/modules/track/track1.cpp:    curSide->angle[TR_XS] = curSeg->angle[TR_XS] * (tdble)type;
./src/modules/track/track1.cpp:    curSide->angle[TR_XE] = curSeg->angle[TR_XE] * (tdble)type;
./src/modules/track/track1.cpp:	    curSide->vertex[TR_SL].z = curSide->vertex[TR_SR].z + (tdble)type * width * tan(curSeg->angle[TR_XS]);
./src/modules/track/track1.cpp:	    z = curSide->vertex[TR_EL].z = curSide->vertex[TR_ER].z + (tdble)type * width * tan(curSeg->angle[TR_XE]);
./src/modules/track/track1.cpp:	    curSide->vertex[TR_SR].z = curSide->vertex[TR_SL].z - (tdble)type * width * tan(curSeg->angle[TR_XS]);
./src/modules/track/track1.cpp:	    z = curSide->vertex[TR_ER].z = curSide->vertex[TR_EL].z - (tdble)type * width * tan(curSeg->angle[TR_XE]);
./src/modules/track/track1.cpp:	    curSide->vertex[TR_SL].z = curSide->vertex[TR_SR].z + (tdble)type * width * tan(curSeg->angle[TR_XS]);
./src/modules/track/track1.cpp:	    z = curSide->vertex[TR_EL].z = curSide->vertex[TR_ER].z + (tdble)type * width * tan(curSeg->angle[TR_XE]);
./src/modules/track/track1.cpp:	    curSide->vertex[TR_SR].z = curSide->vertex[TR_SL].z - (tdble)type * width * tan(curSeg->angle[TR_XS]);
./src/modules/track/track1.cpp:	    z = curSide->vertex[TR_ER].z = curSide->vertex[TR_EL].z - (tdble)type * width * tan(curSeg->angle[TR_XE]);
./src/modules/track/track1.cpp:	    curSide->vertex[TR_SL].z = curSide->vertex[TR_SR].z + (tdble)type * width * tan(curSeg->angle[TR_XS]);
./src/modules/track/track1.cpp:	    curSide->vertex[TR_EL].y = curSide->vertex[TR_ER].y + (tdble)type * width * sin(curSide->angle[TR_CS] - curSide->arc);
./src/modules/track/track1.cpp:	    curSide->vertex[TR_SR].z = curSide->vertex[TR_SL].z - (tdble)type * width * tan(curSeg->angle[TR_XS]);
./src/modules/track/track1.cpp:	    z = curSide->vertex[TR_ER].z = curSide->vertex[TR_EL].z - (tdble)type * width * tan(curSeg->angle[TR_XE]);
./src/modules/track/track1.cpp:    tdble	radius;
./src/modules/track/track1.cpp:    tdble	innerradius;
./src/modules/track/track1.cpp:    tdble	arc;
./src/modules/track/track1.cpp:    tdble	length;
./src/modules/track/track1.cpp:    tdble	alf;
./src/modules/track/track1.cpp:    tdble	xr, yr, newxr, newyr;
./src/modules/track/track1.cpp:    tdble	xl, yl, newxl, newyl;
./src/modules/track/track1.cpp:    tdble	cenx, ceny;
./src/modules/track/track1.cpp:    tdble	width, wi2;
./src/modules/track/track1.cpp:    tdble	x1, x2, y1, y2;
./src/modules/track/track1.cpp:    tdble	al, alfl;
./src/modules/track/track1.cpp:    tdble	zsl, zsr, zel, zer, zs, ze;
./src/modules/track/track1.cpp:    tdble	kFriction, kRollRes;
./src/modules/track/track1.cpp:    tdble	kRoughness, kRoughWaveLen;
./src/modules/track/track1.cpp:    tdble	lsw, rsw;
./src/modules/track/track1.cpp:	GfParmSetCurNum(TrackHandle, path, TRK_ATT_ID, (char*)NULL, (tdble)curindex);
Binary file ./src/modules/graphic/ssggraph/PlibSoundInterface.o matches
Binary file ./src/modules/graphic/ssggraph/ssggraph.so matches
Binary file ./src/modules/graphic/ssggraph/grcam.o matches
./src/modules/graphic/ssggraph/grboard.h:    void grDrawGauge(tdble X1, tdble Y1, tdble H, float *clr1, float *clr2, tdble val, char *title);
./src/modules/graphic/ssggraph/grutil.cpp:void  grWriteTime(float *color, int font, int x, int y, tdble sec, int sgn)
Binary file ./src/modules/graphic/ssggraph/grtrackmap.o matches
Binary file ./src/modules/graphic/ssggraph/grsound.o matches
Binary file ./src/modules/graphic/ssggraph/grscreen.o matches
Binary file ./src/modules/graphic/ssggraph/grcar.o matches
Binary file ./src/modules/graphic/ssggraph/grmain.o matches
./src/modules/graphic/ssggraph/grsmoke.cpp:		tdble dt = tmp->smoke->dt;
./src/modules/graphic/ssggraph/grsmoke.cpp:		tdble damp = 0.2f;
./src/modules/graphic/ssggraph/grsmoke.cpp:	tdble val;
./src/modules/graphic/ssggraph/grsmoke.cpp:	tdble spd2;
./src/modules/graphic/ssggraph/grsmoke.cpp:				tdble init_speed;
./src/modules/graphic/ssggraph/grsmoke.cpp:				tdble threshold = 0.1f;
./src/modules/graphic/ssggraph/grsmoke.cpp:				tdble smoke_life_coefficient = 30.0f;
./src/modules/graphic/ssggraph/grsmoke.cpp:				tdble smoke_speed_coefficient = 0.0f;
./src/modules/graphic/ssggraph/grsmoke.cpp:				tdble spd_fx=tanh(0.001f*car->_reaction[i])*smoke_speed_coefficient*sqrt(spd2);
./src/modules/graphic/ssggraph/grsmoke.cpp:					tdble sinCarYaw = sin(car->_yaw);
./src/modules/graphic/ssggraph/grsmoke.cpp:					tdble cosCarYaw = cos(car->_yaw);
./src/modules/graphic/ssggraph/grsmoke.cpp:					tdble stretchX = 0.1f * (spd_fx + stretch_factor * fabs(car->_speed_X));
./src/modules/graphic/ssggraph/grsmoke.cpp:					tdble stretchY = 0.1f * (spd_fx + stretch_factor * fabs(car->_speed_Y));
./src/modules/graphic/ssggraph/grsmoke.cpp:	tdble dist = sqrt(offset[0]*offset[0]
Binary file ./src/modules/graphic/ssggraph/grtexture.o matches
Binary file ./src/modules/graphic/ssggraph/ssggraph.o matches
./src/modules/graphic/ssggraph/grvtxtable.cpp:	tdble ttx = 0;
./src/modules/graphic/ssggraph/grvtxtable.cpp:	tdble tty = 0;
./src/modules/graphic/ssggraph/grvtxtable.cpp:	tdble ttz = 0;
./src/modules/graphic/ssggraph/grvtxtable.cpp:	tdble ttx = 0;
./src/modules/graphic/ssggraph/grvtxtable.cpp:	tdble tty = 0;
./src/modules/graphic/ssggraph/grvtxtable.cpp:	tdble ttz = 0;
./src/modules/graphic/ssggraph/grvtxtable.cpp:		tdble xxx = (grCarInfo[indexCar].px-shad_xmin)/(shad_xmax-shad_xmin);
./src/modules/graphic/ssggraph/grvtxtable.cpp:		tdble yyy = (grCarInfo[indexCar].py-shad_ymin)/(shad_ymax-shad_ymin);
./src/modules/graphic/ssggraph/grscreen.cpp:	GfParmSetNum(grHandle, path, GR_ATT_MAP, NULL, (tdble)viewmode);
./src/modules/graphic/ssggraph/grscreen.cpp:		GfParmSetNum(grHandle, path2, GR_ATT_MAP, NULL, (tdble)viewmode);
./src/modules/graphic/ssggraph/grscreen.cpp:	GfParmSetNum(grHandle, path, GR_ATT_MIRROR, NULL, (tdble)mirrorFlag);
./src/modules/graphic/ssggraph/grscreen.cpp:		GfParmSetNum(grHandle, path2, GR_ATT_MIRROR, NULL, (tdble)mirrorFlag);
./src/modules/graphic/ssggraph/grscreen.cpp:	GfParmSetNum(grHandle, path, GR_ATT_CAM, (char*)NULL, (tdble)curCam->getId());
./src/modules/graphic/ssggraph/grscreen.cpp:	GfParmSetNum(grHandle, path, GR_ATT_CAM_HEAD, (char*)NULL, (tdble)curCamHead);
./src/modules/graphic/ssggraph/grscreen.cpp:		GfParmSetNum(grHandle, path2, GR_ATT_CAM, (char*)NULL, (tdble)curCam->getId());
./src/modules/graphic/ssggraph/grscreen.cpp:		GfParmSetNum(grHandle, path2, GR_ATT_CAM_HEAD, (char*)NULL, (tdble)curCamHead);
./src/modules/graphic/ssggraph/grscreen.cpp:	mirrorFlag	= (int)GfParmGetNum(grHandle, path, GR_ATT_MIRROR, NULL, (tdble)mirrorFlag);
./src/modules/graphic/ssggraph/grscreen.cpp:	curCamHead	= (int)GfParmGetNum(grHandle, path2, GR_ATT_CAM_HEAD, NULL, (tdble)curCamHead);
./src/modules/graphic/ssggraph/grscreen.cpp:	camNum	= (int)GfParmGetNum(grHandle, path2, GR_ATT_CAM, NULL, (tdble)camNum);
./src/modules/graphic/ssggraph/grscreen.cpp:	mirrorFlag	= (int)GfParmGetNum(grHandle, path2, GR_ATT_MIRROR, NULL, (tdble)mirrorFlag);
./src/modules/graphic/ssggraph/grscreen.cpp:		GfParmSetNum(grHandle, path, GR_ATT_CAM, NULL, (tdble)curCam->getId());
./src/modules/graphic/ssggraph/grscreen.cpp:		GfParmSetNum(grHandle, path, GR_ATT_CAM_HEAD, NULL, (tdble)curCamHead);
./src/modules/graphic/ssggraph/grscreen.cpp:	tdble fovFactor;
Binary file ./src/modules/graphic/ssggraph/grskidmarks.o matches
Binary file ./src/modules/graphic/ssggraph/grmultitexstate.o matches
Binary file ./src/modules/graphic/ssggraph/TorcsSound.o matches
Binary file ./src/modules/graphic/ssggraph/grutil.o matches
./src/modules/graphic/ssggraph/grsound.cpp:		tdble rpm_scale;
Binary file ./src/modules/graphic/ssggraph/SoundInterface.o matches
./src/modules/graphic/ssggraph/grcar.h:    tdble		needleXCenter, needleYCenter;
./src/modules/graphic/ssggraph/grcar.h:    tdble		digitXCenter, digitYCenter;
./src/modules/graphic/ssggraph/grcar.h:    tdble		minValue, maxValue;
./src/modules/graphic/ssggraph/grcar.h:    tdble		minAngle, maxAngle;
./src/modules/graphic/ssggraph/grcar.h:    tdble		*monitored;
./src/modules/graphic/ssggraph/grcar.h:    tdble		prevVal;
./src/modules/graphic/ssggraph/grcar.h:    tdble		rawPrev;
./src/modules/graphic/ssggraph/grcar.h:    tdble               distFromStart;
./src/modules/graphic/ssggraph/grcar.h:    tdble               envAngle;
./src/modules/graphic/ssggraph/grcar.h:    tdble               px;
./src/modules/graphic/ssggraph/grcar.h:    tdble               py;
./src/modules/graphic/ssggraph/grcar.h:    tdble               sx;
./src/modules/graphic/ssggraph/grcar.h:    tdble               sy;
./src/modules/graphic/ssggraph/grcar.h:extern tdble grGetDistToStart(tCarElt *car);
./src/modules/graphic/ssggraph/grmain.h:extern tdble grMaxDammage;
./src/modules/graphic/ssggraph/grmain.h:extern tdble grLodFactorValue;
Binary file ./src/modules/graphic/ssggraph/grcarlight.o matches
./src/modules/graphic/ssggraph/grboard.cpp:			GfParmSetNum(grHandle, path, GR_ATT_BOARD, (char*)NULL, (tdble)boardFlag);
./src/modules/graphic/ssggraph/grboard.cpp:			GfParmSetNum(grHandle, path, GR_ATT_COUNTER, (char*)NULL, (tdble)counterFlag);
./src/modules/graphic/ssggraph/grboard.cpp:			GfParmSetNum(grHandle, path, GR_ATT_LEADER, (char*)NULL, (tdble)leaderFlag);
./src/modules/graphic/ssggraph/grboard.cpp:			GfParmSetNum(grHandle, path, GR_ATT_DEBUG, (char*)NULL, (tdble)debugFlag);
./src/modules/graphic/ssggraph/grboard.cpp:			GfParmSetNum(grHandle, path, GR_ATT_GGRAPH, (char*)NULL, (tdble)GFlag);
./src/modules/graphic/ssggraph/grboard.cpp:			GfParmSetNum(grHandle, path, GR_ATT_ARCADE, (char*)NULL, (tdble)arcadeFlag);
./src/modules/graphic/ssggraph/grboard.cpp:	tdble X1, Y1, X2, Y2, xc, yc;
./src/modules/graphic/ssggraph/grboard.cpp:	X1 = (tdble)(Winx + Winw - 100);
./src/modules/graphic/ssggraph/grboard.cpp:	Y1 = (tdble)(Winy + 100);
./src/modules/graphic/ssggraph/grboard.cpp:	xc = (tdble)(Winx + Winw - 30);
./src/modules/graphic/ssggraph/grboard.cpp:	yc = (tdble)(Y1 - 50);
./src/modules/graphic/ssggraph/grboard.cpp:	const tdble THNSS = 2.0f;
./src/modules/graphic/ssggraph/grboard.cpp:cGrBoard::grDrawGauge(tdble X1, tdble Y1, tdble H, float *clr1, float *clr2, tdble val, char *title)
./src/modules/graphic/ssggraph/grboard.cpp:	tdble curH;
./src/modules/graphic/ssggraph/grboard.cpp:	tdble fw = Winw/800.0f;
./src/modules/graphic/ssggraph/grboard.cpp:	grDrawGauge(560.0f*fw, 20.0f*fw, 80.0f, grRed, grGreen, (tdble)(car->_dammage) / grMaxDammage, "D");
./src/modules/graphic/ssggraph/grboard.cpp:	int ledRed    = (int)((car->_enginerpmRedLine * .9 / car->_enginerpmMax) * (tdble)ledNb);
./src/modules/graphic/ssggraph/grboard.cpp:	int ledLit	  = (int)((car->_enginerpm / car->_enginerpmMax) * (tdble)ledNb);
./src/modules/graphic/ssggraph/grboard.cpp:	tdble val;
./src/modules/graphic/ssggraph/grboard.cpp:	grDrawGauge(XM + 15, 20.0, 80.0, grRed, grGreen, (tdble)(car->_dammage) / grMaxDammage, "D");
./src/modules/graphic/ssggraph/grboard.cpp:	tdble		xSz, ySz, xpos, ypos;
./src/modules/graphic/ssggraph/grboard.cpp:	tdble		needlexSz, needleySz;
./src/modules/graphic/ssggraph/grsmoke.h:  tdble vvx, vvy,vvz;
./src/modules/graphic/ssggraph/grsmoke.h:  tdble vexp;
./src/modules/graphic/ssggraph/grscene.h:  tdble FrontLevelGroupGlobal; /* the distance for the end of the front scene */
./src/modules/graphic/ssggraph/grscene.h:  tdble FrontLevelGroup1;      /* the distance for the end of the front scene for group type 1*/
./src/modules/graphic/ssggraph/grscene.h:  tdble FrontLevelGroup2;      /* the distance for the end of the front scene for group type 2*/
./src/modules/graphic/ssggraph/grscene.h:  tdble FrontLevelGroup3;      /* the distance for the end of the front scene for group type 3*/
./src/modules/graphic/ssggraph/grscene.h:  tdble RearLevelGroupGlobal; /* the distance for the end of the front scene */
./src/modules/graphic/ssggraph/grscene.h:  tdble RearLevelGroup1;
./src/modules/graphic/ssggraph/grscene.h:  tdble RearLevelGroup2;
./src/modules/graphic/ssggraph/grscene.h:  tdble RearLevelGroup3;
./src/modules/graphic/ssggraph/grscene.h:  tdble FrontLevelMap1;      /* the distance for the end of the front scene with only one mapping*/
./src/modules/graphic/ssggraph/grscene.h:  tdble FrontLevelMap2;      /* the distance for the end of the front scene with two mapping*/
./src/modules/graphic/ssggraph/grscene.h:  tdble FrontLevelMap3;      /* the distance for the end of the front scene with three mapping*/
./src/modules/graphic/ssggraph/grscene.h:  tdble RearLevelMap1;
./src/modules/graphic/ssggraph/grscene.h:  tdble RearLevelMap2;
./src/modules/graphic/ssggraph/grscene.h:  tdble RearLevelMap3;
./src/modules/graphic/ssggraph/grscene.cpp:	tdble x, y;
./src/modules/graphic/ssggraph/grscene.cpp:	tdble x2, y2, z2;
./src/modules/graphic/ssggraph/grskidmarks.cpp:	tdble skid_sensitivity = 0.75f;
./src/modules/graphic/ssggraph/grskidmarks.cpp:		tdble sling_mud = 1.0f;
./src/modules/graphic/ssggraph/grskidmarks.cpp:			tdble tmp = grCarInfo[car->index].skidmarks->strips[i].smooth_colour[c];
./src/modules/graphic/ssggraph/grskidmarks.cpp:				tdble sling_left = 0.0f;
./src/modules/graphic/ssggraph/grskidmarks.cpp:				tdble sling_right = 0.0f;                
./src/modules/graphic/ssggraph/grskidmarks.cpp:                tdble z_adjust = 0.95;
./src/modules/graphic/ssggraph/grskidmarks.cpp:                tdble contact_z = car->priv.wheel[i].relPos.z - car->_wheelRadius(i)*z_adjust; 
./src/modules/graphic/ssggraph/grcam.h:void grCamCreateSceneCameraList(class cGrScreen *myscreen, tGrCamHead *cams, tdble fovFactor);
Binary file ./src/modules/graphic/ssggraph/OpenalSoundInterface.o matches
Binary file ./src/modules/graphic/ssggraph/grboard.o matches
./src/modules/graphic/ssggraph/grcar.cpp:	tdble	curAngle = 0.0;
./src/modules/graphic/ssggraph/grcar.cpp:#define BRK_ANGLE	(2.0 * M_PI / (tdble)BRK_BRANCH)
./src/modules/graphic/ssggraph/grcar.cpp:	tdble hubRadius;
./src/modules/graphic/ssggraph/grcar.cpp:		tdble sigma = sgLengthVec3 (force);
./src/modules/graphic/ssggraph/grcar.cpp:		tdble invSigma = 5.0;
./src/modules/graphic/ssggraph/grcar.cpp:			tdble r =  sgDistanceSquaredVec3 (poc, v[i]);
./src/modules/graphic/ssggraph/grcar.cpp:			tdble f = exp(-r*invSigma)*5.0;
./src/modules/graphic/ssggraph/grcar.cpp:tdble grGetDistToStart(tCarElt *car)
./src/modules/graphic/ssggraph/grcar.cpp:	tdble lg;
./src/modules/graphic/ssggraph/grcam.cpp:    tdble	dx, dy, dz, dd;
./src/modules/graphic/ssggraph/grcam.cpp:    GfParmSetNum(grHandle, path, buf, (char*)NULL, (tdble)fovy);
./src/modules/graphic/ssggraph/grcam.cpp:    tdble PreA;
./src/modules/graphic/ssggraph/grcam.cpp:	tdble A;
./src/modules/graphic/ssggraph/grcam.cpp:	tdble CosA;
./src/modules/graphic/ssggraph/grcam.cpp:	tdble SinA;
./src/modules/graphic/ssggraph/grcam.cpp:	tdble x;
./src/modules/graphic/ssggraph/grcam.cpp:	tdble y;
./src/modules/graphic/ssggraph/grcam.cpp:    tdble PreA;
./src/modules/graphic/ssggraph/grcam.cpp:	tdble A;
./src/modules/graphic/ssggraph/grcam.cpp:	tdble CosA;
./src/modules/graphic/ssggraph/grcam.cpp:	tdble SinA;
./src/modules/graphic/ssggraph/grcam.cpp:	tdble x;
./src/modules/graphic/ssggraph/grcam.cpp:	tdble y;
./src/modules/graphic/ssggraph/grcam.cpp:	tdble CosA = cos(car->_yaw);
./src/modules/graphic/ssggraph/grcam.cpp:	tdble SinA = sin(car->_yaw);
./src/modules/graphic/ssggraph/grcam.cpp:	tdble x = car->_pos_X + dist * CosA;
./src/modules/graphic/ssggraph/grcam.cpp:	tdble y = car->_pos_Y + dist * SinA;
./src/modules/graphic/ssggraph/grcam.cpp:	tdble x = car->_pos_X + distx;
./src/modules/graphic/ssggraph/grcam.cpp:	tdble y = car->_pos_Y + disty;
./src/modules/graphic/ssggraph/grcam.cpp:	tdble z = car->_pos_Z + distz;
./src/modules/graphic/ssggraph/grcam.cpp:	tdble x = car->_pos_X;
./src/modules/graphic/ssggraph/grcam.cpp:	tdble y = car->_pos_Y;
./src/modules/graphic/ssggraph/grcam.cpp:	tdble z = car->_pos_Z + distz;
./src/modules/graphic/ssggraph/grcam.cpp:	tdble	dx, dy, dz, dd;
./src/modules/graphic/ssggraph/grcam.cpp:	tdble	dx, dy, dz, dd;
./src/modules/graphic/ssggraph/grcam.cpp:static tdble
./src/modules/graphic/ssggraph/grcam.cpp:    tdble	lg;
./src/modules/graphic/ssggraph/grcam.cpp:    tdble  proximityThld;
./src/modules/graphic/ssggraph/grcam.cpp:		tdble dist, fs;
./src/modules/graphic/ssggraph/grcam.cpp:			tdble fs2 = GetDistToStart(car2);
./src/modules/graphic/ssggraph/grcam.cpp:			tdble d = fabs(fs2 - fs);
./src/modules/graphic/ssggraph/grcam.cpp:grCamCreateSceneCameraList(class cGrScreen *myscreen, tGrCamHead *cams, tdble fovFactor)
Binary file ./src/modules/graphic/ssggraph/grscene.o matches
./src/modules/graphic/ssggraph/grmain.cpp:tdble grMaxDammage = 10000.0;
./src/modules/graphic/ssggraph/grmain.cpp:tdble grLodFactorValue = 1.0;
./src/modules/graphic/ssggraph/grmain.cpp:	grFps = (tdble)nFrame / (grCurTime - OldTime);
./src/modules/graphic/ssggraph/grmain.cpp:    grMaxDammage = (tdble)s->_maxDammage;
Binary file ./src/modules/graphic/ssggraph/grsmoke.o matches
Binary file ./src/modules/graphic/ssggraph/grloadac.o matches
./src/modules/graphic/ssggraph/CarSoundData.cpp:        tdble roughness = 0.0f;
./src/modules/graphic/ssggraph/CarSoundData.cpp:        tdble roughnessFreq = 1.0f;
./src/modules/graphic/ssggraph/CarSoundData.cpp:        tdble az = car->_yaw;
./src/modules/graphic/ssggraph/CarSoundData.cpp:        tdble Sinz = sin(az);
./src/modules/graphic/ssggraph/CarSoundData.cpp:        tdble Cosz = cos(az);
./src/modules/graphic/ssggraph/CarSoundData.cpp:        tdble x = car->priv.wheel[i].relPos.x;
./src/modules/graphic/ssggraph/CarSoundData.cpp:        tdble y = car->priv.wheel[i].relPos.y;
./src/modules/graphic/ssggraph/CarSoundData.cpp:        tdble dx = x * Cosz - y * Sinz;
./src/modules/graphic/ssggraph/CarSoundData.cpp:        tdble dy = x * Sinz + y * Cosz;
./src/modules/graphic/ssggraph/CarSoundData.cpp:        tdble dux = -car->_yaw_rate * y;
./src/modules/graphic/ssggraph/CarSoundData.cpp:        tdble duy = car->_yaw_rate * x;
./src/modules/graphic/ssggraph/grutil.h:extern void grWriteTime(float *color, int font, int x, int y, tdble sec, int sgn);
Binary file ./src/modules/graphic/ssggraph/CarSoundData.o matches
Binary file ./src/modules/graphic/ssggraph/grvtxtable.o matches
./src/modules/simu/simuv2/wheel.cpp:	tdble rimdiam, tirewidth, tireratio, pressure;
./src/modules/simu/simuv2/wheel.cpp:	tdble x0, Ca, RFactor, EFactor, patchLen;
./src/modules/simu/simuv2/wheel.cpp:	tdble Zroad;
./src/modules/simu/simuv2/wheel.cpp:	tdble prexwheel = wheel->susp.x / wheel->susp.spring.bellcrank;
./src/modules/simu/simuv2/wheel.cpp:	tdble new_susp_x= prexwheel - wheel->rel_vel * SimDeltaTime;
./src/modules/simu/simuv2/wheel.cpp:    tdble max_extend =  wheel->pos.z - Zroad;
./src/modules/simu/simuv2/wheel.cpp:	tdble prex = wheel->susp.x;
./src/modules/simu/simuv2/wheel.cpp:	tdble axleFz = wheel->axleFz;
./src/modules/simu/simuv2/wheel.cpp:	tdble vt, v, v2, wrl; // wheel related velocity
./src/modules/simu/simuv2/wheel.cpp:	tdble Fn, Ft;
./src/modules/simu/simuv2/wheel.cpp:	tdble waz;
./src/modules/simu/simuv2/wheel.cpp:	tdble CosA, SinA;
./src/modules/simu/simuv2/wheel.cpp:	tdble s, sa, sx, sy; // slip vector
./src/modules/simu/simuv2/wheel.cpp:	tdble stmp, F, Bx;
./src/modules/simu/simuv2/wheel.cpp:	tdble mu;
./src/modules/simu/simuv2/wheel.cpp:	tdble reaction_force = 0.0f;
./src/modules/simu/simuv2/wheel.cpp:	tdble BrTq;		// brake torque
./src/modules/simu/simuv2/wheel.cpp:	tdble ndot;		// rotation acceleration
./src/modules/simu/simuv2/wheel.cpp:	tdble I;
./src/modules/simu/simuv2/steer.cpp:	tdble steer, steer2;
./src/modules/simu/simuv2/steer.cpp:	tdble stdelta;
./src/modules/simu/simuv2/steer.cpp:	tdble tanSteer;
./src/modules/simu/simuv2/susp.h:    tdble C1, b1, v1; /* coefs for slow */
./src/modules/simu/simuv2/susp.h:    tdble C2, b2;     /* coefs for fast */
./src/modules/simu/simuv2/susp.h:    tdble K;          /* spring coef */
./src/modules/simu/simuv2/susp.h:    tdble F0;         /* initial force */
./src/modules/simu/simuv2/susp.h:    tdble x0;         /* initial suspension travel */
./src/modules/simu/simuv2/susp.h:    tdble xMax;       /* maxi suspension travel */
./src/modules/simu/simuv2/susp.h:    tdble bellcrank;  /* ratio of movement between wheel and suspension */
./src/modules/simu/simuv2/susp.h:    tdble packers;     /* packer size (min susp. travel) */
./src/modules/simu/simuv2/susp.h:    tdble x; /* suspension travel */
./src/modules/simu/simuv2/susp.h:    tdble v; /* suspension travel speed */
./src/modules/simu/simuv2/susp.h:    tdble force;        /* generated force */
./src/modules/simu/simuv2/axle.h:    tdble xpos;
./src/modules/simu/simuv2/axle.h:    tdble	wheight0;
./src/modules/simu/simuv2/axle.h:    tdble	force[2]; /* right and left */
./src/modules/simu/simuv2/axle.h:    tdble	I;	/* including differential inertia but not wheels */
./src/modules/simu/simuv2/car.cpp:const tdble aMax = 0.35f; /*  */
./src/modules/simu/simuv2/car.cpp:	tdble	k;
./src/modules/simu/simuv2/car.cpp:	tdble	w;
./src/modules/simu/simuv2/car.cpp:	tdble	gcfrl, gcrrl, gcfr;
./src/modules/simu/simuv2/car.cpp:	tdble	wf0, wr0;
./src/modules/simu/simuv2/car.cpp:	tdble	overallwidth;
./src/modules/simu/simuv2/car.cpp:	tdble	m, w, minv;
./src/modules/simu/simuv2/car.cpp:	tdble	SinTheta;
./src/modules/simu/simuv2/car.cpp:	tdble	Cosz, Sinz;
./src/modules/simu/simuv2/car.cpp:	tdble	v, R, Rv, Rm, Rx, Ry;
./src/modules/simu/simuv2/car.cpp:	tdble	Cosz, Sinz;
./src/modules/simu/simuv2/car.cpp:	tdble	mass;
./src/modules/simu/simuv2/car.cpp:	tdble vx;
./src/modules/simu/simuv2/car.cpp:	tdble vy;
./src/modules/simu/simuv2/car.cpp:	tdble Cosz, Sinz;
./src/modules/simu/simuv2/car.cpp:		tdble x = car->wheel[i].staticPos.x;
./src/modules/simu/simuv2/car.cpp:		tdble y = car->wheel[i].staticPos.y;
./src/modules/simu/simuv2/car.cpp:		tdble dx = x * Cosz - y * Sinz;
./src/modules/simu/simuv2/car.cpp:		tdble dy = x * Sinz + y * Cosz;
./src/modules/simu/simuv2/car.cpp:	tdble vx, vy;
./src/modules/simu/simuv2/car.cpp:	tdble accx, accy;
./src/modules/simu/simuv2/car.cpp:	tdble Cosz = car->Cosz;
./src/modules/simu/simuv2/car.cpp:	tdble Sinz = car->Sinz;
./src/modules/simu/simuv2/car.cpp:	tdble vx = car->DynGCg.vel.x;
./src/modules/simu/simuv2/car.cpp:	tdble vy = car->DynGCg.vel.y;
./src/modules/simu/simuv2/car.cpp:		tdble x = car->corner[i].pos.x + car->statGC.x;
./src/modules/simu/simuv2/car.cpp:		tdble y = car->corner[i].pos.y + car->statGC.y;
./src/modules/simu/simuv2/car.cpp:		tdble dx = x * Cosz - y * Sinz;
./src/modules/simu/simuv2/car.cpp:		tdble dy = x * Sinz + y * Cosz;
./src/modules/simu/simuv2/car.cpp:	tdble Fzf, Fzr;
./src/modules/simu/simuv2/collide.cpp:	tdble dotProd;
./src/modules/simu/simuv2/collide.cpp:const tdble BorderFriction = 0.00;
./src/modules/simu/simuv2/collide.cpp:	tdble initDotProd;
./src/modules/simu/simuv2/collide.cpp:	tdble dotProd, cx, cy, dotprod2;
./src/modules/simu/simuv2/collide.cpp:	tdble dmg;
./src/modules/simu/simuv2/collide.cpp:		tdble toSide;
./src/modules/simu/simuv2/collide.cpp:		const tdble& nx = curBarrier->normal.x;
./src/modules/simu/simuv2/collide.cpp:		const tdble& ny = curBarrier->normal.y;
./src/modules/simu/simuv2/collide.cpp:		tdble absvel = MAX(1.0, sqrt(car->DynGCg.vel.x*car->DynGCg.vel.x + car->DynGCg.vel.y*car->DynGCg.vel.y));
./src/modules/simu/simuv2/collide.cpp:		tdble GCgnormvel = car->DynGCg.vel.x*nx + car->DynGCg.vel.y*ny;
./src/modules/simu/simuv2/collide.cpp:		tdble cosa = GCgnormvel/absvel;
./src/modules/simu/simuv2/collide.cpp:		tdble dmgDotProd = GCgnormvel*cosa;
./src/modules/simu/simuv2/collide.cpp:		static tdble VELSCALE = 10.0f;
./src/modules/simu/simuv2/collide.cpp:		static tdble VELMAX = 6.0f;
./src/modules/simu/simuv2/collide.cpp:		tdble damFactor, atmp;
./src/modules/simu/simuv2/collide.cpp:	tdble damFactor, atmp;
./src/modules/simu/simuv2/brake.cpp:    tdble diam, area, mu;
./src/modules/simu/simuv2/brake.cpp:    tdble	ctrl = car->ctrl->brakeCmd;
Binary file ./src/modules/simu/simuv2/collide.o matches
Binary file ./src/modules/simu/simuv2/simu.o matches
./src/modules/simu/simuv2/differential.h:    tdble	spinVel;
./src/modules/simu/simuv2/differential.h:    tdble	Tq;
./src/modules/simu/simuv2/differential.h:    tdble	brkTq;
./src/modules/simu/simuv2/differential.h:    tdble	I;
./src/modules/simu/simuv2/differential.h:    tdble	ratio;
./src/modules/simu/simuv2/differential.h:    tdble	I;
./src/modules/simu/simuv2/differential.h:    tdble	efficiency;
./src/modules/simu/simuv2/differential.h:    tdble	bias;
./src/modules/simu/simuv2/differential.h:    tdble	dTqMin;
./src/modules/simu/simuv2/differential.h:    tdble	dTqMax;
./src/modules/simu/simuv2/differential.h:    tdble	dSlipMax;
./src/modules/simu/simuv2/differential.h:    tdble	lockInputTq;
./src/modules/simu/simuv2/differential.h:    tdble	viscosity;
./src/modules/simu/simuv2/differential.h:    tdble	viscomax;
./src/modules/simu/simuv2/engine.h:    tdble rads;
./src/modules/simu/simuv2/engine.h:    tdble a;
./src/modules/simu/simuv2/engine.h:    tdble b;
./src/modules/simu/simuv2/engine.h:    tdble		maxTq;
./src/modules/simu/simuv2/engine.h:	tdble       maxPw;
./src/modules/simu/simuv2/engine.h:	tdble       rpmMaxPw;
./src/modules/simu/simuv2/engine.h:	tdble       TqAtMaxPw;
./src/modules/simu/simuv2/engine.h:	tdble       rpmMaxTq;
./src/modules/simu/simuv2/engine.h:    tdble		revsLimiter;
./src/modules/simu/simuv2/engine.h:    tdble		revsMax;
./src/modules/simu/simuv2/engine.h:    tdble		tickover;
./src/modules/simu/simuv2/engine.h:    tdble		I;
./src/modules/simu/simuv2/engine.h:    tdble		rads;   /* revs in rad/s ... */
./src/modules/simu/simuv2/engine.h:    tdble		Tq;	/* output torque */
./src/modules/simu/simuv2/engine.h:    tdble		fuelcons;
./src/modules/simu/simuv2/engine.h:    tdble		brakeCoeff;
./src/modules/simu/simuv2/engine.h:	tdble       pressure;
./src/modules/simu/simuv2/engine.h:	tdble       exhaust_pressure;
./src/modules/simu/simuv2/engine.h:	tdble       exhaust_refract;
./src/modules/simu/simuv2/sim.h:extern void SimSuspConfig(void *hdle, char *section, tSuspension *susp, tdble F0, tdble X0);
./src/modules/simu/simuv2/sim.h:extern tdble SimEngineUpdateRpm(tCar *car, tdble axleRpm);
./src/modules/simu/simuv2/sim.h:extern tdble SimDeltaTime;
./src/modules/simu/simuv2/sim.h:extern tdble simDammageFactor[];
./src/modules/simu/simuv2/sim.h:extern tdble simSkidFactor[];
./src/modules/simu/simuv2/brake.h:    tdble	pressure;
./src/modules/simu/simuv2/brake.h:    tdble	Tq;
./src/modules/simu/simuv2/brake.h:    tdble	coeff;
./src/modules/simu/simuv2/brake.h:    tdble	I;
./src/modules/simu/simuv2/brake.h:    tdble	radius;
./src/modules/simu/simuv2/brake.h:    tdble	temp;
./src/modules/simu/simuv2/brake.h:    tdble	rep;	/* front/rear repartition */ 
./src/modules/simu/simuv2/brake.h:    tdble	coeff;
./src/modules/simu/simuv2/simu.cpp:tdble SimDeltaTime;
./src/modules/simu/simuv2/simu.cpp:	tdble travelTime;
./src/modules/simu/simuv2/simu.cpp:	tdble dang;
./src/modules/simu/simuv2/simu.cpp:	static tdble PULL_Z_OFFSET = 3.0;
./src/modules/simu/simuv2/simu.cpp:	static tdble PULL_SPD = 0.5;
Binary file ./src/modules/simu/simuv2/wheel.o matches
Binary file ./src/modules/simu/simuv2/simuv2.so matches
Binary file ./src/modules/simu/simuv2/car.o matches
./src/modules/simu/simuv2/aero.h:    tdble	drag;		/* drag force along car x axis */
./src/modules/simu/simuv2/aero.h:    tdble	lift[2];	/* front & rear lift force along car z axis */
./src/modules/simu/simuv2/aero.h:    tdble	SCx2;
./src/modules/simu/simuv2/aero.h:    tdble	Clift[2];	/* front & rear lift due to body not wings */
./src/modules/simu/simuv2/aero.h:    tdble	Cd;		/* for aspiration */
./src/modules/simu/simuv2/aero.h:    tdble	Kx;
./src/modules/simu/simuv2/aero.h:    tdble	Kz;
./src/modules/simu/simuv2/aero.h:	tdble	angle;
./src/modules/simu/simuv2/transmission.cpp:	tdble		clutchI;
./src/modules/simu/simuv2/transmission.cpp:	tdble		gRatio, fRatio, gEff, fEff;
./src/modules/simu/simuv2/transmission.cpp:	tdble		gearI;
./src/modules/simu/simuv2/transmission.cpp:	tdble transfer = MIN(clutch->transferValue * 3.0, 1.0);
Binary file ./src/modules/simu/simuv2/axle.o matches
Binary file ./src/modules/simu/simuv2/steer.o matches
./src/modules/simu/simuv2/engine.cpp:	tdble	maxTq;
./src/modules/simu/simuv2/engine.cpp:	tdble	rpmMaxTq = 0;
./src/modules/simu/simuv2/engine.cpp:		tdble rpm;
./src/modules/simu/simuv2/engine.cpp:		tdble tq;
./src/modules/simu/simuv2/engine.cpp:				tdble Tmax = engine->rads * curve->data[i].a + curve->data[i].b;
./src/modules/simu/simuv2/engine.cpp:				tdble EngBrkK = engine->brakeCoeff * (engine->rads - engine->tickover) / (engine->revsMax - engine->tickover);
./src/modules/simu/simuv2/engine.cpp:tdble
./src/modules/simu/simuv2/engine.cpp:SimEngineUpdateRpm(tCar *car, tdble axleRpm)
./src/modules/simu/simuv2/engine.cpp:		tdble dp = engine->pressure;
./src/modules/simu/simuv2/engine.cpp:		tdble rth = urandom();
./src/modules/simu/simuv2/carstruct.h:    tdble	mass;		/* mass with pilot (without fuel) */
./src/modules/simu/simuv2/carstruct.h:    tdble	Minv;		/* 1 / mass with pilot (without fuel) */
./src/modules/simu/simuv2/carstruct.h:    tdble	tank;		/* fuel tank capa */
./src/modules/simu/simuv2/carstruct.h:    tdble	fuel;		/* current fuel load */
./src/modules/simu/simuv2/carstruct.h:    tdble	airSpeed2;	/* current air speed (squared) for aerodynamic forces */
./src/modules/simu/simuv2/carstruct.h:    tdble	Cosz;
./src/modules/simu/simuv2/carstruct.h:    tdble	Sinz;
./src/modules/simu/simuv2/carstruct.h:    tdble	wheelbase;
./src/modules/simu/simuv2/carstruct.h:    tdble	wheeltrack;
./src/modules/simu/simuv2/steer.h:    tdble	steerLock;	/* in rad */
./src/modules/simu/simuv2/steer.h:    tdble	maxSpeed;	/* in rad/s */
./src/modules/simu/simuv2/steer.h:    tdble	steer;		/* current steer value */
./src/modules/simu/simuv2/categories.cpp:tdble simDammageFactor[] = {0.0f, 0.5f, 0.8f, 1.0f, 1.0f};
./src/modules/simu/simuv2/categories.cpp:tdble simSkidFactor[] = {0.40f, 0.35f, 0.3f, 0.0f, 0.0f};
Binary file ./src/modules/simu/simuv2/brake.o matches
Binary file ./src/modules/simu/simuv2/susp.o matches
./src/modules/simu/simuv2/wheel.h:    tdble	rollRes;	/* Rolling Resistance (summed over the car) */
./src/modules/simu/simuv2/wheel.h:    tdble	rideHeight;	/* height of the bottom of the car */
./src/modules/simu/simuv2/wheel.h:    tdble	zRoad;		/* z of the road */
./src/modules/simu/simuv2/wheel.h:    tdble  	driveTq;   	/* engine torque */
./src/modules/simu/simuv2/wheel.h:    tdble	vt;
./src/modules/simu/simuv2/wheel.h:    tdble  	spinTq;		/* spin torque feedback */
./src/modules/simu/simuv2/wheel.h:    tdble  	spinVel;   	/* spin velocity */
./src/modules/simu/simuv2/wheel.h:    tdble  	prespinVel;   	/* spin velocity */
./src/modules/simu/simuv2/wheel.h:    tdble	axleFz;		/* force from axle (anti-roll bar) */
./src/modules/simu/simuv2/wheel.h:    tdble	sa;		/* slip angle */
./src/modules/simu/simuv2/wheel.h:    tdble	sx;		/* longitudinal slip value */
./src/modules/simu/simuv2/wheel.h:    tdble	steer;
./src/modules/simu/simuv2/wheel.h:    tdble	rollCenter;
./src/modules/simu/simuv2/wheel.h:    tdble  	weight0;	/* initial weight on this wheel */
./src/modules/simu/simuv2/wheel.h:    tdble	tireSpringRate;
./src/modules/simu/simuv2/wheel.h:    tdble  	radius;
./src/modules/simu/simuv2/wheel.h:    tdble  	mu;
./src/modules/simu/simuv2/wheel.h:    tdble  	I;       	/* I = inertial moment of the wheel */
./src/modules/simu/simuv2/wheel.h:    tdble  	curI;       	/* Current inertia for the wheel (including transmission) */
./src/modules/simu/simuv2/wheel.h:    tdble	mfC;		/* Magic Formula C coeff */
./src/modules/simu/simuv2/wheel.h:    tdble	mfB;		/* Magic Formula B coeff */
./src/modules/simu/simuv2/wheel.h:    tdble	mfE;		/* Magic Formula E coeff */
./src/modules/simu/simuv2/wheel.h:    tdble	lfMax;		/* Load factor */
./src/modules/simu/simuv2/wheel.h:    tdble	lfMin;		/* Load factor */
./src/modules/simu/simuv2/wheel.h:    tdble	lfK;		/* Load factor */
./src/modules/simu/simuv2/wheel.h:    tdble	opLoad;		/* Operating load */
./src/modules/simu/simuv2/wheel.h:    tdble	mass;		/* total wheel mass (incl. brake) (unsprung mass) */
./src/modules/simu/simuv2/wheel.h:    tdble	camber;		/* camber, negative toward exterior on both sides */
./src/modules/simu/simuv2/wheel.h:    tdble	pressure;	/* tire pressure */
./src/modules/simu/simuv2/wheel.h:	tdble   rel_vel;    /* relative velocity - used for realstic suspension movement*/
./src/modules/simu/simuv2/wheel.h:    tdble	preFn, preFt;
Binary file ./src/modules/simu/simuv2/engine.o matches
./src/modules/simu/simuv2/aero.cpp:    tdble Cx, FrntArea;
./src/modules/simu/simuv2/aero.cpp:    tdble	hm;
./src/modules/simu/simuv2/aero.cpp:    tdble	x, y;
./src/modules/simu/simuv2/aero.cpp:    tdble	yaw, otherYaw, airSpeed, tmpas, spdang, tmpsdpang, dyaw;
./src/modules/simu/simuv2/aero.cpp:    tdble	dragK = 1.0;
./src/modules/simu/simuv2/aero.cpp:    tdble v2 = car->airSpeed2;
./src/modules/simu/simuv2/aero.cpp:    car->aero.drag = -SIGN(car->DynGC.vel.x) * car->aero.SCx2 * v2 * (1.0 + (tdble)car->dammage / 10000.0) * dragK * dragK;
./src/modules/simu/simuv2/aero.cpp:    tdble area;
./src/modules/simu/simuv2/aero.cpp:    tdble vt2 = car->airSpeed2;
./src/modules/simu/simuv2/aero.cpp:	tdble aoa = atan2(car->DynGC.vel.z, car->DynGC.vel.x) + car->DynGCg.pos.ay;
./src/modules/simu/simuv2/aero.cpp:	tdble sinaoa = sin(aoa);
./src/modules/simu/simuv2/aero.cpp:		wing->forces.x = wing->Kx * vt2 * (1.0 + (tdble)car->dammage / 10000.0) * sinaoa;
Binary file ./src/modules/simu/simuv2/aero.o matches
./src/modules/simu/simuv2/axle.cpp:	tdble	rollCenter;
./src/modules/simu/simuv2/axle.cpp:	tdble str, stl, sgn;
./src/modules/simu/simuv2/axle.cpp:	tdble f;
Binary file ./src/modules/simu/simuv2/differential.o matches
./src/modules/simu/simuv2/transmission.h:    tdble	timeToRelease;	/* remaining time before releasing the clutch pedal */
./src/modules/simu/simuv2/transmission.h:    tdble	releaseTime;	/* time needed for releasing the clutch pedal */
./src/modules/simu/simuv2/transmission.h:    tdble	transferValue;	/* 1.0 -> released, 0.0 -> applied */
./src/modules/simu/simuv2/transmission.h:    tdble	overallRatio[MAX_GEARS];	/* including final drive ratio */
./src/modules/simu/simuv2/transmission.h:    tdble	driveI[MAX_GEARS];		/* Inertia (including engine) */
./src/modules/simu/simuv2/transmission.h:    tdble	freeI[MAX_GEARS];		/* Inertia when clutch is applied (wheels side) */
./src/modules/simu/simuv2/transmission.h:    tdble	gearEff[MAX_GEARS];		/* Gear Efficiency */
./src/modules/simu/simuv2/transmission.h:    tdble	curOverallRatio;
./src/modules/simu/simuv2/transmission.h:    tdble	curI;
Binary file ./src/modules/simu/simuv2/categories.o matches
./src/modules/simu/simuv2/susp.cpp:static tdble damperForce(tSuspension *susp)
./src/modules/simu/simuv2/susp.cpp:	tdble     f;
./src/modules/simu/simuv2/susp.cpp:	tdble     av;
./src/modules/simu/simuv2/susp.cpp:	tdble     v;
./src/modules/simu/simuv2/susp.cpp:static tdble springForce(tSuspension *susp)
./src/modules/simu/simuv2/susp.cpp:	tdble f;
./src/modules/simu/simuv2/susp.cpp:void SimSuspConfig(void *hdle, char *section, tSuspension *susp, tdble F0, tdble X0)
./src/modules/simu/simuv2/differential.cpp:	tdble	DrTq;
./src/modules/simu/simuv2/differential.cpp:	tdble	ndot;
./src/modules/simu/simuv2/differential.cpp:	tdble	spinVel;
./src/modules/simu/simuv2/differential.cpp:	tdble	BrTq;
./src/modules/simu/simuv2/differential.cpp:	tdble	engineReaction;
./src/modules/simu/simuv2/differential.cpp:	tdble	I;
./src/modules/simu/simuv2/differential.cpp:	tdble	inTq, brkTq;
./src/modules/simu/simuv2/differential.cpp:	tdble	DrTq, DrTq0, DrTq1;
./src/modules/simu/simuv2/differential.cpp:	tdble	ndot0, ndot1;
./src/modules/simu/simuv2/differential.cpp:	tdble	spinVel0, spinVel1;
./src/modules/simu/simuv2/differential.cpp:	tdble	inTq0, inTq1;
./src/modules/simu/simuv2/differential.cpp:	tdble	spdRatio, spdRatioMax;
./src/modules/simu/simuv2/differential.cpp:	tdble	deltaSpd, deltaTq;
./src/modules/simu/simuv2/differential.cpp:	tdble	BrTq;
./src/modules/simu/simuv2/differential.cpp:	tdble	engineReaction;
./src/modules/simu/simuv2/differential.cpp:	tdble	meanv;
Binary file ./src/modules/simu/simuv2/simuitf.o matches
Binary file ./src/modules/simu/simuv2/transmission.o matches
Binary file ./src/modules/simu/simuv2/.simu.cpp.swo matches
Binary file ./src/modules/telemetry/telemetry.o matches
./src/modules/telemetry/tlm.h:extern void TlmInit(tdble ymin, tdble ymax);
./src/modules/telemetry/tlm.h:extern void TlmNewChannel(const char *name, tdble *var, tdble min, tdble max);
Binary file ./src/modules/telemetry/telemetry.so matches
Binary file ./src/modules/telemetry/telemetryitf.o matches
./src/modules/telemetry/telemetry.cpp:    tdble		*val;	/* monitored value */
./src/modules/telemetry/telemetry.cpp:    tdble		scale;
./src/modules/telemetry/telemetry.cpp:    tdble	ymin;
./src/modules/telemetry/telemetry.cpp:    tdble	ymax;
./src/modules/telemetry/telemetry.cpp:TlmInit(tdble ymin, tdble ymax)
./src/modules/telemetry/telemetry.cpp:TlmNewChannel(const char *name, tdble *var, tdble min, tdble max)
./src/interfaces/track.h:    tdble kFriction;		/**< Coefficient of friction */
./src/interfaces/track.h:    tdble kRebound;		/**< Coefficient of energy restitution */
./src/interfaces/track.h:    tdble kRollRes;		/**< Rolling resistance */
./src/interfaces/track.h:    tdble kRoughness;		/**< Roughtness in m of the surface (wave height) */
./src/interfaces/track.h:    tdble kRoughWaveLen;	/**< Wave length in m of the surface */
./src/interfaces/track.h:    tdble kDammage;		/**< Dammages in case of collision */
./src/interfaces/track.h:    tdble		width;	/**< Barrier width */
./src/interfaces/track.h:    tdble		height;	/**< Barrier height */
./src/interfaces/track.h:    tdble length;		/**< Length in meters of the middle of the track */
./src/interfaces/track.h:    tdble width;		/**< Width of the segment (if constant width) */
./src/interfaces/track.h:    tdble startWidth;		/**< Width of the beginning of the segment */
./src/interfaces/track.h:    tdble endWidth;		/**< Width of the end of the segment */
./src/interfaces/track.h:    tdble lgfromstart;		/**< Length of begining of segment from starting line */
./src/interfaces/track.h:    tdble radius;		/**< Radius in meters of the middle of the track (>0) */
./src/interfaces/track.h:    tdble radiusr;		/**< Radius in meters of the right side of the track (>0) */
./src/interfaces/track.h:    tdble radiusl;		/**< Radius in meters of the left side of the track (>0) */
./src/interfaces/track.h:    tdble arc;			/**< Arc in rad of the curve (>0) */
./src/interfaces/track.h:    tdble angle[7];		/** Rotation angles of the track in rad anti-clockwise:
./src/interfaces/track.h:    tdble Kzl;		/* long constant */
./src/interfaces/track.h:    tdble Kzw;		/* width constant */
./src/interfaces/track.h:    tdble	Kyl;		/* find y along x */
./src/interfaces/track.h:    tdble	height;		/**< Max height for curbs */
./src/interfaces/track.h:    tdble DoVfactor;            /* the factor to use in calculating DoV for this Seg */
./src/interfaces/track.h:    tdble	toStart;	/**< Distance to start of segment (or arc if turn) */
./src/interfaces/track.h:    tdble	toRight;	/**< Distance to right side of segment (+ to inside of track - to outside) */
./src/interfaces/track.h:    tdble	toMiddle;	/**< Distance to middle of segment (+ to left - to right) */
./src/interfaces/track.h:    tdble	toLeft;		/**< Distance to left side of segment (+ to inside of track - to outside) */
./src/interfaces/track.h:	tdble lmin;	/**< Pitting area length min */
./src/interfaces/track.h:	tdble lmax;	/**< Pitting area length max */
./src/interfaces/track.h:	tdble len;					/**< Lenght of each pit stop */
./src/interfaces/track.h:	tdble width;				/**< Width of each pit stop */
./src/interfaces/track.h:	tdble speedLimit;			/**< Speed limit between pitStart and pitEnd */
./src/interfaces/track.h:    tdble	height;
./src/interfaces/track.h:    tdble	width;
./src/interfaces/track.h:    tdble	hSpace;
./src/interfaces/track.h:    tdble	vSpace;
./src/interfaces/track.h:    tdble	  length;	/**< main track length */
./src/interfaces/track.h:    tdble	  width;	/**< main track width */
./src/interfaces/track.h:typedef tdble(*tfTrackHeightG)(tTrackSeg*, tdble, tdble);
./src/interfaces/track.h:typedef tdble(*tfTrackHeightL)(tTrkLocPos*);
./src/interfaces/track.h:typedef void(*tfTrackGlobal2Local)(tTrackSeg* /*seg*/, tdble /*X*/, tdble /*Y*/, tTrkLocPos* /*pos*/, int /*sides*/);
./src/interfaces/track.h:typedef void(*tfTrackLocal2Global)(tTrkLocPos*, tdble *, tdble *);
./src/interfaces/track.h:typedef void(*tfTrackSideNormal)(tTrackSeg*, tdble, tdble, int, t3Dd*);
./src/interfaces/car.h:    tdble	rimRadius;	/**< Rim radius */
./src/interfaces/car.h:    tdble	tireHeight;	/**< Tire height  */
./src/interfaces/car.h:    tdble	tireWidth;	/**< Tire width */
./src/interfaces/car.h:    tdble	brakeDiskRadius; /**< Brake disk radius */
./src/interfaces/car.h:    tdble	wheelRadius;	/**< Overall wheel radius */
./src/interfaces/car.h:    tdble	exhaustPower;	/**< Power of the flames (from 1 to 3) */
./src/interfaces/car.h:    tdble	iconColor[3];		/**< Car color in leaders board */
./src/interfaces/car.h:    tdble	tank;			/**< Fuel tank capa */
./src/interfaces/car.h:    tdble	steerLock;		/**< Steer lock angle */
./src/interfaces/car.h:    tdble		topSpeed;
./src/interfaces/car.h:    tdble		distRaced;
./src/interfaces/car.h:    tdble		distFromStartLine;
./src/interfaces/car.h:    tdble	spinVel;	/**< spin velocity rad/s */
./src/interfaces/car.h:    tdble	brakeTemp;	/**< brake temperature from 0 (cool) to 1.0 (hot) */
./src/interfaces/car.h:    tdble rollRes;              /**< rolling resistance, useful for sound */
./src/interfaces/car.h:	tdble   temp_in, temp_mid, temp_out;
./src/interfaces/car.h:	tdble   condition;
./src/interfaces/car.h:	tdble slipSide;
./src/interfaces/car.h:	tdble slipAccel;
./src/interfaces/car.h:	tdble Fx;
./src/interfaces/car.h:	tdble Fy;
./src/interfaces/car.h:	tdble Fz;
./src/interfaces/car.h:    tdble	fuel;	    	/**< remaining fuel (liters) */
./src/interfaces/car.h:	tdble   fuel_consumption_total; // l
./src/interfaces/car.h:	tdble   fuel_consumption_instant; // l/100km (>100 means infinity)
./src/interfaces/car.h:    tdble	enginerpm;
./src/interfaces/car.h:    tdble	enginerpmRedLine;
./src/interfaces/car.h:    tdble	enginerpmMax;
./src/interfaces/car.h:    tdble	enginerpmMaxTq;
./src/interfaces/car.h:    tdble	enginerpmMaxPw;
./src/interfaces/car.h:    tdble	engineMaxTq;
./src/interfaces/car.h:    tdble	engineMaxPw;
./src/interfaces/car.h:    tdble	gearRatio[MAX_GEARS];	/**< including final drive */
./src/interfaces/car.h:    tdble	skid[4];		/**< skid intensity */
./src/interfaces/car.h:    tdble	reaction[4];    /**< reaction on wheels */
./src/interfaces/car.h:    tdble	steer;	    /**< Steer command [-1.0, 1.0]  */
./src/interfaces/car.h:    tdble	accelCmd;   /**< Accelerator command [0.0, 1.0] */
./src/interfaces/car.h:    tdble	brakeCmd;   /**< Brake command [0.0, 1.0] */
./src/interfaces/car.h:    tdble	clutchCmd;  /**< Clutch command [0.0, 1.0] */
./src/interfaces/car.h:    tdble		fuel;
./src/interfaces/telemetry.h:typedef void(*tftlmInit)(tdble /* ymin */, tdble /* ymax */);
./src/interfaces/telemetry.h:typedef void(*tftlmNewChannel)(const char * /* name */, tdble * /* var */, tdble /* min */, tdble /* max */);
./src/interfaces/raceman.h:    tdble	sTime;
./src/interfaces/raceman.h:    tdble	topSpd;
./src/interfaces/raceman.h:    tdble	botSpd;
./src/interfaces/raceman.h:    tdble	fuel;
Binary file ./src/tools/texmapper/texmapper-bin matches
Binary file ./src/tools/texmapper/maintexmapper.o matches
Binary file ./src/tools/nfsperf/nfsperf-bin matches
Binary file ./src/tools/nfsperf/mainnfsperf.o matches
./src/tools/nfsperf/mainnfsperf.cpp:    tdble	valf;
./src/tools/nfsperf/mainnfsperf.cpp:	    valf = 0.025f * (tdble)vald;
./src/tools/nfsperf/mainnfsperf.cpp:	    valf = (tdble)vald;
./src/tools/nfsperf/mainnfsperf.cpp:	    valf = (tdble)vald;
./src/tools/nfsperf/mainnfsperf.cpp:	    GfParmSetNum (param, "Front Right Wheel", "tire width", "mm", (tdble)vald);
./src/tools/nfsperf/mainnfsperf.cpp:	    GfParmSetNum (param, "Front Left Wheel", "tire width", "mm", (tdble)vald);
./src/tools/nfsperf/mainnfsperf.cpp:	    GfParmSetNum (param, "Front Right Wheel", "tire height-width ratio", "%", (tdble)vald);
./src/tools/nfsperf/mainnfsperf.cpp:	    GfParmSetNum (param, "Front Left Wheel", "tire height-width ratio", "%", (tdble)vald);
./src/tools/nfsperf/mainnfsperf.cpp:	    GfParmSetNum (param, "Front Right Wheel", "rim diameter", "in", (tdble)vald);
./src/tools/nfsperf/mainnfsperf.cpp:	    GfParmSetNum (param, "Front Left Wheel", "rim diameter", "in", (tdble)vald);
./src/tools/nfsperf/mainnfsperf.cpp:	    GfParmSetNum (param, "Rear Right Wheel", "tire width", "mm", (tdble)vald);
./src/tools/nfsperf/mainnfsperf.cpp:	    GfParmSetNum (param, "Rear Left Wheel", "tire width", "mm", (tdble)vald);
./src/tools/nfsperf/mainnfsperf.cpp:	    GfParmSetNum (param, "Rear Right Wheel", "tire height-width ratio", "%", (tdble)vald);
./src/tools/nfsperf/mainnfsperf.cpp:	    GfParmSetNum (param, "Rear Left Wheel", "tire height-width ratio", "%", (tdble)vald);
./src/tools/nfsperf/mainnfsperf.cpp:	    GfParmSetNum (param, "Rear Right Wheel", "rim diameter", "in", (tdble)vald);
./src/tools/nfsperf/mainnfsperf.cpp:	    GfParmSetNum (param, "Rear Left Wheel", "rim diameter", "in", (tdble)vald);
./src/tools/trackgen/track.cpp:static tdble		TrackStep;
./src/tools/trackgen/track.cpp:    tdble	toStart = 0;
./src/tools/trackgen/track.cpp:    tdble	offset = 0;
./src/tools/trackgen/track.cpp:    tdble 		width, wi2;
./src/tools/trackgen/track.cpp:    tdble 		anz, ts = 0;
./src/tools/trackgen/track.cpp:    tdble               radiusr, radiusl;
./src/tools/trackgen/track.cpp:    tdble 		step;
./src/tools/trackgen/track.cpp:    tdble		x, y, z;
./src/tools/trackgen/track.cpp:    tdble		x2, y2, z2;
./src/tools/trackgen/track.cpp:    tdble		x3, y3, z3;
./src/tools/trackgen/track.cpp:    tdble		curTexOffset = 0;
./src/tools/trackgen/track.cpp:    tdble		curTexSeg;
./src/tools/trackgen/track.cpp:    tdble		curTexSize = 0;
./src/tools/trackgen/track.cpp:    tdble		curHeight;
./src/tools/trackgen/track.cpp:    tdble		texLen;
./src/tools/trackgen/track.cpp:    tdble		texStep;
./src/tools/trackgen/track.cpp:    tdble		texMaxT = 0;
./src/tools/trackgen/track.cpp:    tdble		runninglentgh;
./src/tools/trackgen/track.cpp:    tdble		tmWidth  = Track->graphic.turnMarksInfo.width;
./src/tools/trackgen/track.cpp:    tdble		tmHeight = Track->graphic.turnMarksInfo.height;
./src/tools/trackgen/track.cpp:    tdble		tmVSpace = Track->graphic.turnMarksInfo.vSpace;
./src/tools/trackgen/track.cpp:    tdble		tmHSpace = Track->graphic.turnMarksInfo.hSpace;
./src/tools/trackgen/track.cpp:    tdble delatx = Track->seg->next->vertex[TR_SL].x - Track->seg->vertex[TR_EL].x;
./src/tools/trackgen/track.cpp:    tdble delaty = Track->seg->next->vertex[TR_SL].y - Track->seg->vertex[TR_EL].y;
./src/tools/trackgen/track.cpp:    tdble delatz = Track->seg->next->vertex[TR_SL].z - Track->seg->vertex[TR_EL].z;
./src/tools/trackgen/track.cpp:    tdble delata = Track->seg->next->angle[TR_ZS] - Track->seg->angle[TR_ZE];
./src/tools/trackgen/track.cpp:		   (tdble)(x), (tdble)(y), (tdble)(z),		\
./src/tools/trackgen/track.cpp:		   (tdble)(t1), (tdble)(t2));			\
./src/tools/trackgen/track.cpp:		    tdble lgfs = seg->lgfromstart - (tdble)marks[j];
./src/tools/trackgen/track.cpp:		tdble dx, dy;
Binary file ./src/tools/trackgen/objects.o matches
./src/tools/trackgen/elevation.h:extern tdble GetElevation(tdble x, tdble y, tdble z);
Binary file ./src/tools/trackgen/ac3d.o matches
Binary file ./src/tools/trackgen/track.o matches
Binary file ./src/tools/trackgen/easymesh.o matches
./src/tools/trackgen/objects.cpp:    tdble		deltaHeight;
./src/tools/trackgen/objects.cpp:    tdble		deltaVert;
./src/tools/trackgen/objects.cpp:AddObject(unsigned int clr, tdble x, tdble y)
./src/tools/trackgen/objects.cpp:    tdble		dv;
./src/tools/trackgen/objects.cpp:    tdble	Margin;
./src/tools/trackgen/objects.cpp:    tdble		xmin, xmax, ymin, ymax;
./src/tools/trackgen/objects.cpp:    tdble 		Margin;
./src/tools/trackgen/objects.cpp:    tdble		kX, kY, dX, dY;
./src/tools/trackgen/easymesh.cpp:static tdble 	Margin;
./src/tools/trackgen/easymesh.cpp:static tdble 	ExtHeight;
./src/tools/trackgen/easymesh.cpp:static tdble 	GridStep;
./src/tools/trackgen/easymesh.cpp:static tdble	TrackStep;
./src/tools/trackgen/easymesh.cpp:static tdble	TexSize;
./src/tools/trackgen/easymesh.cpp:static tdble	TexRand;
./src/tools/trackgen/easymesh.cpp:    tdble	ang = 0;
./src/tools/trackgen/easymesh.cpp:    tdble	ts, step, anz;
./src/tools/trackgen/easymesh.cpp:    tdble	x, y;
./src/tools/trackgen/easymesh.cpp:    tdble 	radiusr, radiusl;
Binary file ./src/tools/trackgen/util.o matches
./src/tools/trackgen/relief.cpp:static tdble	GridStep;
./src/tools/trackgen/elevation.cpp:static tdble 	Margin;
./src/tools/trackgen/elevation.cpp:static tdble	kX, kY, dX, dY;
./src/tools/trackgen/elevation.cpp:static tdble	kZ, dZ;
./src/tools/trackgen/elevation.cpp:	tdble zmin, zmax;
./src/tools/trackgen/elevation.cpp:	tdble xmin, xmax, ymin, ymax;
./src/tools/trackgen/elevation.cpp:	kX = (tdble)(width - 1) / (xmax - xmin);
./src/tools/trackgen/elevation.cpp:	kY = (tdble)(height - 1) / (ymax - ymin);
./src/tools/trackgen/elevation.cpp:tdble GetElevation(tdble x, tdble y, tdble z)
./src/tools/trackgen/elevation.cpp:		return (tdble)clr * kZ + dZ;
Binary file ./src/tools/trackgen/elevation.o matches
Binary file ./src/tools/trackgen/trackgen-bin matches
Binary file ./src/tools/trackgen/maintrackgen.o matches
Binary file ./src/tools/trackgen/relief.o matches
Binary file ./src/tools/accc/accc-bin matches
Binary file ./src/linux/linuxspec.o matches
Binary file ./src/linux/torcs-bin matches
Binary file ./src/linux/main.o matches
./src/drivers/berniw2/pathfinder.cpp:		tdble mu = track->getSegmentPtr(i)->getKfriction()*myc->CFRICTION*track->getSegmentPtr(i)->getKalpha();
./src/drivers/berniw2/pathfinder.cpp:		tdble b = track->getSegmentPtr(i)->getKbeta();
Binary file ./src/drivers/berniw2/berniw2.o matches
./src/drivers/berniw2/berniw2.cpp:static const tdble waitToTurn = 1.0; /* how long should i wait till i try to turn backwards */
./src/drivers/berniw2/berniw2.cpp:	tdble angle;
./src/drivers/berniw2/berniw2.cpp:	tdble brake;
./src/drivers/berniw2/berniw2.cpp:	tdble b1;							/* brake value in case we are to fast HERE and NOW */
./src/drivers/berniw2/berniw2.cpp:	tdble b2;							/* brake value for some brake point in front of us */
./src/drivers/berniw2/berniw2.cpp:	tdble b3;							/* brake value for control (avoid loosing control) */
./src/drivers/berniw2/berniw2.cpp:	tdble b4;							/* brake value for avoiding high angle of attack */
./src/drivers/berniw2/berniw2.cpp:	tdble steer, targetAngle, shiftaccel;
./src/drivers/berniw2/berniw2.cpp:    tdble brakecoeff = 1.0/(2.0*g*myc->currentseg->getKfriction()*myc->CFRICTION);
./src/drivers/berniw2/berniw2.cpp:    tdble brakespeed, brakedist;
./src/drivers/berniw2/berniw2.cpp:	tdble lookahead = 0.0;
./src/drivers/berniw2/berniw2.cpp:			tdble gm, qb, qs;
./src/drivers/berniw2/berniw2.cpp:		tdble abs_mean;
./src/drivers/berniw2/berniw2.cpp:		tdble abs_min = 1.0;
./src/drivers/berniw2/berniw2.cpp:			tdble slip = car->_wheelSpinVel(i) * car->_wheelRadius(i) / myc->getSpeed();
./src/drivers/berniw2/berniw2.cpp:	tdble cerror, cerrorh;
./src/drivers/berniw2/berniw2.cpp:			tdble slipspeed = myc->querySlipSpeed(car);
./src/drivers/berniw2/berniw2.cpp:	tdble bx = myc->getDir()->x, by = myc->getDir()->y;
./src/drivers/berniw2/berniw2.cpp:	tdble cx = myc->currentseg->getMiddle()->x - car->_pos_X, cy = myc->currentseg->getMiddle()->y - car->_pos_Y;
./src/drivers/berniw2/berniw2.cpp:	tdble parallel = (cx*bx + cy*by) / (sqrt(cx*cx + cy*cy)*sqrt(bx*bx + by*by));
./src/drivers/berniw2/berniw2.cpp:				tdble slipspeed = myc->querySlipSpeed(car);
Binary file ./src/drivers/berniw2/berniw2.so matches
Binary file ./src/drivers/berniw2/trackdesc.o matches
Binary file ./src/drivers/berniw2/mycar.o matches
./src/drivers/berniw2/trackdesc.h:		inline tdble getRadius() { return radius; }
./src/drivers/berniw2/trackdesc.h:		inline tdble getKfriction() { return pTrackSeg->surface->kFriction; }
./src/drivers/berniw2/trackdesc.h:		inline tdble getKrollres() { return pTrackSeg->surface->kRollRes; }
./src/drivers/berniw2/trackdesc.h:		inline tdble getKroughness() { return pTrackSeg->surface->kRoughness; }
./src/drivers/berniw2/trackdesc.h:		inline tdble getKroughwavelen() { return pTrackSeg->surface->kRoughWaveLen; }
./src/drivers/berniw2/trackdesc.h:		inline tdble getWidth() { return width; }
./src/drivers/berniw2/trackdesc.h:		inline tdble getKalpha() { return kalpha; }
./src/drivers/berniw2/trackdesc.h:		inline tdble getKbeta() { return kbeta; }
./src/drivers/berniw2/trackdesc.h:		inline tdble getKgamma() { return kgamma; }
./src/drivers/berniw2/trackdesc.h:		inline tdble getLength() { return length; }
./src/drivers/berniw2/trackdesc.h:		tdble radius;			/* radius */
./src/drivers/berniw2/trackdesc.h:		tdble width;			/* width of the track segment*/
./src/drivers/berniw2/trackdesc.h:		tdble kalpha;			/* (roll)factor for the angle (like michigan) */
./src/drivers/berniw2/trackdesc.h:		tdble kbeta;			/* (curvature)factor for bumps (e-track-3) */
./src/drivers/berniw2/trackdesc.h:		tdble kgamma;			/* (pitch)factor of road */
./src/drivers/berniw2/trackdesc.h:		tdble length;			/* distance to the next segment (2-D, not 3-D!) */
Binary file ./src/drivers/berniw2/pathfinder.o matches
./src/drivers/berniw2/pathfinder.h:		void set(tdble ispeedsqr, tdble ilength, v3d* ip, v3d* id);
./src/drivers/berniw2/pathfinder.h:		void set(tdble ispeedsqr, tdble ilength, v3d* id);
./src/drivers/berniw2/pathfinder.h:		inline void setSpeedsqr(tdble spsqr) { speedsqr = spsqr; }
./src/drivers/berniw2/pathfinder.h:		inline void setWeight(tdble w) { weight = w; }
./src/drivers/berniw2/pathfinder.h:		inline void setRadius(tdble r) { radius = r; }
./src/drivers/berniw2/pathfinder.h:		inline tdble getSpeedsqr() { return speedsqr; }
./src/drivers/berniw2/pathfinder.h:		inline tdble getLength() { return length; }
./src/drivers/berniw2/pathfinder.h:		inline tdble getWeight() { return weight; }
./src/drivers/berniw2/pathfinder.h:		inline tdble getRadius() { return radius; }
./src/drivers/berniw2/pathfinder.h:		tdble speedsqr;	/* max possible speed sqared (speed ist therefore sqrt(speedsqr) */
./src/drivers/berniw2/pathfinder.h:		tdble length;	/* dist to the next pathseg */
./src/drivers/berniw2/pathfinder.h:		tdble weight;	/* weight function value for superposition */
./src/drivers/berniw2/pathfinder.h:		tdble radius;	/* radius of current segment */
./src/drivers/berniw2/pathfinder.h:inline void PathSeg::set(tdble ispeedsqr, tdble ilength, v3d* ip, v3d* id) {
./src/drivers/berniw2/pathfinder.h:inline void PathSeg::set(tdble ispeedsqr, tdble ilength, v3d* id) {
./src/drivers/inferno2/common.h:extern tdble Tright[];
./src/drivers/inferno2/common.h:extern tdble MaxSpeed[];
./src/drivers/inferno2/common.h:extern tdble hold[];
./src/drivers/inferno2/common.h:extern tdble DynOffset[];
./src/drivers/inferno2/common.h:extern tdble shiftThld[10][MAX_GEARS+1];
./src/drivers/inferno2/common.h:extern tdble O1[];
./src/drivers/inferno2/common.h:extern tdble O2[];
./src/drivers/inferno2/common.h:extern tdble O3[];
./src/drivers/inferno2/common.h:extern tdble O4[];
./src/drivers/inferno2/common.h:extern tdble O5[];
./src/drivers/inferno2/common.h:extern tdble OP[];
./src/drivers/inferno2/common.h:extern tdble OA[];
./src/drivers/inferno2/common.h:extern tdble OW[];
./src/drivers/inferno2/common.h:extern tdble VM;
./src/drivers/inferno2/common.h:extern tdble VM1[];
./src/drivers/inferno2/common.h:extern tdble VM2[];
./src/drivers/inferno2/common.h:extern tdble VM3[];
./src/drivers/inferno2/common.h:extern tdble ConsFactor[];
./src/drivers/inferno2/common.h:extern tdble OffsetApproach[];
./src/drivers/inferno2/common.h:extern tdble OffsetFinal[];
./src/drivers/inferno2/common.h:extern tdble OffsetExit[];
./src/drivers/inferno2/common.h:extern tdble LgfsFinal[];
./src/drivers/inferno2/common.h:extern void SpeedStrategy(tCarElt* car, int idx, tdble Vtarget, tSituation *s, tdble aspect);
./src/drivers/inferno2/common.h:extern tdble GetDistToStart(tCarElt *car);
./src/drivers/inferno2/common.h:extern void CollDet(tCarElt* car, int idx, tSituation *s, tdble Curtime, tdble dny);
./src/drivers/inferno2/inferno2.cpp:	tdble	remainDist = remainLaps * DmTrack->length;
./src/drivers/inferno2/inferno2.cpp:	tdble	fuel;
./src/drivers/inferno2/inferno2.cpp:tdble	Tright[10];
./src/drivers/inferno2/inferno2.cpp:tdble	MaxSpeed[10];
./src/drivers/inferno2/inferno2.cpp:tdble	hold[10] = {0};
./src/drivers/inferno2/inferno2.cpp:tdble	shiftThld[10][MAX_GEARS+1];
./src/drivers/inferno2/inferno2.cpp:static tdble PGain[10]     = {0.015f};
./src/drivers/inferno2/inferno2.cpp:static tdble AGain[10]     = {0.008f};
./src/drivers/inferno2/inferno2.cpp:static tdble PnGain[10]    = {0.02f};
./src/drivers/inferno2/inferno2.cpp:static tdble Advance[10]   = {3.5f};
./src/drivers/inferno2/inferno2.cpp:static tdble Advance2[10]  = {10.0f};
./src/drivers/inferno2/inferno2.cpp:static tdble AdvStep[10]   = {1.0f};
./src/drivers/inferno2/inferno2.cpp:static tdble VGain[10]     = {0.0005f};
./src/drivers/inferno2/inferno2.cpp:static tdble preDy[10]     = {0.0f};
./src/drivers/inferno2/inferno2.cpp:static tdble spdtgt[10]    = {250.0f};
./src/drivers/inferno2/inferno2.cpp:static tdble spdtgt2[10]   = {2.0f};
./src/drivers/inferno2/inferno2.cpp:static tdble steerMult[10] = {2.0f};
./src/drivers/inferno2/inferno2.cpp:static tdble Offset[10]    = {0.0f};
./src/drivers/inferno2/inferno2.cpp:static tdble Trightprev[10];
./src/drivers/inferno2/inferno2.cpp:tdble DynOffset[10] = {0.0};
./src/drivers/inferno2/inferno2.cpp:tdble O1[10] = {60.0};
./src/drivers/inferno2/inferno2.cpp:tdble O2[10] = {60.0};
./src/drivers/inferno2/inferno2.cpp:tdble O3[10] = {0.0};
./src/drivers/inferno2/inferno2.cpp:tdble O4[10] = {0.0};
./src/drivers/inferno2/inferno2.cpp:tdble O5[10] = {20.0};
./src/drivers/inferno2/inferno2.cpp:tdble OP[10] = {15.0};
./src/drivers/inferno2/inferno2.cpp:tdble OA[10] = {0.0};
./src/drivers/inferno2/inferno2.cpp:tdble OW[10] = {2.0};
./src/drivers/inferno2/inferno2.cpp:tdble VM;
./src/drivers/inferno2/inferno2.cpp:tdble VM1[10] = {15.0};
./src/drivers/inferno2/inferno2.cpp:tdble VM2[10] = {0.0};
./src/drivers/inferno2/inferno2.cpp:tdble VM3[10] = {25.0};
./src/drivers/inferno2/inferno2.cpp:tdble OffsetApproach[10] = {0.0};
./src/drivers/inferno2/inferno2.cpp:tdble OffsetFinal[10]    = {0.0};
./src/drivers/inferno2/inferno2.cpp:tdble OffsetExit[10]     = {0.0};
./src/drivers/inferno2/inferno2.cpp:tdble LgfsFinal[10];
./src/drivers/inferno2/inferno2.cpp:tdble ConsFactor[10]     = {0.0007f};
./src/drivers/inferno2/inferno2.cpp:tdble Gmax;
./src/drivers/inferno2/inferno2.cpp:	tdble	fuel;
./src/drivers/inferno2/inferno2.cpp:	tdble	tmpMu;
./src/drivers/inferno2/inferno2.cpp:static tdble	Gear;
./src/drivers/inferno2/inferno2.cpp:static tdble	TargetSpeed;
./src/drivers/inferno2/inferno2.cpp:static tdble	InvBrkCmd;
./src/drivers/inferno2/inferno2.cpp:    tdble 		Dy, Dny;
./src/drivers/inferno2/inferno2.cpp:    tdble 		Vy;
./src/drivers/inferno2/inferno2.cpp:    tdble 		X, Y, x, y, CosA, SinA;
./src/drivers/inferno2/inferno2.cpp:    tdble		Da, Db;
./src/drivers/inferno2/inferno2.cpp:    tdble		tgtSpeed = -1.0;
./src/drivers/inferno2/inferno2.cpp:    tdble		lgfs;
./src/drivers/inferno2/inferno2.cpp:    tdble		vtgt1, vtgt2;
./src/drivers/inferno2/inferno2.cpp:    tdble		curAdv, curAdvMax, Amax, Atmp, AdvMax;
./src/drivers/inferno2/inferno2.cpp:    static tdble	lgfsprev[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
./src/drivers/inferno2/inferno2.cpp:    static tdble	adv[10];
./src/drivers/inferno2/inferno2.cpp:    Gear = (tdble)car->_gear;
Binary file ./src/drivers/inferno2/inferno2.o matches
./src/drivers/inferno2/common.cpp:static tdble VI[10];
./src/drivers/inferno2/common.cpp:static tdble
./src/drivers/inferno2/common.cpp:Spline(tdble p0, tdble p1, tdble pos, tdble start, tdble end)
./src/drivers/inferno2/common.cpp:    tdble t2, t3;
./src/drivers/inferno2/common.cpp:    tdble h0, h1;
./src/drivers/inferno2/common.cpp:    tdble t;
./src/drivers/inferno2/common.cpp:    tdble rpm;
./src/drivers/inferno2/common.cpp:static tdble lastAccel[10] = {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0};
./src/drivers/inferno2/common.cpp:static tdble lastBrkCmd[10] = {0};
./src/drivers/inferno2/common.cpp:static tdble lastDv[10] = {0};
./src/drivers/inferno2/common.cpp:SpeedStrategy(tCarElt* car, int idx, tdble Vtarget, tSituation *s, tdble aspect)
./src/drivers/inferno2/common.cpp:    const tdble Dx  = 0.02f;
./src/drivers/inferno2/common.cpp:    const tdble Dxx = 0.01f;
./src/drivers/inferno2/common.cpp:    const tdble Dxb  = 0.05f;
./src/drivers/inferno2/common.cpp:    const tdble Dxxb = 0.01f;
./src/drivers/inferno2/common.cpp:    tdble	Dv;
./src/drivers/inferno2/common.cpp:    tdble	Dvv;
./src/drivers/inferno2/common.cpp:    tdble 	slip;
./src/drivers/inferno2/common.cpp:	tdble meanSpd = 0;
./src/drivers/inferno2/common.cpp:	    tdble maxslp = exp(-3.47*(slip - 0.2));
./src/drivers/inferno2/common.cpp:tdble
./src/drivers/inferno2/common.cpp:    tdble	lg;
./src/drivers/inferno2/common.cpp:isBetween(tdble lgfs, tdble start, tdble end)
./src/drivers/inferno2/common.cpp:static tdble
./src/drivers/inferno2/common.cpp:getOffset(int idx, tCarElt* car, tdble *maxSpeed)
./src/drivers/inferno2/common.cpp:    tdble	offset = 0;
./src/drivers/inferno2/common.cpp:    tdble	lgfs = 0;
./src/drivers/inferno2/common.cpp:    static tdble	 Entry = pits->pitEntry->lgfromstart;
./src/drivers/inferno2/common.cpp:    static tdble	 Start = pits->pitStart->lgfromstart;
./src/drivers/inferno2/common.cpp:    static tdble	 End   = pits->pitEnd->lgfromstart;
./src/drivers/inferno2/common.cpp:    static tdble	 Exit  = pits->pitExit->lgfromstart;
./src/drivers/inferno2/common.cpp:CollDet(tCarElt* car, int idx, tSituation *s, tdble Curtime, tdble dny)
./src/drivers/inferno2/common.cpp:    tdble	lgfs, lgfs2, dlg;
./src/drivers/inferno2/common.cpp:    tdble	dspd;
./src/drivers/inferno2/common.cpp:    tdble	maxdlg;
./src/drivers/inferno2/common.cpp:    const tdble MARGIN = 8.0;
Binary file ./src/drivers/inferno2/inferno2.so matches
Binary file ./src/drivers/inferno2/common.o matches
Binary file ./src/drivers/human/human.so matches
Binary file ./src/drivers/human/human.o matches
./src/drivers/human/human.h:	tdble	shiftThld[MAX_GEARS+1];
./src/drivers/human/human.h:	tdble	Gear;
./src/drivers/human/human.h:	tdble	distToStart;
./src/drivers/human/human.h:	tdble	clutchtime;
./src/drivers/human/human.h:	tdble	clutchdelay;
./src/drivers/human/human.h:	tdble	ABS;
./src/drivers/human/human.h:	tdble	AntiSlip;
./src/drivers/human/human.h:	tdble	SCC;
./src/drivers/human/human.h:	tdble	LKAS;
./src/drivers/human/human.h:	tdble	prevLeftSteer;
./src/drivers/human/human.h:	tdble	prevRightSteer;
./src/drivers/human/human.h:	tdble	paccel;
./src/drivers/human/human.h:	tdble	pbrake;
./src/drivers/human/pref.cpp:	    cmdCtrl[cmd].min = (float)GfParmGetNum(PrefHdle, defaultSettings, cmdCtrl[cmd].minName, (char*)NULL, (tdble)cmdCtrl[cmd].min);
./src/drivers/human/pref.cpp:	    cmdCtrl[cmd].min = cmdCtrl[cmd].minVal = (float)GfParmGetNum(PrefHdle, sstring, cmdCtrl[cmd].minName, (char*)NULL, (tdble)cmdCtrl[cmd].min);
./src/drivers/human/pref.cpp:	    cmdCtrl[cmd].max = (float)GfParmGetNum(PrefHdle, defaultSettings, cmdCtrl[cmd].maxName, (char*)NULL, (tdble)cmdCtrl[cmd].max);
./src/drivers/human/pref.cpp:	    cmdCtrl[cmd].max = (float)GfParmGetNum(PrefHdle, sstring,         cmdCtrl[cmd].maxName, (char*)NULL, (tdble)cmdCtrl[cmd].max);
./src/drivers/human/pref.cpp:	    cmdCtrl[cmd].sens = 1.0f / (float)GfParmGetNum(PrefHdle, defaultSettings, cmdCtrl[cmd].sensName, (char*)NULL, 1.0 / (tdble)cmdCtrl[cmd].sens);
./src/drivers/human/pref.cpp:	    cmdCtrl[cmd].sens = 1.0f / (float)GfParmGetNum(PrefHdle, sstring,         cmdCtrl[cmd].sensName, (char*)NULL, 1.0 / (tdble)cmdCtrl[cmd].sens);
./src/drivers/human/pref.cpp:	    cmdCtrl[cmd].pow = (float)GfParmGetNum(PrefHdle, defaultSettings, cmdCtrl[cmd].powName, (char*)NULL, (tdble)cmdCtrl[cmd].pow);
./src/drivers/human/pref.cpp:	    cmdCtrl[cmd].pow = (float)GfParmGetNum(PrefHdle, sstring,         cmdCtrl[cmd].powName, (char*)NULL, (tdble)cmdCtrl[cmd].pow);
./src/drivers/human/pref.cpp:	    cmdCtrl[cmd].spdSens = (float)GfParmGetNum(PrefHdle, defaultSettings, cmdCtrl[cmd].spdSensName, (char*)NULL, (tdble)cmdCtrl[cmd].spdSens);
./src/drivers/human/pref.cpp:	    cmdCtrl[cmd].spdSens = (float)GfParmGetNum(PrefHdle, sstring,         cmdCtrl[cmd].spdSensName, (char*)NULL, (tdble)cmdCtrl[cmd].spdSens);
./src/drivers/human/pref.cpp:	    cmdCtrl[cmd].deadZone = (float)GfParmGetNum(PrefHdle, defaultSettings, cmdCtrl[cmd].deadZoneName, (char*)NULL, (tdble)cmdCtrl[cmd].deadZone);
./src/drivers/human/pref.cpp:	    cmdCtrl[cmd].deadZone = (float)GfParmGetNum(PrefHdle, sstring,         cmdCtrl[cmd].deadZoneName, (char*)NULL, (tdble)cmdCtrl[cmd].deadZone);
Binary file ./src/drivers/human/pref.o matches
./src/drivers/human/human.cpp:static tdble Vtarget;
./src/drivers/human/human.cpp:static tdble lastKeyUpdate = -10.0;
./src/drivers/human/human.cpp:	tdble fuel;
./src/drivers/human/human.cpp:	fuel = 0.0008 * curTrack->length * (s->_totLaps + 1) / (1.0 + ((tdble)HCtx[idx]->NbPitStopProg)) + 20.0;
./src/drivers/human/human.cpp:	tdble slip;
./src/drivers/human/human.cpp:	tdble ax0;
./src/drivers/human/human.cpp:	tdble brake;
./src/drivers/human/human.cpp:	tdble clutch;
./src/drivers/human/human.cpp:	tdble throttle;
./src/drivers/human/human.cpp:	tdble leftSteer;
./src/drivers/human/human.cpp:	tdble rightSteer;
./src/drivers/human/human.cpp:	HCtx[idx]->Gear = (tdble)car->_gear;	/* telemetry */
./src/drivers/human/human.cpp:		const tdble inc_rate = 0.2f;
./src/drivers/human/human.cpp:			tdble d_brake = car->_brakeCmd - HCtx[idx]->pbrake;
./src/drivers/human/human.cpp:			tdble d_accel = car->_accelCmd - HCtx[idx]->paccel;
./src/drivers/human/human.cpp:			tdble rearskid = MAX(0.0, MAX(car->_skid[2], car->_skid[3]) - MAX(car->_skid[0], car->_skid[1]));
./src/drivers/human/human.cpp:			tdble skidAng = atan2(car->_speed_Y, car->_speed_X) - car->_yaw;
./src/drivers/human/human.cpp:				tdble decel = ((fabs(car->_steerCmd)-0.1) * (1.0 + fabs(car->_steerCmd)) * 0.6);
./src/drivers/human/human.cpp:			const tdble abs_slip = 2.5;
./src/drivers/human/human.cpp:			const tdble abs_range = 5.0;
./src/drivers/human/human.cpp:    	tdble trackangle = RtTrackSideTgAngleL(&(car->_trkPos));
./src/drivers/human/human.cpp:		tdble angle = trackangle - car->_yaw;
./src/drivers/human/human.cpp:		tdble maxaccel = 0.0;
./src/drivers/human/human.cpp:		tdble origaccel = car->_accelCmd;
./src/drivers/human/human.cpp:		tdble skidAng = atan2(car->_speed_Y, car->_speed_X) - car->_yaw;
./src/drivers/human/human.cpp:			tdble decel = ((fabs(car->_steerCmd)-0.1) * (1.0 + fabs(car->_steerCmd)) * 0.8);
./src/drivers/human/human.cpp:		tdble drivespeed = 0.0;
./src/drivers/human/human.cpp:		tdble slip = drivespeed - fabs(car->_speed_x);
./src/drivers/human/human.cpp:		tdble Dv;
./src/drivers/human/human.cpp:static tdble getAutoClutch(int idx, int gear, int newgear, tCarElt *car)
./src/drivers/human/human.cpp:			HCtx[idx]->clutchtime = 0.332f - ((tdble) newgear / 65.0f);
./src/drivers/human/human.cpp:	tdble f1, f2;
./src/drivers/human/human.cpp:	tdble ns;
Binary file ./src/drivers/sparkle/driver.o matches
Binary file ./src/drivers/sparkle/pit.o matches
Binary file ./src/drivers/sparkle/sparkle.so matches
Binary file ./src/drivers/sparkle/opponent.o matches
Binary file ./src/drivers/sparkle/sparkle.o matches
Binary file ./src/drivers/olethros/learn.o matches
Binary file ./src/drivers/olethros/olethros.so matches
Binary file ./src/drivers/olethros/olethros.o matches
Binary file ./src/drivers/olethros/TrackData.o matches
Binary file ./src/drivers/olethros/driver.o matches
Binary file ./src/drivers/olethros/strategy.o matches
Binary file ./src/drivers/olethros/pit.o matches
Binary file ./src/drivers/olethros/opponent.o matches
Binary file ./src/drivers/olethros/cardata.o matches
./src/drivers/inferno/pathfinder.cpp:		tdble mu = track->getSegmentPtr(i)->getKfriction()*myc->CFRICTION*track->getSegmentPtr(i)->getKalpha();
./src/drivers/inferno/pathfinder.cpp:		tdble b = track->getSegmentPtr(i)->getKbeta();
Binary file ./src/drivers/inferno/trackdesc.o matches
Binary file ./src/drivers/inferno/mycar.o matches
Binary file ./src/drivers/inferno/inferno.so matches
Binary file ./src/drivers/inferno/inferno.o matches
./src/drivers/inferno/trackdesc.h:		inline tdble getRadius() const { return radius; }
./src/drivers/inferno/trackdesc.h:		inline tdble getKfriction() const { return pTrackSeg->surface->kFriction; }
./src/drivers/inferno/trackdesc.h:		inline tdble getKrollres() const { return pTrackSeg->surface->kRollRes; }
./src/drivers/inferno/trackdesc.h:		inline tdble getKroughness() const { return pTrackSeg->surface->kRoughness; }
./src/drivers/inferno/trackdesc.h:		inline tdble getKroughwavelen() const { return pTrackSeg->surface->kRoughWaveLen; }
./src/drivers/inferno/trackdesc.h:		inline tdble getWidth() const { return width; }
./src/drivers/inferno/trackdesc.h:		inline tdble getKalpha() const { return kalpha; }
./src/drivers/inferno/trackdesc.h:		inline tdble getKbeta() const { return kbeta; }
./src/drivers/inferno/trackdesc.h:		inline tdble getKgamma() const { return kgamma; }
./src/drivers/inferno/trackdesc.h:		inline tdble getLength() const { return length; }
./src/drivers/inferno/trackdesc.h:		tdble radius;			// Radius.
./src/drivers/inferno/trackdesc.h:		tdble width;			// Width of the track segment.
./src/drivers/inferno/trackdesc.h:		tdble kalpha;			// (roll) factor for the angle (like michigan).
./src/drivers/inferno/trackdesc.h:		tdble kbeta;			// (curvature)factor for bumps (e-track-3).
./src/drivers/inferno/trackdesc.h:		tdble kgamma;			// (pitch) factor of road.
./src/drivers/inferno/trackdesc.h:		tdble length;			// Distance to the next segment (2-D, not 3-D!).
./src/drivers/inferno/trackdesc.h:		inline tdble getRadius() const { return radius; }
./src/drivers/inferno/trackdesc.h:		inline tdble getKfriction() const { return pTrackSeg->surface->kFriction; }
./src/drivers/inferno/trackdesc.h:		inline tdble getKrollres() const { return pTrackSeg->surface->kRollRes; }
./src/drivers/inferno/trackdesc.h:		inline tdble getKroughness() const { return pTrackSeg->surface->kRoughness; }
./src/drivers/inferno/trackdesc.h:		inline tdble getKroughwavelen() const { return pTrackSeg->surface->kRoughWaveLen; }
./src/drivers/inferno/trackdesc.h:		inline tdble getWidth() const { return width; }
./src/drivers/inferno/trackdesc.h:		inline tdble getKalpha() const { return kalpha; }
./src/drivers/inferno/trackdesc.h:		inline tdble getKbeta() const { return kbeta; }
./src/drivers/inferno/trackdesc.h:		inline tdble getKgamma() const { return kgamma; }
./src/drivers/inferno/trackdesc.h:		tdble radius;			// Radius.
./src/drivers/inferno/trackdesc.h:		tdble width;			// Width of the track segment.
./src/drivers/inferno/trackdesc.h:		tdble kalpha;			// (roll) factor for the angle (like michigan).
./src/drivers/inferno/trackdesc.h:		tdble kbeta;			// (curvature)factor for bumps (e-track-3).
./src/drivers/inferno/trackdesc.h:		tdble kgamma;			// (pitch) factor of road.
./src/drivers/inferno/inferno.cpp:static const tdble waitToTurn = 1.0; // How long should i wait till i try to turn backwards.
./src/drivers/inferno/inferno.cpp:	tdble angle;
./src/drivers/inferno/inferno.cpp:	tdble brake;
./src/drivers/inferno/inferno.cpp:	tdble b1;							// Brake value in case we are to fast HERE and NOW.
./src/drivers/inferno/inferno.cpp:	tdble b2;							// Brake value for some brake point in front of us.
./src/drivers/inferno/inferno.cpp:	tdble b3;							// Brake value for control (avoid loosing control).
./src/drivers/inferno/inferno.cpp:	tdble b4;							// Brake value for avoiding high angle of attack.
./src/drivers/inferno/inferno.cpp:	tdble steer, targetAngle, shiftaccel;
./src/drivers/inferno/inferno.cpp:    tdble brakecoeff = 1.0/(2.0*g*myc->currentseg->getKfriction()*myc->CFRICTION);
./src/drivers/inferno/inferno.cpp:    tdble brakespeed, brakedist;
./src/drivers/inferno/inferno.cpp:	tdble lookahead = 0.0;
./src/drivers/inferno/inferno.cpp:			tdble gm, qb, qs;
./src/drivers/inferno/inferno.cpp:		tdble abs_mean;
./src/drivers/inferno/inferno.cpp:		tdble abs_min = 1.0;
./src/drivers/inferno/inferno.cpp:			tdble slip = car->_wheelSpinVel(i) * car->_wheelRadius(i) / myc->getSpeed();
./src/drivers/inferno/inferno.cpp:	tdble cerror, cerrorh;
./src/drivers/inferno/inferno.cpp:			tdble slipspeed = myc->querySlipSpeed(car);
./src/drivers/inferno/inferno.cpp:	tdble bx = myc->getDir()->x, by = myc->getDir()->y;
./src/drivers/inferno/inferno.cpp:	tdble cx = myc->currentseg->getMiddle()->x - car->_pos_X, cy = myc->currentseg->getMiddle()->y - car->_pos_Y;
./src/drivers/inferno/inferno.cpp:	tdble parallel = (cx*bx + cy*by) / (sqrt(cx*cx + cy*cy)*sqrt(bx*bx + by*by));
./src/drivers/inferno/inferno.cpp:				tdble slipspeed = myc->querySlipSpeed(car);
Binary file ./src/drivers/inferno/pathfinder.o matches
./src/drivers/inferno/pathfinder.h:		void set(tdble ispeedsqr, tdble ilength, vec2d* ip, vec2d* id, int segid);
./src/drivers/inferno/pathfinder.h:		void set(tdble ispeedsqr, tdble ilength, vec2d* id, int segid);
./src/drivers/inferno/pathfinder.h:		inline void setSpeedsqr(tdble spsqr, int segid) { ps[getid(segid)].speedsqr = spsqr; }
./src/drivers/inferno/pathfinder.h:		inline void setRadius(tdble r, int segid) { ps[getid(segid)].radius = r; }
./src/drivers/inferno/pathfinder.h:		inline tdble getSpeedsqr(int segid) { return ps[getid(segid)].speedsqr; }
./src/drivers/inferno/pathfinder.h:		inline tdble getLength(int segid) { return ps[getid(segid)].length; }
./src/drivers/inferno/pathfinder.h:		inline tdble getRadius(int segid) { return ps[getid(segid)].radius; }
./src/drivers/inferno/pathfinder.h:				tdble speedsqr;	// Max possible speed sqared (speed ist therefore sqrt(speedsqr).
./src/drivers/inferno/pathfinder.h:				tdble length;	// Dist to the next pathseg.
./src/drivers/inferno/pathfinder.h:				tdble radius;	// Radius of current segment.
./src/drivers/inferno/pathfinder.h:inline void PathSeg::set(tdble ispeedsqr, tdble ilength, vec2d* ip, vec2d* id, int segid) {
./src/drivers/inferno/pathfinder.h:inline void PathSeg::set(tdble ispeedsqr, tdble ilength, vec2d* id, int segid) {
Binary file ./src/drivers/tita/tita.so matches
./src/drivers/tita/pathfinder.cpp:		tdble mu = track->getSegmentPtr(i)->getKfriction()*myc->CFRICTION*track->getSegmentPtr(i)->getKalpha();
./src/drivers/tita/pathfinder.cpp:		tdble b = track->getSegmentPtr(i)->getKbeta();
Binary file ./src/drivers/tita/tita.o matches
Binary file ./src/drivers/tita/trackdesc.o matches
Binary file ./src/drivers/tita/mycar.o matches
./src/drivers/tita/trackdesc.h:		inline tdble getRadius() const { return radius; }
./src/drivers/tita/trackdesc.h:		inline tdble getKfriction() const { return pTrackSeg->surface->kFriction; }
./src/drivers/tita/trackdesc.h:		inline tdble getKrollres() const { return pTrackSeg->surface->kRollRes; }
./src/drivers/tita/trackdesc.h:		inline tdble getKroughness() const { return pTrackSeg->surface->kRoughness; }
./src/drivers/tita/trackdesc.h:		inline tdble getKroughwavelen() const { return pTrackSeg->surface->kRoughWaveLen; }
./src/drivers/tita/trackdesc.h:		inline tdble getWidth() const { return width; }
./src/drivers/tita/trackdesc.h:		inline tdble getKalpha() const { return kalpha; }
./src/drivers/tita/trackdesc.h:		inline tdble getKbeta() const { return kbeta; }
./src/drivers/tita/trackdesc.h:		inline tdble getKgamma() const { return kgamma; }
./src/drivers/tita/trackdesc.h:		inline tdble getLength() const { return length; }
./src/drivers/tita/trackdesc.h:		tdble radius;			// Radius.
./src/drivers/tita/trackdesc.h:		tdble width;			// Width of the track segment.
./src/drivers/tita/trackdesc.h:		tdble kalpha;			// (roll) factor for the angle (like michigan).
./src/drivers/tita/trackdesc.h:		tdble kbeta;			// (curvature)factor for bumps (e-track-3).
./src/drivers/tita/trackdesc.h:		tdble kgamma;			// (pitch) factor of road.
./src/drivers/tita/trackdesc.h:		tdble length;			// Distance to the next segment (2-D, not 3-D!).
./src/drivers/tita/trackdesc.h:		inline tdble getRadius() const { return radius; }
./src/drivers/tita/trackdesc.h:		inline tdble getKfriction() const { return pTrackSeg->surface->kFriction; }
./src/drivers/tita/trackdesc.h:		inline tdble getKrollres() const { return pTrackSeg->surface->kRollRes; }
./src/drivers/tita/trackdesc.h:		inline tdble getKroughness() const { return pTrackSeg->surface->kRoughness; }
./src/drivers/tita/trackdesc.h:		inline tdble getKroughwavelen() const { return pTrackSeg->surface->kRoughWaveLen; }
./src/drivers/tita/trackdesc.h:		inline tdble getWidth() const { return width; }
./src/drivers/tita/trackdesc.h:		inline tdble getKalpha() const { return kalpha; }
./src/drivers/tita/trackdesc.h:		inline tdble getKbeta() const { return kbeta; }
./src/drivers/tita/trackdesc.h:		inline tdble getKgamma() const { return kgamma; }
./src/drivers/tita/trackdesc.h:		tdble radius;			// Radius.
./src/drivers/tita/trackdesc.h:		tdble width;			// Width of the track segment.
./src/drivers/tita/trackdesc.h:		tdble kalpha;			// (roll) factor for the angle (like michigan).
./src/drivers/tita/trackdesc.h:		tdble kbeta;			// (curvature)factor for bumps (e-track-3).
./src/drivers/tita/trackdesc.h:		tdble kgamma;			// (pitch) factor of road.
./src/drivers/tita/tita.cpp:static const tdble waitToTurn = 1.0; // How long should i wait till i try to turn backwards.
./src/drivers/tita/tita.cpp:	tdble angle;
./src/drivers/tita/tita.cpp:	tdble brake;
./src/drivers/tita/tita.cpp:	tdble b1;							// Brake value in case we are to fast HERE and NOW.
./src/drivers/tita/tita.cpp:	tdble b2;							// Brake value for some brake point in front of us.
./src/drivers/tita/tita.cpp:	tdble b3;							// Brake value for control (avoid loosing control).
./src/drivers/tita/tita.cpp:	tdble b4;							// Brake value for avoiding high angle of attack.
./src/drivers/tita/tita.cpp:	tdble steer, targetAngle, shiftaccel;
./src/drivers/tita/tita.cpp:    tdble brakecoeff = 1.0/(2.0*g*myc->currentseg->getKfriction()*myc->CFRICTION);
./src/drivers/tita/tita.cpp:    tdble brakespeed, brakedist;
./src/drivers/tita/tita.cpp:	tdble lookahead = 0.0;
./src/drivers/tita/tita.cpp:			tdble gm, qb, qs;
./src/drivers/tita/tita.cpp:		tdble abs_mean;
./src/drivers/tita/tita.cpp:		tdble abs_min = 1.0;
./src/drivers/tita/tita.cpp:			tdble slip = car->_wheelSpinVel(i) * car->_wheelRadius(i) / myc->getSpeed();
./src/drivers/tita/tita.cpp:	tdble cerror, cerrorh;
./src/drivers/tita/tita.cpp:			tdble slipspeed = myc->querySlipSpeed(car);
./src/drivers/tita/tita.cpp:	tdble bx = myc->getDir()->x, by = myc->getDir()->y;
./src/drivers/tita/tita.cpp:	tdble cx = myc->currentseg->getMiddle()->x - car->_pos_X, cy = myc->currentseg->getMiddle()->y - car->_pos_Y;
./src/drivers/tita/tita.cpp:	tdble parallel = (cx*bx + cy*by) / (sqrt(cx*cx + cy*cy)*sqrt(bx*bx + by*by));
./src/drivers/tita/tita.cpp:				tdble slipspeed = myc->querySlipSpeed(car);
Binary file ./src/drivers/tita/pathfinder.o matches
./src/drivers/tita/pathfinder.h:		void set(tdble ispeedsqr, tdble ilength, vec2d* ip, vec2d* id, int segid);
./src/drivers/tita/pathfinder.h:		void set(tdble ispeedsqr, tdble ilength, vec2d* id, int segid);
./src/drivers/tita/pathfinder.h:		inline void setSpeedsqr(tdble spsqr, int segid) { ps[getid(segid)].speedsqr = spsqr; }
./src/drivers/tita/pathfinder.h:		inline void setRadius(tdble r, int segid) { ps[getid(segid)].radius = r; }
./src/drivers/tita/pathfinder.h:		inline tdble getSpeedsqr(int segid) { return ps[getid(segid)].speedsqr; }
./src/drivers/tita/pathfinder.h:		inline tdble getLength(int segid) { return ps[getid(segid)].length; }
./src/drivers/tita/pathfinder.h:		inline tdble getRadius(int segid) { return ps[getid(segid)].radius; }
./src/drivers/tita/pathfinder.h:				tdble speedsqr;	// Max possible speed sqared (speed ist therefore sqrt(speedsqr).
./src/drivers/tita/pathfinder.h:				tdble length;	// Dist to the next pathseg.
./src/drivers/tita/pathfinder.h:				tdble radius;	// Radius of current segment.
./src/drivers/tita/pathfinder.h:inline void PathSeg::set(tdble ispeedsqr, tdble ilength, vec2d* ip, vec2d* id, int segid) {
./src/drivers/tita/pathfinder.h:inline void PathSeg::set(tdble ispeedsqr, tdble ilength, vec2d* id, int segid) {
./src/drivers/lliaw/pathfinder.cpp:		tdble mu = track->getSegmentPtr(i)->getKfriction()*myc->CFRICTION*track->getSegmentPtr(i)->getKalpha();
./src/drivers/lliaw/pathfinder.cpp:		tdble b = track->getSegmentPtr(i)->getKbeta();
Binary file ./src/drivers/lliaw/lliaw.so matches
Binary file ./src/drivers/lliaw/trackdesc.o matches
Binary file ./src/drivers/lliaw/mycar.o matches
./src/drivers/lliaw/trackdesc.h:		inline tdble getRadius() const { return radius; }
./src/drivers/lliaw/trackdesc.h:		inline tdble getKfriction() const { return pTrackSeg->surface->kFriction; }
./src/drivers/lliaw/trackdesc.h:		inline tdble getKrollres() const { return pTrackSeg->surface->kRollRes; }
./src/drivers/lliaw/trackdesc.h:		inline tdble getKroughness() const { return pTrackSeg->surface->kRoughness; }
./src/drivers/lliaw/trackdesc.h:		inline tdble getKroughwavelen() const { return pTrackSeg->surface->kRoughWaveLen; }
./src/drivers/lliaw/trackdesc.h:		inline tdble getWidth() const { return width; }
./src/drivers/lliaw/trackdesc.h:		inline tdble getKalpha() const { return kalpha; }
./src/drivers/lliaw/trackdesc.h:		inline tdble getKbeta() const { return kbeta; }
./src/drivers/lliaw/trackdesc.h:		inline tdble getKgamma() const { return kgamma; }
./src/drivers/lliaw/trackdesc.h:		inline tdble getLength() const { return length; }
./src/drivers/lliaw/trackdesc.h:		tdble radius;			// Radius.
./src/drivers/lliaw/trackdesc.h:		tdble width;			// Width of the track segment.
./src/drivers/lliaw/trackdesc.h:		tdble kalpha;			// (roll) factor for the angle (like michigan).
./src/drivers/lliaw/trackdesc.h:		tdble kbeta;			// (curvature)factor for bumps (e-track-3).
./src/drivers/lliaw/trackdesc.h:		tdble kgamma;			// (pitch) factor of road.
./src/drivers/lliaw/trackdesc.h:		tdble length;			// Distance to the next segment (2-D, not 3-D!).
./src/drivers/lliaw/trackdesc.h:		inline tdble getRadius() const { return radius; }
./src/drivers/lliaw/trackdesc.h:		inline tdble getKfriction() const { return pTrackSeg->surface->kFriction; }
./src/drivers/lliaw/trackdesc.h:		inline tdble getKrollres() const { return pTrackSeg->surface->kRollRes; }
./src/drivers/lliaw/trackdesc.h:		inline tdble getKroughness() const { return pTrackSeg->surface->kRoughness; }
./src/drivers/lliaw/trackdesc.h:		inline tdble getKroughwavelen() const { return pTrackSeg->surface->kRoughWaveLen; }
./src/drivers/lliaw/trackdesc.h:		inline tdble getWidth() const { return width; }
./src/drivers/lliaw/trackdesc.h:		inline tdble getKalpha() const { return kalpha; }
./src/drivers/lliaw/trackdesc.h:		inline tdble getKbeta() const { return kbeta; }
./src/drivers/lliaw/trackdesc.h:		inline tdble getKgamma() const { return kgamma; }
./src/drivers/lliaw/trackdesc.h:		tdble radius;			// Radius.
./src/drivers/lliaw/trackdesc.h:		tdble width;			// Width of the track segment.
./src/drivers/lliaw/trackdesc.h:		tdble kalpha;			// (roll) factor for the angle (like michigan).
./src/drivers/lliaw/trackdesc.h:		tdble kbeta;			// (curvature)factor for bumps (e-track-3).
./src/drivers/lliaw/trackdesc.h:		tdble kgamma;			// (pitch) factor of road.
./src/drivers/lliaw/lliaw.cpp:static const tdble waitToTurn = 1.0; // How long should i wait till i try to turn backwards.
./src/drivers/lliaw/lliaw.cpp:	tdble angle;
./src/drivers/lliaw/lliaw.cpp:	tdble brake;
./src/drivers/lliaw/lliaw.cpp:	tdble b1;							// Brake value in case we are to fast HERE and NOW.
./src/drivers/lliaw/lliaw.cpp:	tdble b2;							// Brake value for some brake point in front of us.
./src/drivers/lliaw/lliaw.cpp:	tdble b3;							// Brake value for control (avoid loosing control).
./src/drivers/lliaw/lliaw.cpp:	tdble b4;							// Brake value for avoiding high angle of attack.
./src/drivers/lliaw/lliaw.cpp:	tdble steer, targetAngle, shiftaccel;
./src/drivers/lliaw/lliaw.cpp:    tdble brakecoeff = 1.0/(2.0*g*myc->currentseg->getKfriction()*myc->CFRICTION);
./src/drivers/lliaw/lliaw.cpp:    tdble brakespeed, brakedist;
./src/drivers/lliaw/lliaw.cpp:	tdble lookahead = 0.0;
./src/drivers/lliaw/lliaw.cpp:			tdble gm, qb, qs;
./src/drivers/lliaw/lliaw.cpp:		tdble abs_mean;
./src/drivers/lliaw/lliaw.cpp:		tdble abs_min = 1.0;
./src/drivers/lliaw/lliaw.cpp:			tdble slip = car->_wheelSpinVel(i) * car->_wheelRadius(i) / myc->getSpeed();
./src/drivers/lliaw/lliaw.cpp:	tdble cerror, cerrorh;
./src/drivers/lliaw/lliaw.cpp:			tdble slipspeed = myc->querySlipSpeed(car);
./src/drivers/lliaw/lliaw.cpp:	tdble bx = myc->getDir()->x, by = myc->getDir()->y;
./src/drivers/lliaw/lliaw.cpp:	tdble cx = myc->currentseg->getMiddle()->x - car->_pos_X, cy = myc->currentseg->getMiddle()->y - car->_pos_Y;
./src/drivers/lliaw/lliaw.cpp:	tdble parallel = (cx*bx + cy*by) / (sqrt(cx*cx + cy*cy)*sqrt(bx*bx + by*by));
./src/drivers/lliaw/lliaw.cpp:				tdble slipspeed = myc->querySlipSpeed(car);
Binary file ./src/drivers/lliaw/pathfinder.o matches
Binary file ./src/drivers/lliaw/lliaw.o matches
./src/drivers/lliaw/pathfinder.h:		void set(tdble ispeedsqr, tdble ilength, vec2d* ip, vec2d* id, int segid);
./src/drivers/lliaw/pathfinder.h:		void set(tdble ispeedsqr, tdble ilength, vec2d* id, int segid);
./src/drivers/lliaw/pathfinder.h:		inline void setSpeedsqr(tdble spsqr, int segid) { ps[getid(segid)].speedsqr = spsqr; }
./src/drivers/lliaw/pathfinder.h:		inline void setRadius(tdble r, int segid) { ps[getid(segid)].radius = r; }
./src/drivers/lliaw/pathfinder.h:		inline tdble getSpeedsqr(int segid) { return ps[getid(segid)].speedsqr; }
./src/drivers/lliaw/pathfinder.h:		inline tdble getLength(int segid) { return ps[getid(segid)].length; }
./src/drivers/lliaw/pathfinder.h:		inline tdble getRadius(int segid) { return ps[getid(segid)].radius; }
./src/drivers/lliaw/pathfinder.h:				tdble speedsqr;	// Max possible speed sqared (speed ist therefore sqrt(speedsqr).
./src/drivers/lliaw/pathfinder.h:				tdble length;	// Dist to the next pathseg.
./src/drivers/lliaw/pathfinder.h:				tdble radius;	// Radius of current segment.
./src/drivers/lliaw/pathfinder.h:inline void PathSeg::set(tdble ispeedsqr, tdble ilength, vec2d* ip, vec2d* id, int segid) {
./src/drivers/lliaw/pathfinder.h:inline void PathSeg::set(tdble ispeedsqr, tdble ilength, vec2d* id, int segid) {
Binary file ./src/drivers/damned/damned.so matches
Binary file ./src/drivers/damned/learn.o matches
Binary file ./src/drivers/damned/damned.o matches
Binary file ./src/drivers/damned/driver.o matches
Binary file ./src/drivers/damned/strategy.o matches
Binary file ./src/drivers/damned/pit.o matches
Binary file ./src/drivers/damned/opponent.o matches
Binary file ./src/drivers/damned/cardata.o matches
./src/drivers/berniw/pathfinder.cpp:		tdble mu = track->getSegmentPtr(i)->getKfriction()*myc->CFRICTION*track->getSegmentPtr(i)->getKalpha();
./src/drivers/berniw/pathfinder.cpp:		tdble b = track->getSegmentPtr(i)->getKbeta();
Binary file ./src/drivers/berniw/berniw.so matches
./src/drivers/berniw/berniw.cpp:static const tdble waitToTurn = 1.0; /* how long should i wait till i try to turn backwards */
./src/drivers/berniw/berniw.cpp:	tdble angle;
./src/drivers/berniw/berniw.cpp:	tdble brake;
./src/drivers/berniw/berniw.cpp:	tdble b1;							/* brake value in case we are to fast HERE and NOW */
./src/drivers/berniw/berniw.cpp:	tdble b2;							/* brake value for some brake point in front of us */
./src/drivers/berniw/berniw.cpp:	tdble b3;							/* brake value for control (avoid loosing control) */
./src/drivers/berniw/berniw.cpp:	tdble b4;							/* brake value for avoiding high angle of attack */
./src/drivers/berniw/berniw.cpp:	tdble steer, targetAngle, shiftaccel;
./src/drivers/berniw/berniw.cpp:    tdble brakecoeff = 1.0/(2.0*g*myc->currentseg->getKfriction()*myc->CFRICTION);
./src/drivers/berniw/berniw.cpp:    tdble brakespeed, brakedist;
./src/drivers/berniw/berniw.cpp:	tdble lookahead = 0.0;
./src/drivers/berniw/berniw.cpp:			tdble gm, qb, qs;
./src/drivers/berniw/berniw.cpp:		tdble abs_mean;
./src/drivers/berniw/berniw.cpp:		tdble abs_min = 1.0;
./src/drivers/berniw/berniw.cpp:			tdble slip = car->_wheelSpinVel(i) * car->_wheelRadius(i) / myc->getSpeed();
./src/drivers/berniw/berniw.cpp:	tdble cerror, cerrorh;
./src/drivers/berniw/berniw.cpp:			tdble slipspeed = myc->querySlipSpeed(car);
./src/drivers/berniw/berniw.cpp:	tdble bx = myc->getDir()->x, by = myc->getDir()->y;
./src/drivers/berniw/berniw.cpp:	tdble cx = myc->currentseg->getMiddle()->x - car->_pos_X, cy = myc->currentseg->getMiddle()->y - car->_pos_Y;
./src/drivers/berniw/berniw.cpp:	tdble parallel = (cx*bx + cy*by) / (sqrt(cx*cx + cy*cy)*sqrt(bx*bx + by*by));
./src/drivers/berniw/berniw.cpp:				tdble slipspeed = myc->querySlipSpeed(car);
Binary file ./src/drivers/berniw/berniw.o matches
Binary file ./src/drivers/berniw/trackdesc.o matches
Binary file ./src/drivers/berniw/mycar.o matches
./src/drivers/berniw/trackdesc.h:		inline tdble getRadius() { return radius; }
./src/drivers/berniw/trackdesc.h:		inline tdble getKfriction() { return pTrackSeg->surface->kFriction; }
./src/drivers/berniw/trackdesc.h:		inline tdble getKrollres() { return pTrackSeg->surface->kRollRes; }
./src/drivers/berniw/trackdesc.h:		inline tdble getKroughness() { return pTrackSeg->surface->kRoughness; }
./src/drivers/berniw/trackdesc.h:		inline tdble getKroughwavelen() { return pTrackSeg->surface->kRoughWaveLen; }
./src/drivers/berniw/trackdesc.h:		inline tdble getWidth() { return width; }
./src/drivers/berniw/trackdesc.h:		inline tdble getKalpha() { return kalpha; }
./src/drivers/berniw/trackdesc.h:		inline tdble getKbeta() { return kbeta; }
./src/drivers/berniw/trackdesc.h:		inline tdble getKgamma() { return kgamma; }
./src/drivers/berniw/trackdesc.h:		inline tdble getLength() { return length; }
./src/drivers/berniw/trackdesc.h:		tdble radius;			/* radius */
./src/drivers/berniw/trackdesc.h:		tdble width;			/* width of the track segment*/
./src/drivers/berniw/trackdesc.h:		tdble kalpha;			/* (roll)factor for the angle (like michigan) */
./src/drivers/berniw/trackdesc.h:		tdble kbeta;			/* (curvature)factor for bumps (e-track-3) */
./src/drivers/berniw/trackdesc.h:		tdble kgamma;			/* (pitch)factor of road */
./src/drivers/berniw/trackdesc.h:		tdble length;			/* distance to the next segment (2-D, not 3-D!) */
Binary file ./src/drivers/berniw/.berniw.cpp.swp matches
Binary file ./src/drivers/berniw/pathfinder.o matches
./src/drivers/berniw/pathfinder.h:		void set(tdble ispeedsqr, tdble ilength, v3d* ip, v3d* id);
./src/drivers/berniw/pathfinder.h:		void set(tdble ispeedsqr, tdble ilength, v3d* id);
./src/drivers/berniw/pathfinder.h:		inline void setSpeedsqr(tdble spsqr) { speedsqr = spsqr; }
./src/drivers/berniw/pathfinder.h:		inline void setWeight(tdble w) { weight = w; }
./src/drivers/berniw/pathfinder.h:		inline void setRadius(tdble r) { radius = r; }
./src/drivers/berniw/pathfinder.h:		inline tdble getSpeedsqr() { return speedsqr; }
./src/drivers/berniw/pathfinder.h:		inline tdble getLength() { return length; }
./src/drivers/berniw/pathfinder.h:		inline tdble getWeight() { return weight; }
./src/drivers/berniw/pathfinder.h:		inline tdble getRadius() { return radius; }
./src/drivers/berniw/pathfinder.h:		tdble speedsqr;	/* max possible speed sqared (speed ist therefore sqrt(speedsqr) */
./src/drivers/berniw/pathfinder.h:		tdble length;	/* dist to the next pathseg */
./src/drivers/berniw/pathfinder.h:		tdble weight;	/* weight function value for superposition */
./src/drivers/berniw/pathfinder.h:		tdble radius;	/* radius of current segment */
./src/drivers/berniw/pathfinder.h:inline void PathSeg::set(tdble ispeedsqr, tdble ilength, v3d* ip, v3d* id) {
./src/drivers/berniw/pathfinder.h:inline void PathSeg::set(tdble ispeedsqr, tdble ilength, v3d* id) {
Binary file ./src/drivers/bt/learn.o matches
Binary file ./src/drivers/bt/bt.so matches
Binary file ./src/drivers/bt/driver.o matches
Binary file ./src/drivers/bt/bt.o matches
Binary file ./src/drivers/bt/strategy.o matches
Binary file ./src/drivers/bt/pit.o matches
Binary file ./src/drivers/bt/opponent.o matches
Binary file ./src/drivers/bt/cardata.o matches
./src/drivers/berniw3/pathfinder.cpp:		tdble mu = track->getSegmentPtr(i)->getKfriction()*myc->CFRICTION*track->getSegmentPtr(i)->getKalpha();
./src/drivers/berniw3/pathfinder.cpp:		tdble b = track->getSegmentPtr(i)->getKbeta();
Binary file ./src/drivers/berniw3/trackdesc.o matches
Binary file ./src/drivers/berniw3/mycar.o matches
Binary file ./src/drivers/berniw3/berniw3.so matches
./src/drivers/berniw3/trackdesc.h:		inline tdble getRadius() { return radius; }
./src/drivers/berniw3/trackdesc.h:		inline tdble getKfriction() { return pTrackSeg->surface->kFriction; }
./src/drivers/berniw3/trackdesc.h:		inline tdble getKrollres() { return pTrackSeg->surface->kRollRes; }
./src/drivers/berniw3/trackdesc.h:		inline tdble getKroughness() { return pTrackSeg->surface->kRoughness; }
./src/drivers/berniw3/trackdesc.h:		inline tdble getKroughwavelen() { return pTrackSeg->surface->kRoughWaveLen; }
./src/drivers/berniw3/trackdesc.h:		inline tdble getWidth() { return width; }
./src/drivers/berniw3/trackdesc.h:		inline tdble getKalpha() { return kalpha; }
./src/drivers/berniw3/trackdesc.h:		inline tdble getKbeta() { return kbeta; }
./src/drivers/berniw3/trackdesc.h:		inline tdble getKgamma() { return kgamma; }
./src/drivers/berniw3/trackdesc.h:		inline tdble getLength() { return length; }
./src/drivers/berniw3/trackdesc.h:		tdble radius;			/* radius */
./src/drivers/berniw3/trackdesc.h:		tdble width;			/* width of the track segment*/
./src/drivers/berniw3/trackdesc.h:		tdble kalpha;			/* (roll)factor for the angle (like michigan) */
./src/drivers/berniw3/trackdesc.h:		tdble kbeta;			/* (curvature)factor for bumps (e-track-3) */
./src/drivers/berniw3/trackdesc.h:		tdble kgamma;			/* (pitch)factor of road */
./src/drivers/berniw3/trackdesc.h:		tdble length;			/* distance to the next segment (2-D, not 3-D!) */
Binary file ./src/drivers/berniw3/berniw3.o matches
./src/drivers/berniw3/berniw3.cpp:static const tdble waitToTurn = 1.0; /* how long should i wait till i try to turn backwards */
./src/drivers/berniw3/berniw3.cpp:	tdble angle;
./src/drivers/berniw3/berniw3.cpp:	tdble brake;
./src/drivers/berniw3/berniw3.cpp:	tdble b1;							/* brake value in case we are to fast HERE and NOW */
./src/drivers/berniw3/berniw3.cpp:	tdble b2;							/* brake value for some brake point in front of us */
./src/drivers/berniw3/berniw3.cpp:	tdble b3;							/* brake value for control (avoid loosing control) */
./src/drivers/berniw3/berniw3.cpp:	tdble b4;							/* brake value for avoiding high angle of attack */
./src/drivers/berniw3/berniw3.cpp:	tdble steer, targetAngle, shiftaccel;
./src/drivers/berniw3/berniw3.cpp:    tdble brakecoeff = 1.0/(2.0*g*myc->currentseg->getKfriction()*myc->CFRICTION);
./src/drivers/berniw3/berniw3.cpp:    tdble brakespeed, brakedist;
./src/drivers/berniw3/berniw3.cpp:	tdble lookahead = 0.0;
./src/drivers/berniw3/berniw3.cpp:			tdble gm, qb, qs;
./src/drivers/berniw3/berniw3.cpp:		tdble abs_mean;
./src/drivers/berniw3/berniw3.cpp:		tdble abs_min = 1.0;
./src/drivers/berniw3/berniw3.cpp:			tdble slip = car->_wheelSpinVel(i) * car->_wheelRadius(i) / myc->getSpeed();
./src/drivers/berniw3/berniw3.cpp:	tdble cerror, cerrorh;
./src/drivers/berniw3/berniw3.cpp:			tdble slipspeed = myc->querySlipSpeed(car);
./src/drivers/berniw3/berniw3.cpp:	tdble bx = myc->getDir()->x, by = myc->getDir()->y;
./src/drivers/berniw3/berniw3.cpp:	tdble cx = myc->currentseg->getMiddle()->x - car->_pos_X, cy = myc->currentseg->getMiddle()->y - car->_pos_Y;
./src/drivers/berniw3/berniw3.cpp:	tdble parallel = (cx*bx + cy*by) / (sqrt(cx*cx + cy*cy)*sqrt(bx*bx + by*by));
./src/drivers/berniw3/berniw3.cpp:				tdble slipspeed = myc->querySlipSpeed(car);
Binary file ./src/drivers/berniw3/pathfinder.o matches
./src/drivers/berniw3/pathfinder.h:		void set(tdble ispeedsqr, tdble ilength, v3d* ip, v3d* id);
./src/drivers/berniw3/pathfinder.h:		void set(tdble ispeedsqr, tdble ilength, v3d* id);
./src/drivers/berniw3/pathfinder.h:		inline void setSpeedsqr(tdble spsqr) { speedsqr = spsqr; }
./src/drivers/berniw3/pathfinder.h:		inline void setWeight(tdble w) { weight = w; }
./src/drivers/berniw3/pathfinder.h:		inline void setRadius(tdble r) { radius = r; }
./src/drivers/berniw3/pathfinder.h:		inline tdble getSpeedsqr() { return speedsqr; }
./src/drivers/berniw3/pathfinder.h:		inline tdble getLength() { return length; }
./src/drivers/berniw3/pathfinder.h:		inline tdble getWeight() { return weight; }
./src/drivers/berniw3/pathfinder.h:		inline tdble getRadius() { return radius; }
./src/drivers/berniw3/pathfinder.h:		tdble speedsqr;	/* max possible speed sqared (speed ist therefore sqrt(speedsqr) */
./src/drivers/berniw3/pathfinder.h:		tdble length;	/* dist to the next pathseg */
./src/drivers/berniw3/pathfinder.h:		tdble weight;	/* weight function value for superposition */
./src/drivers/berniw3/pathfinder.h:		tdble radius;	/* radius of current segment */
./src/drivers/berniw3/pathfinder.h:inline void PathSeg::set(tdble ispeedsqr, tdble ilength, v3d* ip, v3d* id) {
./src/drivers/berniw3/pathfinder.h:inline void PathSeg::set(tdble ispeedsqr, tdble ilength, v3d* id) {
./src/libs/tgf/tgf.h:/* typedef double tdble; */
./src/libs/tgf/tgf.h:typedef float tdble;
./src/libs/tgf/tgf.h:const tdble G = 9.80665f; /**< m/s/s */
./src/libs/tgf/tgf.h:    tdble	x;		/**< x coordinate */
./src/libs/tgf/tgf.h:    tdble	y;		/**< y coordinate */
./src/libs/tgf/tgf.h:    tdble	z;		/**< z coordinate */
./src/libs/tgf/tgf.h:    tdble	x;		/**< x coordinate */
./src/libs/tgf/tgf.h:    tdble	y;		/**< y coordinate */
./src/libs/tgf/tgf.h:    tdble	z;		/**< z coordinate */
./src/libs/tgf/tgf.h:    tdble	ax;		/**< angle along x axis */
./src/libs/tgf/tgf.h:    tdble	ay;		/**< angle along y axis */
./src/libs/tgf/tgf.h:    tdble	az;		/**< angle along z axis */
./src/libs/tgf/tgf.h:extern tdble GfParmGetNum(void *handle, const char *path, const char *key, const char *unit, tdble deflt);
./src/libs/tgf/tgf.h:extern tdble GfParmGetCurNum(void *handle, char *path, char *key, char *unit, tdble deflt);
./src/libs/tgf/tgf.h:extern int GfParmSetNum(void *handle, const char *path, const char *key, const char *unit, tdble val);
./src/libs/tgf/tgf.h:extern int GfParmSetCurNum(void *handle, char *path, char *key, char *unit, tdble val);
./src/libs/tgf/tgf.h:extern tdble GfParmUnit2SI(const char *unit, tdble val);
./src/libs/tgf/tgf.h:extern tdble GfParmSI2Unit(const char *unit, tdble val);
./src/libs/tgf/tgf.h:extern int GfParmGetNumBoundaries(void *handle, char *path, char *key, tdble *min, tdble *max);
./src/libs/tgf/tgf.h:    tdble	val[GF_MEAN_MAX_VAL+1];
./src/libs/tgf/tgf.h:extern tdble gfMean(tdble v, tMeanVal *pvt, int n, int w);
./src/libs/tgf/tgf.h:extern void gfMeanReset(tdble v, tMeanVal *pvt);
Binary file ./src/libs/tgf/tgf.o matches
./src/libs/tgf/tgf.cpp:void gfMeanReset(tdble v, tMeanVal *pvt)
./src/libs/tgf/tgf.cpp:tdble gfMean(tdble v, tMeanVal *pvt, int n, int w)
./src/libs/tgf/tgf.cpp:	tdble sum;
./src/libs/tgf/tgf.cpp:	sum += (tdble)w * v;
./src/libs/tgf/tgf.cpp:	sum /= (tdble)(n + w);
./src/libs/tgf/tgf.cpp:char * GfTime2Str(tdble sec, int sgn)
Binary file ./src/libs/tgf/libtgf.so matches
Binary file ./src/libs/tgf/params.o matches
Binary file ./src/libs/tgf/hash.o matches
Binary file ./src/libs/tgf/trace.o matches
Binary file ./src/libs/tgf/module.o matches
./src/libs/tgf/params.cpp:    tdble				valnum;
./src/libs/tgf/params.cpp:    tdble				min;
./src/libs/tgf/params.cpp:    tdble				max;
./src/libs/tgf/params.cpp:static tdble
./src/libs/tgf/params.cpp:    tdble val;
./src/libs/tgf/params.cpp:	return (tdble)strtol(str, NULL, 0);
./src/libs/tgf/params.cpp:evalUnit (char *unit, tdble *dest, int flg)
./src/libs/tgf/params.cpp:    tdble coeff = 1.0;
./src/libs/tgf/params.cpp:tdble
./src/libs/tgf/params.cpp:GfParmUnit2SI (const char *unit, tdble val)
./src/libs/tgf/params.cpp:	tdble dest = val;
./src/libs/tgf/params.cpp:tdble
./src/libs/tgf/params.cpp:GfParmSI2Unit (const char *unit, tdble val)
./src/libs/tgf/params.cpp:	tdble dest = val;
./src/libs/tgf/params.cpp:tdble
./src/libs/tgf/params.cpp:GfParmGetNum (void *handle, const char *path, const char *key, const char *unit, tdble deflt)
./src/libs/tgf/params.cpp:tdble
./src/libs/tgf/params.cpp:GfParmGetCurNum (void *handle, char *path, char *key, char *unit, tdble deflt)
./src/libs/tgf/params.cpp:GfParmSetNum(void *handle, const char *path, const char *key, const char *unit, tdble val)
./src/libs/tgf/params.cpp:GfParmSetNumEx(void *handle, char *path, char *key, char *unit, tdble val, tdble min, tdble max)
./src/libs/tgf/params.cpp:GfParmSetCurNum(void *handle, char *path, char *key, char *unit, tdble val)
./src/libs/tgf/params.cpp:    tdble		num;
./src/libs/tgf/params.cpp:GfParmGetNumBoundaries(void *handle, char *path, char *key, tdble *min, tdble *max)
Binary file ./src/libs/tgf/os.o matches
Binary file ./src/libs/tgf/directory.o matches
./src/libs/raceengineclient/raceresults.cpp:	GfParmSetNum(results, RE_SECT_HEADER, RE_ATTR_DATE, NULL, (tdble)t);
Binary file ./src/libs/raceengineclient/raceinit.o matches
Binary file ./src/libs/raceengineclient/raceresults.o matches
./src/libs/raceengineclient/raceinit.cpp:	tdble a, b, wi2;
./src/libs/raceengineclient/raceinit.cpp:	tdble d1, d2,d3;
./src/libs/raceengineclient/raceinit.cpp:	tdble startpos, tr, ts;
./src/libs/raceengineclient/raceinit.cpp:	tdble speedInit;
./src/libs/raceengineclient/raceinit.cpp:	tdble heightInit;
Binary file ./src/libs/raceengineclient/racestate.o matches
Binary file ./src/libs/raceengineclient/racemain.o matches
Binary file ./src/libs/raceengineclient/.raceengine.cpp.swo matches
Binary file ./src/libs/raceengineclient/racegl.o matches
Binary file ./src/libs/raceengineclient/singleplayer.o matches
Binary file ./src/libs/raceengineclient/libraceengine.so matches
Binary file ./src/libs/raceengineclient/raceengine.o matches
./src/libs/raceengineclient/raceengine.cpp:			info->totalPitTime = 2.0f + fabs((double)(car->_pitFuel)) / 8.0f + (tdble)(fabs((double)(car->_pitRepair))) * 0.007f;
./src/libs/raceengineclient/raceengine.cpp:	tdble wseg;
./src/libs/raceengineclient/raceengine.cpp:			tdble lgFromStart = car->_trkPos.seg->lgfromstart;
./src/libs/raceengineclient/raceengine.cpp:				tdble toBorder;
Binary file ./src/libs/raceengineclient/racemanmenu.o matches
./src/libs/raceengineclient/racemain.cpp:	tdble dist;
Binary file ./src/libs/racescreens/libracescreens.so matches
Binary file ./src/libs/racescreens/trackselect.o matches
./src/libs/racescreens/results.cpp:    tdble		refTime;
./src/libs/racescreens/results.cpp:    tdble		refTime;
Binary file ./src/libs/racescreens/miscscreens.o matches
./src/libs/racescreens/pitmenu.cpp:    rmCar->pitcmd.fuel = (tdble)strtol(val, (char **)NULL, 0);
Binary file ./src/libs/racescreens/fileselect.o matches
Binary file ./src/libs/racescreens/driverselect.o matches
Binary file ./src/libs/racescreens/pitmenu.o matches
Binary file ./src/libs/racescreens/loadingscreen.o matches
Binary file ./src/libs/racescreens/results.o matches
Binary file ./src/libs/racescreens/racemenu.o matches
Binary file ./src/libs/tgfclient/guiobject.o matches
Binary file ./src/libs/tgfclient/gui.o matches
Binary file ./src/libs/tgfclient/glfeatures.o matches
Binary file ./src/libs/tgfclient/guiscrollbar.o matches
Binary file ./src/libs/tgfclient/guifont.o matches
Binary file ./src/libs/tgfclient/control.o matches
./src/libs/tgfclient/glfeatures.cpp:	result = (int) GfParmGetNum(paramHandle, GR_SCT_GLFEATURES, GR_ATT_TEXTURESIZE, (char*)NULL, (tdble) glTextureMaxSize);
Binary file ./src/libs/tgfclient/screen.o matches
Binary file ./src/libs/tgfclient/tgfclient.o matches
./src/libs/tgfclient/gui.cpp:static tdble DelayRepeat;
./src/libs/tgfclient/gui.cpp:		tdble rfactor = (16.0f*ViewH)/(10.0f*ViewW);
./src/libs/tgfclient/gui.cpp:			tdble tdx = (1.0f-1.0f/rfactor)/2.0f;
./src/libs/tgfclient/gui.cpp:			tdble tdy = (1.0f-rfactor)/2.0f;
Binary file ./src/libs/tgfclient/guiedit.o matches
Binary file ./src/libs/tgfclient/guimenu.o matches
Binary file ./src/libs/tgfclient/guilabel.o matches
Binary file ./src/libs/tgfclient/guiimage.o matches
Binary file ./src/libs/tgfclient/guibutton.o matches
Binary file ./src/libs/tgfclient/guihelp.o matches
Binary file ./src/libs/tgfclient/fg_gm.o matches
Binary file ./src/libs/tgfclient/guiscrollist.o matches
Binary file ./src/libs/tgfclient/img.o matches
Binary file ./src/libs/tgfclient/libtgfclient.so matches
./src/libs/tgfclient/tgfclient.h:extern char *GfTime2Str(tdble sec, int sgn);
Binary file ./src/libs/robottools/rttelem.o matches
./src/libs/robottools/rttelem.cpp:void RtTelemInit(tdble ymin, tdble ymax)
./src/libs/robottools/rttelem.cpp:void RtTelemNewChannel(const char * name, tdble * var, tdble min, tdble max)
Binary file ./src/libs/robottools/librobottools.so matches
./src/libs/robottools/rttrack.cpp:tdble
./src/libs/robottools/rttrack.cpp:RtTrackGetWidth(tTrackSeg *seg, tdble toStart)
./src/libs/robottools/rttrack.cpp:RtTrackLocal2Global(tTrkLocPos *p, tdble *X, tdble *Y, int flag)
./src/libs/robottools/rttrack.cpp:    tdble CosA, SinA, r, a;
./src/libs/robottools/rttrack.cpp:    tdble tr;
./src/libs/robottools/rttrack.cpp:RtTrackGlobal2Local(tTrackSeg *segment, tdble X, tdble Y, tTrkLocPos *p, int type)
./src/libs/robottools/rttrack.cpp:    tdble 	x, y;
./src/libs/robottools/rttrack.cpp:    tdble 	theta, a2;
./src/libs/robottools/rttrack.cpp:    tdble	curWidth;
./src/libs/robottools/rttrack.cpp:	    tdble sine, cosine;
./src/libs/robottools/rttrack.cpp:	    tdble ts;
./src/libs/robottools/rttrack.cpp:tdble
./src/libs/robottools/rttrack.cpp:    tdble	lg;
./src/libs/robottools/rttrack.cpp:    tdble	tr = p->toRight;
./src/libs/robottools/rttrack.cpp:            tdble alpha = seg->width - tr;
./src/libs/robottools/rttrack.cpp:            tdble angle = seg->angle[TR_XS] + p->toStart * seg->Kzw;
./src/libs/robottools/rttrack.cpp:            tdble noise = seg->surface->kRoughness * sin(seg->surface->kRoughWaveLen * lg) * alpha / seg->width;
./src/libs/robottools/rttrack.cpp:            tdble start_height = seg->vertex[TR_SR].z + p->toStart * seg->Kzl;
./src/libs/robottools/rttrack.cpp:    tdble tr = p->toRight;
./src/libs/robottools/rttrack.cpp:tdble
./src/libs/robottools/rttrack.cpp:RtTrackHeightG(tTrackSeg *seg, tdble X, tdble Y)
./src/libs/robottools/rttrack.cpp:RtTrackSideNormalG(tTrackSeg *seg, tdble X, tdble Y, int side, t3Dd *norm)
./src/libs/robottools/rttrack.cpp:    tdble lg;
./src/libs/robottools/rttrack.cpp:tdble
./src/libs/robottools/rttrack.cpp:    tdble	lg;
./src/libs/robottools/rttrack.cpp:tdble
./src/libs/robottools/rttrack.cpp:    tdble	lg;
./src/libs/robottools/rttrack.cpp:tdble
./src/libs/robottools/rttrack.cpp:    tdble	lg;
./src/libs/robottools/rttrack.cpp:RtDistToPit(struct CarElt *car, tTrack *track, tdble *dL, tdble *dW)
./src/libs/robottools/rttrack.cpp:    tdble	pitts;
./src/libs/robottools/rttrack.cpp:    tdble	carts;
./src/libs/robottools/robottools.h:    tdble __tmp__;						\
./src/libs/robottools/robottools.h:extern tdble RtTrackGetWidth(tTrackSeg *seg, tdble toStart);
./src/libs/robottools/robottools.h:extern void RtTrackLocal2Global(tTrkLocPos *p, tdble *X, tdble *Y, int flag);
./src/libs/robottools/robottools.h:extern void RtTrackGlobal2Local(tTrackSeg *segment, tdble X, tdble Y, tTrkLocPos *p, int type);
./src/libs/robottools/robottools.h:extern tdble RtTrackHeightL(tTrkLocPos *p);
./src/libs/robottools/robottools.h:extern tdble RtTrackHeightG(tTrackSeg *seg, tdble X, tdble Y);
./src/libs/robottools/robottools.h:extern void RtTrackSideNormalG(tTrackSeg *seg, tdble X, tdble Y, int side, t3Dd *norm);
./src/libs/robottools/robottools.h:extern tdble RtTrackSideTgAngleL(tTrkLocPos *p);
./src/libs/robottools/robottools.h:extern int RtDistToPit(struct CarElt *car, tTrack *track, tdble *dL, tdble *dW);
./src/libs/robottools/robottools.h:extern tdble RtGetDistFromStart(tCarElt *car);
./src/libs/robottools/robottools.h:extern tdble RtGetDistFromStart2(tTrkLocPos *p);
./src/libs/robottools/robottools.h:extern void RtTelemInit(tdble ymin, tdble ymax);
./src/libs/robottools/robottools.h:extern void RtTelemNewChannel(const char * name, tdble * var, tdble min, tdble max);
Binary file ./src/libs/robottools/rttrack.o matches
./src/libs/confscreens/driverconfig.cpp:	GfParmSetNum(PrefHdle, str, HM_ATT_NBPITS, (char*)NULL, (tdble)PlayersInfo[i].nbpitstops);
Binary file ./src/libs/confscreens/driverconfig.o matches
Binary file ./src/libs/confscreens/joystickconfig.o matches
Binary file ./src/libs/confscreens/graphconfig.o matches
Binary file ./src/libs/confscreens/libconfscreens.so matches
Binary file ./src/libs/confscreens/simuconfig.o matches
Binary file ./src/libs/confscreens/controlconfig.o matches
Binary file ./src/libs/confscreens/mouseconfig.o matches
./src/libs/confscreens/graphconfig.cpp:static tdble	LodFactorValue = 1.0;
Binary file ./src/libs/confscreens/openglconfig.o matches
./src/libs/confscreens/openglconfig.cpp:	int tsize = (int) GfParmGetNum(paramHandle, GR_SCT_GLFEATURES, GR_ATT_TEXTURESIZE, (char*)NULL, (tdble) sizelimit);
./src/libs/confscreens/openglconfig.cpp:	GfParmSetNum(paramHandle, GR_SCT_GLFEATURES, GR_ATT_TEXTURESIZE, (char*)NULL, (tdble) textureSizeOptionList[curOptionTextSize]);
Binary file ./src/libs/confscreens/soundconfig.o matches
Binary file ./src/libs/client/entry.o matches
Binary file ./src/libs/client/libclient.so matches
Binary file ./src/libs/client/optionmenu.o matches
./src/libs/client/splash.cpp:		//tdble rfactor = (float)(s_imgWidth*ViewH)/(float)(s_imgHeight*ViewW);
./src/libs/client/splash.cpp:		tdble rfactor = (16.0f*ViewH)/(10.0f*ViewW);
./src/libs/client/splash.cpp:			tdble tdx = (1.0f-1.0f/rfactor)/2.0f;
./src/libs/client/splash.cpp:			tdble tdy = (1.0f-rfactor)/2.0f;
Binary file ./src/libs/client/mainmenu.o matches
Binary file ./src/libs/client/splash.o matches
Binary file ./src/libs/client/exitmenu.o matches
./readme_kswe.txt:tdble steer, accelCmd, brakeCmd
